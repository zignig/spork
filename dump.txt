[08/25/20 20:26:38] CRITICAL search for bootloader ID            hexloader.py:31
                    INFO     Create BonelessSpork                 boneless.py:24
                    INFO     Create Async UART with 16/16 FIFO      serial.py:71
                    INFO     Create Timer Peripheral                 timer.py:47
                    INFO     Create Kermit CRC device           kermit_crc.py:18
                    INFO     Create Warmboot Peripheral           warmboot.py:14
                    INFO     Create Firmware Object               firmware.py:24
                    INFO     Working subroutiness                    base.py:336
                    INFO             SubR WriteHex                   base.py:339
                    INFO             SubR Read                       base.py:339
                    INFO             SubR Write                      base.py:339
                    INFO             SubR CR                         base.py:339
                    INFO             SubR COLON                      base.py:339
                    INFO             SubR SP                         base.py:339
                    INFO             SubR WriteString                base.py:339
                    INFO             SubR CoreDump                   base.py:339
                    INFO             SubR WarmBoot                   base.py:339
                    INFO             SubR MetaCommand.Run            base.py:339
                    INFO             SubR MetaCommand.Compare        base.py:339
                    INFO             SubR MetaCommand.Search         base.py:339
                    INFO             SubR MetaCommand.List           base.py:339
                    INFO             SubR CharPad.Accept             base.py:339
                    INFO             SubR Console                    base.py:339
                    INFO             SubR Term                       base.py:339
                    INFO             SubR Action                     base.py:339
                    INFO             SubR Dump._dump                 base.py:339
                    INFO             SubR ClearLine._cl              base.py:339
                    INFO             SubR ClearScreen._cls           base.py:339
                    INFO             SubR JumpToBootloader._bl       base.py:339
                    INFO             SubR Reset._reset               base.py:339
                    INFO             SubR Demo._demo                 base.py:339
                    INFO             SubR Out.outtest                base.py:339
                    INFO             SubR Warm._warmer               base.py:339
                    INFO             SubR _helptext                  base.py:339
                    INFO             SubR ON._ledon                  base.py:339
                    INFO             SubR OFF._ledoff                base.py:339
                    INFO     Attach firmware                      boneless.py:54
                    INFO     Firmware is 1253/4096 (30.59% of     boneless.py:64
                             mem) words long                                    
[
    Rem("--- Firmware Object ---"),
    Rem("['temp', 'pad_address', 'address', 'checksum', 'incoming_word', 
'status', 'fp', 'ret']"),
    Label('init'),
    MOVI(R6, 4088),
    STW(R6),
    [
        Rem("Set up the devices"),
        Rem("enable the led"),
        MOVI(R0, 1),
        STXA(R0, 33),
        Rem("load the timer"),
        MOVI(R0, 65535),
        STXA(R0, 16),
        MOVI(R0, 255),
        STXA(R0, 17),
        Rem("enable timer and events"),
        MOVI(R0, 1),
        STXA(R0, 18),
        STXA(R0, 26),
        Rem("reset the crc"),
        MOVI(R0, 1),
        STXA(R0, 40),
        Rem("Move the start pointer into register for later jumpage"),
        MOVR(R2, 'end_of_data'),
    ],
    Label('main'),
    [
        [MOVR(R0, 'led_5607')],
        Rem("Write the prelude strings"),
        [MOVR(R0, 'banner_AD6A')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [MOVR(R0, 'date_AD6A')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [MOVR(R0, 'greetings_AD6A')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [JAL(R7, 'CR')],
        Rem("Write the prompt"),
        [MOVR(R0, 'prompt_AD6A')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        Rem("load the pad address into the register"),
        [MOVR(R1, 'CharPad_8DDE')],
        Label('loop_58CF'),
        Rem("get the uart status"),
        [
            JAL(R7, 'Read'),
            Rem("Return value"),
            LD(R4, R6, -8),
            Rem("Return status"),
            LD(R5, R6, -7),
        ],
        Rem("if the status is zero skip"),
        CMPI(R5, 0),
        BZ('skip_58CF'),
        Rem("process the keystroke"),
        [
            Rem("Load char"),
            ST(R4, R6, -8),
            Rem("Load pad_address"),
            ST(R1, R6, -7),
            Rem("Load status"),
            ST(R5, R6, -6),
            JAL(R7, 'Console'),
            Rem("Return status"),
            LD(R5, R6, -6),
        ],
        [
            Rem("Load pad_address"),
            ST(R1, R6, -8),
            Rem("Load status"),
            ST(R5, R6, -7),
            JAL(R7, 'Action'),
            Rem("Return status"),
            LD(R5, R6, -7),
        ],
        Label('skip_58CF'),
        J('loop_58CF'),
    ],
    J('main'),
    Rem("--- Library Code ---"),
    [
        [
            [
                Label('WriteHex'),
                Rem(" Write a 16 bit reg as hex to the serial port"),
                Rem("['value', 'temp', 'nibble', 'char', 'repeat', '', 'fp', 
'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R4, 4),
                AND(R1, R0, R0),
                Label('again_CB83'),
                ROLI(R1, R1, 4),
                AND(R2, R1, R1),
                ANDI(R2, R2, 15),
                AND(R3, R2, R2),
                Rem("convert to char"),
                CMPI(R3, 10),
                BGEU('letter_CB83'),
                ADDI(R3, R3, 48),
                J('write_CB83'),
                Label('letter_CB83'),
                ADDI(R3, R3, 55),
                Label('write_CB83'),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'Write')],
                SUBI(R4, R4, 1),
                CMPI(R4, 0),
                BNE('again_CB83'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Read'),
                Rem(" Status and Char return "),
                Rem("['value', 'status', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("Read a char off the serial port"),
                MOVI(R1, 0),
                LDXA(R1, 2),
                CMPI(R1, 0),
                BEQ('skip_A630'),
                LDXA(R0, 1),
                MOVI(R1, 1),
                Label('skip_A630'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Write'),
                Rem(" Write a char to the uart"),
                Rem("['value', 'status', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Label('again_A713'),
                LDXA(R1, 5),
                CMPI(R1, 1),
                BEQ('cont_A713'),
                J('again_A713'),
                Label('cont_A713'),
                STXA(R0, 4),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CR'),
                Rem("['char', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 13),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                MOVI(R0, 10),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('COLON'),
                Rem("['char', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 58),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('SP'),
                Rem("['char', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 32),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('WriteString'),
                Rem(" Write a string to the uart
                        Strings are pascal style with the length as the first 
word
                    "),
                Rem("['address', 'length', 'counter', 'value', 'char', '', 'fp',
'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("empty string bail"),
                LD(R1, R0, 0),
                CMPI(R1, 0),
                BEQ('exit_BA64'),
                ADDI(R0, R0, 1),
                MOVI(R2, 0),
                Rem("Check if it is a compact string"),
                CMPI(R1, 0),
                BNS('lf_loop_BA64'),
                ANDI(R1, R1, 32767),
                Rem("Compant Strings"),
                Label('cf_loop_BA64'),
                LD(R3, R0, 0),
                SRLI(R4, R3, 8),
                [Rem("Load value"), ST(R4, R6, -8), JAL(R7, 'Write')],
                ADDI(R2, R2, 1),
                CMP(R1, R2),
                BEQ('exit_BA64'),
                ANDI(R4, R3, 255),
                [Rem("Load value"), ST(R4, R6, -8), JAL(R7, 'Write')],
                ADDI(R2, R2, 1),
                ADDI(R0, R0, 1),
                CMP(R1, R2),
                BEQ('exit_BA64'),
                J('cf_loop_BA64'),
                Rem("Long form strings"),
                Label('lf_loop_BA64'),
                LD(R3, R0, 0),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'Write')],
                ADDI(R0, R0, 1),
                ADDI(R2, R2, 1),
                CMP(R1, R2),
                BEQ('exit_BA64'),
                J('lf_loop_BA64'),
                Label('exit_BA64'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CoreDump'),
                Rem(" just dump the core "),
                Rem("['counter', 'endpoint', 'char', 'value', 'slice', '', 'fp',
'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("DUMP the entire memory space"),
                MOVI(R0, 0),
                MOVR(R1, 'end_of_data'),
                Label('dumper_96A8'),
                Rem("current address"),
                LD(R3, R0, 0),
                ANDI(R4, R0, 31),
                CMPI(R4, 0),
                BNE('cont_96A8'),
                [JAL(R7, 'CR')],
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'WriteHex')],
                [JAL(R7, 'SP')],
                [JAL(R7, 'COLON')],
                [JAL(R7, 'SP')],
                Label('cont_96A8'),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'WriteHex')],
                [JAL(R7, 'SP')],
                ADDI(R0, R0, 1),
                CMP(R0, R1),
                BNE('dumper_96A8'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('WarmBoot'),
                Rem(" Warmboot the device"),
                Rem("['image', 'temp', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                STXA(R0, 48),
                MOVI(R1, 1),
                STXA(R1, 49),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Run'),
                Rem(" given a pointer run the command"),
                Rem("['command', 'tmp', 'exe', 'status', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [MOVR(R1, 'run_AD6A')],
                [Rem("Load address"), ST(R1, R6, -8), JAL(R7, 'WriteString')],
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'WriteHex')],
                Rem("Get the execute pointer"),
                LD(R1, R0, 1),
                ADD(R2, R0, R1),
                JRAL(R7, R2),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Compare'),
                Rem("Compare string to command"),
                Rem("['command', 'current', 'com_len', 'temp2', 'temp', 
'status', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("find and run the command"),
                Rem("Current points to the top of the command"),
                Rem("Add 1 for string pointer"),
                ADDI(R1, R1, 1),
                Rem("Get the string lengths"),
                LD(R2, R0, 0),
                LD(R4, R1, 0),
                Rem("compare lengths"),
                CMP(R2, R4),
                BNE('fail_DC9F'),
                Rem("Lengths Match, search through chars"),
                Rem("reuse status as counter"),
                MOVI(R5, 1),
                Rem("Advance to the first char"),
                ADDI(R0, R0, 1),
                ADDI(R1, R1, 1),
                Label('scan_DC9F'),
                Rem("load the chars"),
                LD(R4, R0, 0),
                LD(R3, R1, 0),
                Rem("Check the chars"),
                CMP(R4, R3),
                BNE('fail_DC9F'),
                Rem("Are we at the end?"),
                CMP(R5, R2),
                BEQ('cont_DC9F'),
                Rem("Advance the counters"),
                ADDI(R0, R0, 1),
                ADDI(R1, R1, 1),
                ADDI(R5, R5, 1),
                Rem("Check next char"),
                J('scan_DC9F'),
                Label('cont_DC9F'),
                Rem("got to the end without failing"),
                MOVI(R5, 1),
                J('exit_DC9F'),
                Label('fail_DC9F'),
                Rem("No match"),
                MOVI(R5, 0),
                Label('exit_DC9F'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Search'),
                Rem("search for a given command and return a pointer"),
                Rem("['command', 'end', 'incr', 'tmp', 'status', 'current', 
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("load the pointer of the first command"),
                MOVR(R5, 'first_command'),
                Rem("Load the end of the commands"),
                MOVR(R1, 'last_command'),
                Rem("Load the string of the current command"),
                Label('again_BD0D'),
                Rem("compare the commands"),
                [
                    Rem("Load command"),
                    ST(R0, R6, -8),
                    Rem("Load current"),
                    ST(R5, R6, -7),
                    JAL(R7, 'MetaCommand.Compare'),
                    Rem("Return status"),
                    LD(R4, R6, -3),
                ],
                CMPI(R4, 1),
                BEQ('found_BD0D'),
                Rem("contains the length to the next command"),
                LD(R2, R5, 0),
                Rem("Jump to the next command"),
                ADD(R5, R5, R2),
                Rem("Are we at the end"),
                CMP(R5, R1),
                BNE('again_BD0D'),
                J('fail_BD0D'),
                Label('found_BD0D'),
                MOVI(R4, 1),
                J('exit_BD0D'),
                Label('fail_BD0D'),
                MOVI(R4, 0),
                Label('exit_BD0D'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.List'),
                Rem(" List all the available commands"),
                Rem("['incr', 'start', 'end', 'current', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [JAL(R7, 'CR')],
                Rem("load the pointer of the first command"),
                MOVR(R1, 'first_command'),
                Rem("Load the end of the commands"),
                MOVR(R2, 'last_command'),
                Rem("Load the string of the current command"),
                Label('again_635C'),
                Rem("Move to the start of the string"),
                ADDI(R3, R1, 1),
                Rem("Write the string"),
                [Rem("Load address"), ST(R3, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("Jump to the next command"),
                LD(R0, R1, 0),
                ADD(R1, R1, R0),
                Rem("Are we at the end"),
                CMP(R1, R2),
                BNE('again_635C'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CharPad.Accept'),
                Rem("['pad_address', 'char', 'length', 'target_address', '', '',
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("Copy the length"),
                LD(R2, R0, 0),
                CMPI(R2, 32),
                BGTU('exit_5EC4'),
                Rem("Add the length to the address"),
                ADD(R3, R0, R2),
                ADDI(R3, R3, 1),
                ST(R1, R3, 0),
                Rem("Offset to the next char slot"),
                ADDI(R2, R2, 1),
                ST(R2, R0, 0),
                Label('exit_5EC4'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Console'),
                Rem("['char', 'pad_address', 'status', 'temp', 'jumpval', '', 
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("printable char"),
                CMPI(R0, 31),
                BLEU('cont_F6BF'),
                CMPI(R0, 125),
                BGEU('cont_F6BF'),
                Rem("Within Printable Range, echo char"),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                [
                    Rem("Load pad_address"),
                    ST(R1, R6, -8),
                    Rem("Load char"),
                    ST(R0, R6, -7),
                    JAL(R7, 'CharPad.Accept'),
                ],
                Label('cont_F6BF'),
                Rem("Jump table select"),
                [
                    Rem("start of the jump table"),
                    Rem("start-8"),
                    [MOVI(R4, 8), CMP(R4, R0), BZ('0000_41A7'), Rem("end-8")],
                    Rem("start-9"),
                    [MOVI(R4, 9), CMP(R4, R0), BZ('0001_41A7'), Rem("end-9")],
                    Rem("start-13"),
                    [
                        MOVI(R4, 13),
                        CMP(R4, R0),
                        BZ('0002_41A7'),
                        Rem("end-13"),
                    ],
                    Rem("start-27"),
                    [
                        MOVI(R4, 27),
                        CMP(R4, R0),
                        BZ('0003_41A7'),
                        Rem("end-27"),
                    ],
                    Rem("start-4"),
                    [MOVI(R4, 4), CMP(R4, R0), BZ('0004_41A7'), Rem("end-4")],
                    Rem("start-3"),
                    [MOVI(R4, 3), CMP(R4, R0), BZ('0005_41A7'), Rem("end-3")],
                    J('table_end_41A7'),
                    Rem("end of jump table"),
                    Label('0000_41A7'),
                    [MOVI(R2, 8)],
                    J('table_end_41A7'),
                    Label('0001_41A7'),
                    [MOVI(R2, 7)],
                    J('table_end_41A7'),
                    Label('0002_41A7'),
                    [MOVI(R2, 2)],
                    J('table_end_41A7'),
                    Label('0003_41A7'),
                    [MOVI(R2, 3)],
                    J('table_end_41A7'),
                    Label('0004_41A7'),
                    [
                        Rem("^D reset"),
                        [MOVR(R3, 'warmboot_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        MOVI(R3, 65535),
                        Label('again_F6BF'),
                        SUBI(R3, R3, 1),
                        CMPI(R3, 0),
                        BZ('out_F6BF'),
                        J('again_F6BF'),
                        Label('out_F6BF'),
                        MOVI(R3, 1),
                        [
                            Rem("Load image"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WarmBoot'),
                        ],
                    ],
                    J('table_end_41A7'),
                    Label('0005_41A7'),
                    [
                        Rem("^C Init processor"),
                        [MOVR(R3, 'reset_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        J('init'),
                    ],
                    J('table_end_41A7'),
                    Label('table_end_41A7'),
                ],
                Label('exit_F6BF'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Term'),
                Rem("['string', 'escape', 'temp', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [MOVR(R2, 'a_esc_AD6A')],
                [Rem("Load address"), ST(R2, R6, -8), JAL(R7, 'WriteString')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Action'),
                Rem(" Action switch from the console status"),
                Rem("['pad_address', 'status', 'temp', 'command', 'jumpval', '',
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [
                    Rem("start of the jump table"),
                    Rem("start-Actions.RUN"),
                    [
                        MOVI(R4, 2),
                        CMP(R4, R1),
                        BZ('0000_171C'),
                        Rem("end-Actions.RUN"),
                    ],
                    Rem("start-Actions.ESCAPE"),
                    [
                        MOVI(R4, 3),
                        CMP(R4, R1),
                        BZ('0001_171C'),
                        Rem("end-Actions.ESCAPE"),
                    ],
                    Rem("start-Actions.BACKSPACE"),
                    [
                        MOVI(R4, 8),
                        CMP(R4, R1),
                        BZ('0002_171C'),
                        Rem("end-Actions.BACKSPACE"),
                    ],
                    Rem("start-Actions.COMPLETE"),
                    [
                        MOVI(R4, 7),
                        CMP(R4, R1),
                        BZ('0003_171C'),
                        Rem("end-Actions.COMPLETE"),
                    ],
                    J('table_end_171C'),
                    Rem("end of jump table"),
                    Label('0000_171C'),
                    [
                        Rem("Search for a matching command and run"),
                        Rem("Check for empty command"),
                        LD(R2, R0, 0),
                        CMPI(R2, 0),
                        BZ('cont_9CA8'),
                        [JAL(R7, 'CR')],
                        [
                            Rem("Load command"),
                            ST(R0, R6, -8),
                            JAL(R7, 'MetaCommand.Search'),
                            Rem("Return status"),
                            LD(R1, R6, -4),
                            Rem("Return current"),
                            LD(R3, R6, -3),
                        ],
                        CMPI(R1, 1),
                        BNE('skip_9CA8'),
                        Rem("Reset the pad"),
                        MOVI(R1, 0),
                        ST(R1, R0, 0),
                        Rem("Found a command run"),
                        [
                            Rem("Load command"),
                            ST(R3, R6, -8),
                            JAL(R7, 'MetaCommand.Run'),
                        ],
                        J('cont_9CA8'),
                        Label('skip_9CA8'),
                        [MOVR(R2, 'notfound_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        Label('cont_9CA8'),
                        [
                            Rem("Load address"),
                            ST(R0, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        Rem("Reset the pad"),
                        MOVI(R1, 0),
                        ST(R1, R0, 0),
                        [JAL(R7, 'CR')],
                        [MOVR(R2, 'prompt_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_171C'),
                    Label('0001_171C'),
                    [
                        Rem("write the escape sequence"),
                        [MOVR(R2, 'escape_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_171C'),
                    Label('0002_171C'),
                    [
                        [MOVR(R2, 'backspace_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_171C'),
                    Label('0003_171C'),
                    [
                        Rem("list all commands"),
                        [JAL(R7, 'MetaCommand.List')],
                        [MOVR(R2, 'prompt_AD6A')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        [
                            Rem("Load address"),
                            ST(R0, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_171C'),
                    Label('table_end_171C'),
                ],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Dump._dump'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [JAL(R7, 'CR')],
                [JAL(R7, 'CoreDump')],
                [JAL(R7, 'CR')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ClearLine._cl'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [MOVR(R0, 'br_AD6A')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ClearScreen._cls'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [MOVR(R0, 'clearscreen_AD6A')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                [MOVR(R0, 'home_AD6A')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('JumpToBootloader._bl'),
                Rem("['', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 0),
                JR(R0, 0),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Reset._reset'),
                Rem("['', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                J('init'),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Demo._demo'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'demo_AD6A')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Out.outtest'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'hello_AD6A')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Warm._warmer'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 1),
                STXA(R0, 48),
                STXA(R0, 49),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('_helptext'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'helper_AD6A')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ON._ledon'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 1),
                STXA(R0, 32),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('OFF._ledoff'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                MOVI(R0, 0),
                STXA(R0, 32),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
    ],
    Rem("--- Extra Code ---"),
    [
        Label('first_command'),
        [
            Label('Dump_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2950>,
            [Label('Dump'), Rem("dump"), 4, [100, 117, 109, 112]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Dump._dump')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('cl_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2a70>,
            [Label('cl'), Rem("cl"), 2, [99, 108]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ClearLine._cl')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('cls_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef29e0>,
            [Label('cls'), Rem("cls"), 3, [99, 108, 115]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ClearScreen._cls')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('BL_0_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2c20>,
            [Label('BL_0'), Rem("bl_0"), 4, [98, 108, 95, 48]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'JumpToBootloader._bl')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Reset_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2d40>,
            [Label('Reset'), Rem("reset"), 5, [114, 101, 115, 101, 116]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Reset._reset')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Demo_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2b00>,
            [Label('Demo'), Rem("demo"), 4, [100, 101, 109, 111]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Demo._demo')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Out_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2b90>,
            [Label('Out'), Rem("out"), 3, [111, 117, 116]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Out.outtest')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Warm_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2dd0>,
            [Label('Warm'), Rem("warm"), 4, [119, 97, 114, 109]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Warm._warmer')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Help_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2cb0>,
            [Label('Help'), Rem("help"), 4, [104, 101, 108, 112]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, '_helptext')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('?_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2ef0>,
            [Label('?'), Rem("?"), 1, [63]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, '_helptext')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('ON_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bef2f80>,
            [Label('ON'), Rem("on"), 2, [111, 110]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ON._ledon')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('OFF_comm'),
            <function Command.ref.<locals>.relocate at 0x7f159bf09050>,
            [Label('OFF'), Rem("off"), 3, [111, 102, 102]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'OFF._ledoff')],
            ADJW(8),
            JR(R7, 0),
        ],
        Label('last_command'),
    ],
    Rem("--- Data Objects ---"),
    [
        [
            Rem("String Construct"),
            Label('greetings_AD6A'),
            Rem("
            Boneless-CPU-v3
             "),
            32788,
            [
                3338,
                17007,
                28261,
                27749,
                29555,
                11587,
                20565,
                11638,
                13069,
                2592,
            ],
            Label('warmboot_AD6A'),
            Rem("Warmboot! "),
            32778,
            [22369, 29293, 25199, 28532, 8480],
            Label('reset_AD6A'),
            Rem("Reset!"),
            32774,
            [21093, 29541, 29729],
            Label('escape_AD6A'),
            Rem("<ESC> "),
            32774,
            [15429, 21315, 15904],
            Label('banner_AD6A'),
            Rem("b'\n\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x8
0\xe2\x94\x80\xe2'"),
            33524,
            [
                2786,
                38028,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                36874,
                58004,
                33506,
                38545,
                58006,
                37346,
                38545,
                58006,
                35042,
                38528,
                58006,
                34018,
                38545,
                58006,
                35042,
                38528,
                58006,
                35042,
                38545,
                58006,
                35042,
                38528,
                58006,
                35042,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                35042,
                38545,
                58006,
                37346,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                37346,
                38545,
                58006,
                37346,
                38545,
                58006,
                35042,
                38545,
                58006,
                35042,
                38545,
                58006,
                32994,
                38528,
                58006,
                35042,
                38545,
                58006,
                37346,
                38018,
                2786,
                38018,
                58006,
                37346,
                38545,
                58006,
                37346,
                38536,
                58006,
                32994,
                38532,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                32994,
                38528,
                58006,
                37346,
                38536,
                58006,
                37346,
                38545,
                58006,
                37346,
                38536,
                58006,
                32994,
                38528,
                58006,
                37346,
                38528,
                58006,
                32994,
                38536,
                58006,
                37346,
                38528,
                58006,
                32994,
                38536,
                58006,
                37346,
                38545,
                58006,
                37346,
                38545,
                58006,
                37346,
                38528,
                58006,
                34018,
                38528,
                58006,
                37346,
                38545,
                58006,
                32994,
                38532,
                58006,
                37346,
                38545,
                58004,
                33290,
                58004,
                33506,
                38545,
                58006,
                37346,
                38545,
                58006,
                32994,
                38528,
                58006,
                37346,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38545,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                37346,
                38528,
                58006,
                37346,
                38545,
                58006,
                32994,
                38528,
                58006,
                37346,
                38545,
                58006,
                37346,
                38018,
                2786,
                38036,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                38922,
            ],
            Label('prompt_AD6A'),
            Rem("ZIG_0>"),
            32774,
            [23113, 18271, 12350],
            Label('date_AD6A'),
            Rem("2020-08-25 20:26:38."),
            32796,
            [
                12848,
                12848,
                11568,
                14381,
                12853,
                8242,
                12346,
                12854,
                14899,
                14382,
                13364,
                13111,
                12337,
                3338,
            ],
            Label('backspace_AD6A'),
            Rem("<BS>"),
            32772,
            [15426, 21310],
            Label('a_esc_AD6A'),
            Rem("["),
            32770,
            [7003],
            Label('clearscreen_AD6A'),
            Rem("2J"),
            32770,
            [12874],
            Label('home_AD6A'),
            Rem("H "),
            32770,
            [18464],
            Label('br_AD6A'),
            Rem("999;999H"),
            32776,
            [14649, 14651, 14649, 14664],
            Label('notfound_AD6A'),
            Rem("Command not found : "),
            32788,
            [
                17263,
                28013,
                24942,
                25632,
                28271,
                29728,
                26223,
                30062,
                25632,
                14880,
            ],
            Label('demo_AD6A'),
            Rem("This is actually a r"),
            32820,
            [
                21608,
                26995,
                8297,
                29472,
                24931,
                29813,
                24940,
                27769,
                8289,
                8306,
                25953,
                27756,
                31008,
                26209,
                28259,
                31008,
                16718,
                21321,
                8292,
                25965,
                28460,
                8302,
                28448,
                29285,
                24940,
                27769,
            ],
            Label('hello_AD6A'),
            Rem("this is a test"),
            32782,
            [29800, 26995, 8297, 29472, 24864, 29797, 29556],
            Label('helper_AD6A'),
            Rem("
            <tab> List commands"),
            32896,
            [
                2620,
                29793,
                25150,
                8268,
                26995,
                29728,
                25455,
                28013,
                24942,
                25715,
                2654,
                17184,
                29285,
                29541,
                29706,
                24132,
                8311,
                24946,
                28002,
                28527,
                29728,
                26990,
                29807,
                8308,
                26725,
                8290,
                28527,
                29804,
                28513,
                25701,
                29194,
                24157,
                8293,
                30825,
                29728,
                29544,
                25964,
                27658,
                2674,
                25958,
                25970,
                8308,
                28448,
                26740,
                29808,
                29498,
                12079,
                26473,
                29800,
                30050,
                11875,
                28525,
                12154,
                26983,
                28265,
                26415,
                29552,
                28530,
                27439,
                2592,
                8224,
                8224,
                8224,
                8224,
            ],
            Label('run_AD6A'),
            Rem("running command "),
            32784,
            [29301, 28270, 26990, 26400, 25455, 28013, 24942, 25632],
        ],
        [
            Rem("Globals"),
            Label('led_5607'),
            Rem("0"),
            0,
            Label('cursor_5607'),
            Rem("0"),
            0,
        ],
        [
            Rem("Data Pad"),
            Label('CharPad_8DDE'),
            Rem("length"),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            Rem("total_length"),
            [32],
            Label('cursor_8DDE'),
            Rem("cursor"),
            [0],
        ],
    ],
    Label('end_of_data'),
]
serial.divisor 0
serial.rx.data 1
serial.rx.rdy 2
serial.rx.err 3
serial.tx.data 4
serial.tx.rdy 5
serial.ev.status 8
serial.ev.pending 9
serial.ev.enable 10
timer.reload_0 16
timer.reload_1 17
timer.en 18
timer.ctr_0 19
timer.ctr_1 20
timer.ev.status 24
timer.ev.pending 25
timer.ev.enable 26
statusled.led 32
statusled.en 33
crc.reset 40
crc.byte 41
crc.crc 42
warm.image 48
warm.en 49
None
