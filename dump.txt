Testing Spork
serial.divisor 0
serial.rx.data 1
serial.rx.rdy 2
serial.rx.err 3
serial.tx.data 4
serial.tx.rdy 5
serial.ev.status 8
serial.ev.pending 9
serial.ev.enable 10
timer.reload_0 16
timer.reload_1 17
timer.en 18
timer.ctr_0 19
timer.ctr_1 20
timer.ev.status 24
timer.ev.pending 25
timer.ev.enable 26
statusled.led 32
statusled.en 33
crc.reset 40
crc.byte 41
crc.crc 42
warm.image 48
warm.en 49
None
[ Rem("--- Firmware Object ---"),
  Rem("['temp', 'pad_address', 'address', 'checksum', 'incoming_word', 'status', 'fp', 'ret']"),
  Label('init'),
  MOVI(R6, 1016),
  STW(R6),
  [ Rem("Set up the devices"),
    Rem("enable the led"),
    MOVI(R0, 1),
    STXA(R0, 33),
    Rem("load the timer"),
    MOVI(R0, 65535),
    STXA(R0, 16),
    MOVI(R0, 255),
    STXA(R0, 17),
    Rem("enable timer and events"),
    MOVI(R0, 1),
    STXA(R0, 18),
    STXA(R0, 26),
    Rem("reset the crc"),
    MOVI(R0, 1),
    STXA(R0, 40),
    Rem("Move the start pointer into register for later jumpage"),
    MOVR(R2, 'program_start')],
  Label('main'),
  [ [ MOVR(R0, 'greetings_26ED')],
    [ Rem("Load address"),
      ST(R0, R6, -8),
      JAL(R7, 'WriteString')],
    [ MOVR(R0, 'loader_id_26ED')],
    [ Rem("Load address"),
      ST(R0, R6, -8),
      JAL(R7, 'WriteString')],
    [ MOVR(R0, 'prompt_26ED')],
    [ Rem("Load address"),
      ST(R0, R6, -8),
      JAL(R7, 'WriteString')],
    [ MOVR(R1, 'CharPad_0507')],
    Label('loop_C5BD'),
    [ JAL(R7, 'Read'),
      Rem("Return value"),
      LD(R4, R6, -8),
      Rem("Return status"),
      LD(R5, R6, -7)],
    CMPI(R5, 0),
    BZ('skip_C5BD'),
    [ Rem("Load char"),
      ST(R4, R6, -8),
      Rem("Load pad_address"),
      ST(R1, R6, -7),
      Rem("Load status"),
      ST(R5, R6, -6),
      JAL(R7, 'Console'),
      Rem("Return status"),
      LD(R5, R6, -6)],
    [ Rem("Load pad_address"),
      ST(R1, R6, -8),
      Rem("Load status"),
      ST(R5, R6, -7),
      JAL(R7, 'Action'),
      Rem("Return status"),
      LD(R5, R6, -7)],
    Label('skip_C5BD'),
    J('loop_C5BD')],
  J('main'),
  Rem("--- Library Code ---"),
  [ [ [ Label('Read'),
        Rem(" Status and Char return "),
        Rem("['value', 'status', '', '', '', '', 'fp', 'ret']"),
        ADJW(-8),
        LDW(R6, 0),
        Rem("Read a char of the serial port"),
        MOVI(R1, 0),
        LDXA(R1, 2),
        CMPI(R1, 0),
        BEQ('skip_2BE8'),
        LDXA(R0, 1),
        MOVI(R1, 1),
        Label('skip_2BE8'),
        ADJW(8),
        JR(R7, 0)]],
    [ [ Label('Write'),
        Rem(" Write a char to the uart"),
        Rem("['value', 'status', '', '', '', '', 'fp', 'ret']"),
        ADJW(-8),
        LDW(R6, 0),
        Label('again_9284'),
        LDXA(R1, 5),
        CMPI(R1, 1),
        BEQ('cont_9284'),
        J('again_9284'),
        Label('cont_9284'),
        STXA(R0, 4),
        ADJW(8),
        JR(R7, 0)]],
    [ [ Label('WriteString'),
        Rem(" Write a string to the uart
        Strings are pascal style with the length as the first word
    "),
        Rem("['address', 'length', 'counter', 'value', '', '', 'fp', 'ret']"),
        ADJW(-8),
        LDW(R6, 0),
        LD(R1, R0, 0),
        ADDI(R0, R0, 1),
        MOVI(R2, 0),
        Label('loop_B7F9'),
        LD(R3, R0, 0),
        [ Rem("Load value"),
          ST(R3, R6, -8),
          JAL(R7, 'Write')],
        ADDI(R0, R0, 1),
        ADDI(R2, R2, 1),
        CMP(R1, R2),
        BEQ('exit_B7F9'),
        J('loop_B7F9'),
        Label('exit_B7F9'),
        ADJW(8),
        JR(R7, 0)]],
    [ [ Label('WarmBoot'),
        Rem(" Warmboot the device"),
        Rem("['image', 'temp', '', '', '', '', 'fp', 'ret']"),
        ADJW(-8),
        LDW(R6, 0),
        STXA(R0, 48),
        MOVI(R1, 1),
        STXA(R1, 49),
        ADJW(8),
        JR(R7, 0)]],
    [ [ Label('Console'),
        Rem("['char', 'pad_address', 'status', 'temp', 'jumpval', '', 'fp', 'ret']"),
        ADJW(-8),
        LDW(R6, 0),
        [ Rem("printable char"),
          CMPI(R0, 31),
          BLEU('cont_4BA4'),
          CMPI(R0, 125),
          BGEU('cont_4BA4'),
          CMPI(R0, 27),
          BEQ('esc_4BA4'),
          Rem("Within Printable Range, echo char"),
          [ Rem("Load value"),
            ST(R0, R6, -8),
            JAL(R7, 'Write')],
          J('cont_4BA4'),
          Label('esc_4BA4'),
          Rem("Escape sequence, return status 2 and exit"),
          MOVI(R2, 2),
          J('exit_4BA4'),
          Label('cont_4BA4')],
        [ Rem("start of the jump table"),
          Rem("start-10"),
          [ MOVI(R4, 10),
            CMP(R4, R0),
            BZ('0000_426E'),
            Rem("end-10")],
          Rem("start-13"),
          [ MOVI(R4, 13),
            CMP(R4, R0),
            BZ('0001_426E'),
            Rem("end-13")],
          Rem("start-4"),
          [ MOVI(R4, 4),
            CMP(R4, R0),
            BZ('0002_426E'),
            Rem("end-4")],
          Rem("start-3"),
          [ MOVI(R4, 3),
            CMP(R4, R0),
            BZ('0003_426E'),
            Rem("end-3")],
          J('table_end_426E'),
          Rem("end of jump table"),
          Label('0000_426E'),
          [ [ MOVR(R3, 'prompt_26ED')],
            [ Rem("Load address"),
              ST(R3, R6, -8),
              JAL(R7, 'WriteString')],
            MOVI(R2, 1)],
          J('table_end_426E'),
          Label('0001_426E'),
          [ [ MOVR(R3, 'prompt_26ED')],
            [ Rem("Load address"),
              ST(R3, R6, -8),
              JAL(R7, 'WriteString')],
            MOVI(R2, 1)],
          J('table_end_426E'),
          Label('0002_426E'),
          [ Rem("^D reset"),
            [ MOVR(R3, 'warmboot_26ED')],
            [ Rem("Load address"),
              ST(R3, R6, -8),
              JAL(R7, 'WriteString')],
            MOVI(R3, 1),
            [ Rem("Load image"),
              ST(R3, R6, -8),
              JAL(R7, 'WarmBoot')]],
          J('table_end_426E'),
          Label('0003_426E'),
          [ Rem("^C Init processor"),
            [ MOVR(R3, 'reset_26ED')],
            [ Rem("Load address"),
              ST(R3, R6, -8),
              JAL(R7, 'WriteString')],
            J('init')],
          J('table_end_426E'),
          Label('table_end_426E')],
        Rem("Not working yet"),
        Label('exit_4BA4'),
        ADJW(8),
        JR(R7, 0)]],
    [ [ Label('Action'),
        Rem("['pad_address', 'status', 'temp', 'jumpval', '', '', 'fp', 'ret']"),
        ADJW(-8),
        LDW(R6, 0),
        [ Rem("start of the jump table"),
          Rem("start-0"),
          [ MOVI(R3, 0),
            CMP(R3, R1),
            BZ('0000_E7C9'),
            Rem("end-0")],
          J('table_end_E7C9'),
          Rem("end of jump table"),
          Label('0000_E7C9'),
          [ Rem("Just echo out the pad"),
            [ Rem("Load address"),
              ST(R0, R6, -8),
              JAL(R7, 'WriteString')],
            MOVI(R1, 0)],
          J('table_end_E7C9'),
          Label('table_end_E7C9')],
        Rem("Actions not working"),
        Label('exit_32EA'),
        ADJW(8),
        JR(R7, 0)]]],
  Rem("--- Data Objects ---"),
  [ [ Rem("String Construct"),
      Label('loader_id_26ED'),
      Rem("
BL_0"),
      6,
      [ 13,
        10,
        66,
        76,
        95,
        48],
      Label('greetings_26ED'),
      Rem("
Boneless-CPU-v3"),
      17,
      [ 13,
        10,
        66,
        111,
        110,
        101,
        108,
        101,
        115,
        115,
        45,
        67,
        80,
        85,
        45,
        118,
        51],
      Label('warmboot_26ED'),
      Rem("Warmboot!"),
      9,
      [ 87,
        97,
        114,
        109,
        98,
        111,
        111,
        116,
        33],
      Label('reset_26ED'),
      Rem("Reset!"),
      6,
      [ 82,
        101,
        115,
        101,
        116,
        33],
      Label('prompt_26ED'),
      Rem("
BL_0>"),
      7,
      [ 13,
        10,
        66,
        76,
        95,
        48,
        62]],
    [ Rem("Data Pad"),
      Label('CharPad_0507'),
      Rem("length"),
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      Rem("total_length"),
      [ 32],
      Rem("cursor"),
      [ 0]]],
  Label('program_start')]

