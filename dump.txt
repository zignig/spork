[09/09/20 20:06:33] CRITICAL search for bootloader ID            hexloader.py:32
                    INFO     Create BonelessSpork                 boneless.py:24
                    INFO     Create Async UART with 16/16 FIFO      serial.py:71
                    INFO     Create Timer Peripheral                 timer.py:47
                    INFO     Create Kermit CRC device           kermit_crc.py:19
                    INFO     Create Watchdog Peripheral           watchdog.py:13
                    INFO     Create Warmboot Peripheral           warmboot.py:14
                    INFO     Create Firmware Object               firmware.py:31
                    INFO     Working subroutines                     base.py:339
                    INFO               - WriteHex                    base.py:342
                    INFO               - Read                        base.py:342
                    INFO               - Write                       base.py:342
                    INFO               - CR                          base.py:342
                    INFO               - COLON                       base.py:342
                    INFO               - SP                          base.py:342
                    INFO               - WriteString                 base.py:342
                    INFO               - CoreDump                    base.py:342
                    INFO               - WarmBoot                    base.py:342
                    INFO               - MetaCommand.Run             base.py:342
[09/09/20 20:06:34] INFO               - MetaCommand.Compare         base.py:342
                    INFO               - MetaCommand.Search          base.py:342
                    INFO               - MetaCommand.List            base.py:342
                    INFO               - CharPad.Accept              base.py:342
                    INFO               - Console                     base.py:342
                    INFO               - Term                        base.py:342
                    INFO               - Action                      base.py:342
                    INFO               - Dump._dump                  base.py:342
                    INFO               - ClearLine._cl               base.py:342
                    INFO               - ClearScreen._cls            base.py:342
                    INFO               - JumpToBootloader._bl        base.py:342
                    INFO               - Reset._reset                base.py:342
                    INFO               - Demo._demo                  base.py:342
                    INFO               - Out.outtest                 base.py:342
                    INFO               - Warm._warmer                base.py:342
                    INFO               - Prog._prog                  base.py:342
                    INFO               - _helptext                   base.py:342
                    INFO               - ON._ledon                   base.py:342
                    INFO               - OFF._ledoff                 base.py:342
                    INFO     Attach firmware                      boneless.py:54
                    INFO     Firmware is 1271/4096 (31.03% of     boneless.py:64
                             mem) words long                                    
serial.divisor 0
serial.rx.data 1
serial.rx.rdy 2
serial.rx.err 3
serial.tx.data 4
serial.tx.rdy 5
serial.ev.status 8
serial.ev.pending 9
serial.ev.enable 10
timer.reload_0 16
timer.reload_1 17
timer.en 18
timer.ctr_0 19
timer.ctr_1 20
timer.ev.status 24
timer.ev.pending 25
timer.ev.enable 26
statusled.led 32
statusled.en 33
crc.reset 40
crc.byte 41
crc.crc 42
watchdog.en 48
watchdog.poke 49
watchdog.interval 50
warm.image 56
warm.en 57
None
[
    Rem("--- Firmware Object ---"),
    Rem("['temp', 'pad_address', 'address', 'checksum', 'incoming_word', 
'status', 'fp', 'ret']"),
    Label('init'),
    MOVI(R6, 4088),
    STW(R6),
    [
        Rem("Set up the devices"),
        Rem("enable the led"),
        MOVI(R0, 1),
        STXA(R0, 33),
        Rem("load the timer"),
        MOVI(R0, 65535),
        STXA(R0, 16),
        MOVI(R0, 255),
        STXA(R0, 17),
        Rem("enable timer and events"),
        MOVI(R0, 1),
        STXA(R0, 18),
        STXA(R0, 26),
        Rem("reset the crc"),
        MOVI(R0, 1),
        STXA(R0, 40),
        Rem("Move the start pointer into register for later jumpage"),
        MOVR(R2, 'end_of_data'),
    ],
    Label('main'),
    [
        [MOVR(R0, 'led_DE0F')],
        Rem("Write the prelude strings"),
        [MOVR(R0, 'banner_4922')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [MOVR(R0, 'date_4922')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [MOVR(R0, 'greetings_4922')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [JAL(R7, 'CR')],
        Rem("Write the prompt"),
        [MOVR(R0, 'prompt_4922')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        Rem("load the pad address into the register"),
        [MOVR(R1, 'CharPad_5762')],
        Label('loop_98A8'),
        Rem("get the uart status"),
        [
            JAL(R7, 'Read'),
            Rem("Return value"),
            LD(R4, R6, -8),
            Rem("Return status"),
            LD(R5, R6, -7),
        ],
        Rem("if the status is zero skip"),
        CMPI(R5, 0),
        BZ('skip_98A8'),
        Rem("process the keystroke"),
        [
            Rem("Load char"),
            ST(R4, R6, -8),
            Rem("Load pad_address"),
            ST(R1, R6, -7),
            Rem("Load status"),
            ST(R5, R6, -6),
            JAL(R7, 'Console'),
            Rem("Return status"),
            LD(R5, R6, -6),
        ],
        [
            Rem("Load pad_address"),
            ST(R1, R6, -8),
            Rem("Load status"),
            ST(R5, R6, -7),
            JAL(R7, 'Action'),
            Rem("Return status"),
            LD(R5, R6, -7),
        ],
        Label('skip_98A8'),
        J('loop_98A8'),
    ],
    J('main'),
    Label('library_code_484A'),
    Rem("--- Library Code ---"),
    [
        [
            [
                Label('WriteHex'),
                Rem(" Write a 16 bit reg as hex to the serial port"),
                Rem("['value', 'temp', 'nibble', 'char', 'repeat', '', 'fp', 
'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R4, 4),
                AND(R1, R0, R0),
                Label('again_C9C9'),
                ROLI(R1, R1, 4),
                AND(R2, R1, R1),
                ANDI(R2, R2, 15),
                AND(R3, R2, R2),
                Rem("convert to char"),
                CMPI(R3, 10),
                BGEU('letter_C9C9'),
                ADDI(R3, R3, 48),
                J('write_C9C9'),
                Label('letter_C9C9'),
                ADDI(R3, R3, 55),
                Label('write_C9C9'),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'Write')],
                SUBI(R4, R4, 1),
                CMPI(R4, 0),
                BNE('again_C9C9'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Read'),
                Rem(" Status and Char return "),
                Rem("['value', 'status', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Read a char off the serial port"),
                MOVI(R1, 0),
                LDXA(R1, 2),
                CMPI(R1, 0),
                BEQ('skip_CD37'),
                LDXA(R0, 1),
                MOVI(R1, 1),
                Label('skip_CD37'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Write'),
                Rem(" Write a char to the uart"),
                Rem("['value', 'status', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Label('again_79AC'),
                LDXA(R1, 5),
                CMPI(R1, 1),
                BEQ('cont_79AC'),
                J('again_79AC'),
                Label('cont_79AC'),
                STXA(R0, 4),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CR'),
                Rem("['char', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 13),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                MOVI(R0, 10),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('COLON'),
                Rem("['char', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 58),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('SP'),
                Rem("['char', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 32),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('WriteString'),
                Rem(" Write a string to the uart
                        Strings are pascal style with the length as the first 
word
                    "),
                Rem("['address', 'length', 'counter', 'value', 'char', '', 'fp',
'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("empty string bail"),
                LD(R1, R0, 0),
                CMPI(R1, 0),
                BEQ('exit_6AD1'),
                ADDI(R0, R0, 1),
                MOVI(R2, 0),
                Rem("Check if it is a compact string"),
                Rem("sign bit is set?"),
                CMPI(R1, 0),
                BNS('lf_loop_6AD1'),
                Rem("Set high bit to zero"),
                ANDI(R1, R1, 32767),
                Rem("Compact Strings"),
                Rem("strings are byte encoded"),
                Label('cf_loop_6AD1'),
                LD(R3, R0, 0),
                Rem("first char"),
                SRLI(R4, R3, 8),
                [Rem("Load value"), ST(R4, R6, -8), JAL(R7, 'Write')],
                ADDI(R2, R2, 1),
                CMP(R1, R2),
                BEQ('exit_6AD1'),
                Rem("second char"),
                ANDI(R4, R3, 255),
                [Rem("Load value"), ST(R4, R6, -8), JAL(R7, 'Write')],
                ADDI(R2, R2, 1),
                ADDI(R0, R0, 1),
                CMP(R1, R2),
                BEQ('exit_6AD1'),
                J('cf_loop_6AD1'),
                Rem("Long form strings"),
                Label('lf_loop_6AD1'),
                LD(R3, R0, 0),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'Write')],
                ADDI(R0, R0, 1),
                ADDI(R2, R2, 1),
                CMP(R1, R2),
                BEQ('exit_6AD1'),
                J('lf_loop_6AD1'),
                Label('exit_6AD1'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CoreDump'),
                Rem(" just dump the core "),
                Rem("['counter', 'endpoint', 'char', 'value', 'slice', '', 'fp',
'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("DUMP the entire memory space"),
                MOVI(R0, 0),
                MOVR(R1, 'end_of_data'),
                Label('dumper_55DC'),
                Rem("current address"),
                LD(R3, R0, 0),
                ANDI(R4, R0, 31),
                CMPI(R4, 0),
                BNE('cont_55DC'),
                [JAL(R7, 'CR')],
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'WriteHex')],
                [JAL(R7, 'SP')],
                [JAL(R7, 'COLON')],
                [JAL(R7, 'SP')],
                Label('cont_55DC'),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'WriteHex')],
                [JAL(R7, 'SP')],
                ADDI(R0, R0, 1),
                CMP(R0, R1),
                BNE('dumper_55DC'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('WarmBoot'),
                Rem(" Warmboot the device"),
                Rem("['image', 'temp', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                STXA(R0, 56),
                MOVI(R1, 1),
                STXA(R1, 57),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Run'),
                Rem(" given a pointer run the command"),
                Rem("['command', 'tmp', 'exe', 'status', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Get the execute pointer"),
                LD(R1, R0, 1),
                ADD(R2, R0, R1),
                JRAL(R7, R2),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Compare'),
                Rem("Compare string to command"),
                Rem("['command', 'current', 'com_len', 'temp2', 'temp', 
'status', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("find and run the command"),
                Rem("Current points to the top of the command"),
                Rem("Add 1 for string pointer"),
                ADDI(R1, R1, 1),
                Rem("Get the string lengths"),
                LD(R2, R0, 0),
                LD(R4, R1, 0),
                Rem("compare lengths"),
                CMP(R2, R4),
                BNE('fail_FC04'),
                Rem("Lengths Match, search through chars"),
                Rem("reuse status as counter"),
                MOVI(R5, 1),
                Rem("Advance to the first char"),
                ADDI(R0, R0, 1),
                ADDI(R1, R1, 1),
                Label('scan_FC04'),
                Rem("load the chars"),
                LD(R4, R0, 0),
                LD(R3, R1, 0),
                Rem("Check the chars"),
                CMP(R4, R3),
                BNE('fail_FC04'),
                Rem("Are we at the end?"),
                CMP(R5, R2),
                BEQ('cont_FC04'),
                Rem("Advance the counters"),
                ADDI(R0, R0, 1),
                ADDI(R1, R1, 1),
                ADDI(R5, R5, 1),
                Rem("Check next char"),
                J('scan_FC04'),
                Label('cont_FC04'),
                Rem("got to the end without failing"),
                MOVI(R5, 1),
                J('exit_FC04'),
                Label('fail_FC04'),
                Rem("No match"),
                MOVI(R5, 0),
                Label('exit_FC04'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Search'),
                Rem("search for a given command and return a pointer"),
                Rem("['command', 'end', 'incr', 'tmp', 'status', 'current', 
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("load the pointer of the first command"),
                MOVR(R5, 'first_command'),
                Rem("Load the end of the commands"),
                MOVR(R1, 'last_command'),
                Rem("Load the string of the current command"),
                Label('again_4FBA'),
                Rem("compare the commands"),
                [
                    Rem("Load command"),
                    ST(R0, R6, -8),
                    Rem("Load current"),
                    ST(R5, R6, -7),
                    JAL(R7, 'MetaCommand.Compare'),
                    Rem("Return status"),
                    LD(R4, R6, -3),
                ],
                CMPI(R4, 1),
                BEQ('found_4FBA'),
                Rem("contains the length to the next command"),
                LD(R2, R5, 0),
                Rem("Jump to the next command"),
                ADD(R5, R5, R2),
                Rem("Are we at the end"),
                CMP(R5, R1),
                BNE('again_4FBA'),
                J('fail_4FBA'),
                Label('found_4FBA'),
                MOVI(R4, 1),
                J('exit_4FBA'),
                Label('fail_4FBA'),
                MOVI(R4, 0),
                Label('exit_4FBA'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.List'),
                Rem(" List all the available commands"),
                Rem("['incr', 'start', 'end', 'current', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                Rem("load the pointer of the first command"),
                MOVR(R1, 'first_command'),
                Rem("Load the end of the commands"),
                MOVR(R2, 'last_command'),
                Rem("Load the string of the current command"),
                Label('again_8CA6'),
                Rem("Move to the start of the string"),
                ADDI(R3, R1, 1),
                Rem("Write the string"),
                [Rem("Load address"), ST(R3, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("Jump to the next command"),
                LD(R0, R1, 0),
                ADD(R1, R1, R0),
                Rem("Are we at the end"),
                CMP(R1, R2),
                BNE('again_8CA6'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CharPad.Accept'),
                Rem("['pad_address', 'char', 'length', 'target_address', '', '',
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Copy the length"),
                LD(R2, R0, 0),
                CMPI(R2, 32),
                BGTU('exit_C200'),
                Rem("Add the length to the address"),
                ADD(R3, R0, R2),
                ADDI(R3, R3, 1),
                ST(R1, R3, 0),
                Rem("Offset to the next char slot"),
                ADDI(R2, R2, 1),
                ST(R2, R0, 0),
                Label('exit_C200'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Console'),
                Rem("['char', 'pad_address', 'status', 'temp', 'jumpval', '', 
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("printable char"),
                CMPI(R0, 31),
                BLEU('cont_35E5'),
                CMPI(R0, 125),
                BGEU('cont_35E5'),
                Rem("Within Printable Range, echo char"),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                [
                    Rem("Load pad_address"),
                    ST(R1, R6, -8),
                    Rem("Load char"),
                    ST(R0, R6, -7),
                    JAL(R7, 'CharPad.Accept'),
                ],
                Label('cont_35E5'),
                Rem("Jump table select"),
                [
                    Rem("start of the jump table"),
                    Rem("start-8"),
                    [MOVI(R4, 8), CMP(R4, R0), BZ('0000_E9A2'), Rem("end-8")],
                    Rem("start-9"),
                    [MOVI(R4, 9), CMP(R4, R0), BZ('0001_E9A2'), Rem("end-9")],
                    Rem("start-13"),
                    [
                        MOVI(R4, 13),
                        CMP(R4, R0),
                        BZ('0002_E9A2'),
                        Rem("end-13"),
                    ],
                    Rem("start-27"),
                    [
                        MOVI(R4, 27),
                        CMP(R4, R0),
                        BZ('0003_E9A2'),
                        Rem("end-27"),
                    ],
                    Rem("start-4"),
                    [MOVI(R4, 4), CMP(R4, R0), BZ('0004_E9A2'), Rem("end-4")],
                    Rem("start-3"),
                    [MOVI(R4, 3), CMP(R4, R0), BZ('0005_E9A2'), Rem("end-3")],
                    J('table_end_E9A2'),
                    Rem("end of jump table"),
                    Label('0000_E9A2'),
                    [MOVI(R2, 8)],
                    J('table_end_E9A2'),
                    Label('0001_E9A2'),
                    [MOVI(R2, 7)],
                    J('table_end_E9A2'),
                    Label('0002_E9A2'),
                    [MOVI(R2, 2)],
                    J('table_end_E9A2'),
                    Label('0003_E9A2'),
                    [MOVI(R2, 3)],
                    J('table_end_E9A2'),
                    Label('0004_E9A2'),
                    [
                        Rem("^D reset"),
                        [MOVR(R3, 'warmboot_4922')],
                        [
                            Rem("Load address"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        MOVI(R3, 65535),
                        Label('again_35E5'),
                        SUBI(R3, R3, 1),
                        CMPI(R3, 0),
                        BZ('out_35E5'),
                        J('again_35E5'),
                        Label('out_35E5'),
                        MOVI(R3, 1),
                        [
                            Rem("Load image"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WarmBoot'),
                        ],
                    ],
                    J('table_end_E9A2'),
                    Label('0005_E9A2'),
                    [
                        Rem("^C Init processor"),
                        [MOVR(R3, 'reset_4922')],
                        [
                            Rem("Load address"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        J('init'),
                    ],
                    J('table_end_E9A2'),
                    Label('table_end_E9A2'),
                ],
                Label('exit_35E5'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Term'),
                Rem("['string', 'escape', 'temp', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [MOVR(R2, 'a_esc_4922')],
                [Rem("Load address"), ST(R2, R6, -8), JAL(R7, 'WriteString')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Action'),
                Rem(" Action switch from the console status"),
                Rem("['pad_address', 'status', 'temp', 'command', 'jumpval', '',
'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [
                    Rem("start of the jump table"),
                    Rem("start-Actions.RUN"),
                    [
                        MOVI(R4, 2),
                        CMP(R4, R1),
                        BZ('0000_48AD'),
                        Rem("end-Actions.RUN"),
                    ],
                    Rem("start-Actions.ESCAPE"),
                    [
                        MOVI(R4, 3),
                        CMP(R4, R1),
                        BZ('0001_48AD'),
                        Rem("end-Actions.ESCAPE"),
                    ],
                    Rem("start-Actions.BACKSPACE"),
                    [
                        MOVI(R4, 8),
                        CMP(R4, R1),
                        BZ('0002_48AD'),
                        Rem("end-Actions.BACKSPACE"),
                    ],
                    Rem("start-Actions.COMPLETE"),
                    [
                        MOVI(R4, 7),
                        CMP(R4, R1),
                        BZ('0003_48AD'),
                        Rem("end-Actions.COMPLETE"),
                    ],
                    J('table_end_48AD'),
                    Rem("end of jump table"),
                    Label('0000_48AD'),
                    [
                        Rem("Search for a matching command and run"),
                        Rem("Check for empty command"),
                        LD(R2, R0, 0),
                        CMPI(R2, 0),
                        BZ('cont_EA0E'),
                        [JAL(R7, 'CR')],
                        [
                            Rem("Load command"),
                            ST(R0, R6, -8),
                            JAL(R7, 'MetaCommand.Search'),
                            Rem("Return status"),
                            LD(R1, R6, -4),
                            Rem("Return current"),
                            LD(R3, R6, -3),
                        ],
                        CMPI(R1, 1),
                        BNE('skip_EA0E'),
                        Rem("Reset the pad"),
                        MOVI(R1, 0),
                        ST(R1, R0, 0),
                        Rem("Found a command run"),
                        [
                            Rem("Load command"),
                            ST(R3, R6, -8),
                            JAL(R7, 'MetaCommand.Run'),
                        ],
                        J('cont_EA0E'),
                        Label('skip_EA0E'),
                        [MOVR(R2, 'notfound_4922')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        Label('cont_EA0E'),
                        [
                            Rem("Load address"),
                            ST(R0, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        Rem("Reset the pad"),
                        MOVI(R1, 0),
                        ST(R1, R0, 0),
                        [JAL(R7, 'CR')],
                        [MOVR(R2, 'prompt_4922')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_48AD'),
                    Label('0001_48AD'),
                    [
                        Rem("write the escape sequence"),
                        [MOVR(R2, 'escape_4922')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_48AD'),
                    Label('0002_48AD'),
                    [
                        [MOVR(R2, 'backspace_4922')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_48AD'),
                    Label('0003_48AD'),
                    [
                        Rem("list all commands"),
                        [JAL(R7, 'MetaCommand.List')],
                        [MOVR(R2, 'prompt_4922')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        [
                            Rem("Load address"),
                            ST(R0, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_48AD'),
                    Label('table_end_48AD'),
                ],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Dump._dump'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [JAL(R7, 'CoreDump')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ClearLine._cl'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [MOVR(R0, 'br_4922')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ClearScreen._cls'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [MOVR(R0, 'clearscreen_4922')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                [MOVR(R0, 'home_4922')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('JumpToBootloader._bl'),
                Rem("['', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 0),
                JR(R0, 0),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Reset._reset'),
                Rem("['', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                J('init'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Demo._demo'),
                Rem(" turn this into a fancy demo"),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'demo_4922')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Out.outtest'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'hello_4922')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Warm._warmer'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 1),
                STXA(R0, 56),
                STXA(R0, 57),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Prog._prog'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 0),
                STXA(R0, 56),
                MOVI(R0, 1),
                STXA(R0, 57),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('_helptext'),
                Rem("['tmp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'helper_4922')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ON._ledon'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 1),
                STXA(R0, 32),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('OFF._ledoff'),
                Rem("['temp', '', '', '', '', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 0),
                STXA(R0, 32),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
    ],
    Label('data_objects_484A'),
    Rem("--- Data Objects ---"),
    [
        [
            Rem("String Construct"),
            Label('greetings_4922'),
            Rem("
            Boneless-CPU-v3
             "),
            32788,
            [
                3338,
                17007,
                28261,
                27749,
                29555,
                11587,
                20565,
                11638,
                13069,
                2592,
            ],
            Label('warmboot_4922'),
            Rem("Warmboot! "),
            32778,
            [22369, 29293, 25199, 28532, 8480],
            Label('reset_4922'),
            Rem("Reset!"),
            32774,
            [21093, 29541, 29729],
            Label('escape_4922'),
            Rem("<ESC> "),
            32774,
            [15429, 21315, 15904],
            Label('banner_4922'),
            Rem("b'\n\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x8
0\xe2\x94\x80\xe2'"),
            33524,
            [
                2786,
                38028,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                36874,
                58004,
                33506,
                38545,
                58006,
                37346,
                38545,
                58006,
                35042,
                38528,
                58006,
                34018,
                38545,
                58006,
                35042,
                38528,
                58006,
                35042,
                38545,
                58006,
                35042,
                38528,
                58006,
                35042,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                35042,
                38545,
                58006,
                37346,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                35042,
                38528,
                58006,
                32994,
                38545,
                58006,
                37346,
                38545,
                58006,
                37346,
                38545,
                58006,
                35042,
                38545,
                58006,
                35042,
                38545,
                58006,
                32994,
                38528,
                58006,
                35042,
                38545,
                58006,
                37346,
                38018,
                2786,
                38018,
                58006,
                37346,
                38545,
                58006,
                37346,
                38536,
                58006,
                32994,
                38532,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                37346,
                38536,
                58006,
                32994,
                38528,
                58006,
                37346,
                38536,
                58006,
                37346,
                38545,
                58006,
                37346,
                38536,
                58006,
                32994,
                38528,
                58006,
                37346,
                38528,
                58006,
                32994,
                38536,
                58006,
                37346,
                38528,
                58006,
                32994,
                38536,
                58006,
                37346,
                38545,
                58006,
                37346,
                38545,
                58006,
                37346,
                38528,
                58006,
                34018,
                38528,
                58006,
                37346,
                38545,
                58006,
                32994,
                38532,
                58006,
                37346,
                38545,
                58004,
                33290,
                58004,
                33506,
                38545,
                58006,
                37346,
                38545,
                58006,
                32994,
                38528,
                58006,
                37346,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38545,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                32994,
                38528,
                58006,
                32994,
                38545,
                58006,
                37346,
                38528,
                58006,
                37346,
                38545,
                58006,
                32994,
                38528,
                58006,
                37346,
                38545,
                58006,
                37346,
                38018,
                2786,
                38036,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                32994,
                38016,
                58004,
                38922,
            ],
            Label('prompt_4922'),
            Rem("ZIG_0>"),
            32774,
            [23113, 18271, 12350],
            Label('date_4922'),
            Rem("2020-09-09 20:06:33."),
            32796,
            [
                12848,
                12848,
                11568,
                14637,
                12345,
                8242,
                12346,
                12342,
                14899,
                13102,
                14643,
                13880,
                13364,
                3338,
            ],
            Label('backspace_4922'),
            Rem("<BS>"),
            32772,
            [15426, 21310],
            Label('a_esc_4922'),
            Rem("["),
            32770,
            [7003],
            Label('clearscreen_4922'),
            Rem("2J"),
            32770,
            [12874],
            Label('home_4922'),
            Rem("H "),
            32770,
            [18464],
            Label('br_4922'),
            Rem("999;999H"),
            32776,
            [14649, 14651, 14649, 14664],
            Label('notfound_4922'),
            Rem("Command not found : "),
            32788,
            [
                17263,
                28013,
                24942,
                25632,
                28271,
                29728,
                26223,
                30062,
                25632,
                14880,
            ],
            Label('demo_4922'),
            Rem("This is actually a r"),
            32824,
            [
                21608,
                26995,
                8297,
                29472,
                24931,
                29813,
                24940,
                27769,
                8289,
                8306,
                25953,
                27756,
                31008,
                26209,
                28259,
                31008,
                16718,
                21321,
                8292,
                25965,
                28460,
                8302,
                28448,
                29285,
                24940,
                27769,
                11822,
                11808,
            ],
            Label('hello_4922'),
            Rem("this is a test"),
            32782,
            [29800, 26995, 8297, 29472, 24864, 29797, 29556],
            Label('helper_4922'),
            Rem("
            <tab> List commands"),
            32896,
            [
                2620,
                29793,
                25150,
                8268,
                26995,
                29728,
                25455,
                28013,
                24942,
                25715,
                2654,
                17184,
                29285,
                29541,
                29706,
                24132,
                8311,
                24946,
                28002,
                28527,
                29728,
                26990,
                29807,
                8308,
                26725,
                8290,
                28527,
                29804,
                28513,
                25701,
                29194,
                24157,
                8293,
                30825,
                29728,
                29544,
                25964,
                27658,
                2674,
                25958,
                25970,
                8308,
                28448,
                26740,
                29808,
                29498,
                12079,
                26473,
                29800,
                30050,
                11875,
                28525,
                12154,
                26983,
                28265,
                26415,
                29552,
                28530,
                27439,
                2592,
                8224,
                8224,
                8224,
                8224,
            ],
        ],
        [
            Rem("Globals"),
            Label('led_DE0F'),
            Rem("0"),
            0,
            Label('cursor_DE0F'),
            Rem("0"),
            0,
        ],
        [
            Rem("Data Pad"),
            Label('CharPad_5762'),
            Rem("length"),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            Rem("total_length"),
            [32],
            Label('cursor_5762'),
            Rem("cursor"),
            [0],
        ],
    ],
    Label('extra_code_484A'),
    Rem("--- Extra Code ---"),
    [
        Label('first_command'),
        [
            Label('Dump_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c15964d0>,
            [Label('Dump'), Rem("dump"), 4, [100, 117, 109, 112]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Dump._dump')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('cl_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596440>,
            [Label('cl'), Rem("cl"), 2, [99, 108]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ClearLine._cl')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('cls_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596830>,
            [Label('cls'), Rem("cls"), 3, [99, 108, 115]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ClearScreen._cls')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('BL_0_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596680>,
            [Label('BL_0'), Rem("bl_0"), 4, [98, 108, 95, 48]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'JumpToBootloader._bl')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Reset_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c15968c0>,
            [Label('Reset'), Rem("reset"), 5, [114, 101, 115, 101, 116]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Reset._reset')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Demo_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596950>,
            [Label('Demo'), Rem("demo"), 4, [100, 101, 109, 111]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Demo._demo')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Out_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c15969e0>,
            [Label('Out'), Rem("out"), 3, [111, 117, 116]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Out.outtest')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Warm_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596a70>,
            [Label('Warm'), Rem("warm"), 4, [119, 97, 114, 109]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Warm._warmer')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Prog_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596c20>,
            [Label('Prog'), Rem("prog"), 4, [112, 114, 111, 103]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Prog._prog')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Help_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596b90>,
            [Label('Help'), Rem("help"), 4, [104, 101, 108, 112]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, '_helptext')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('?_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596b00>,
            [Label('?'), Rem("?"), 1, [63]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, '_helptext')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('ON_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596d40>,
            [Label('ON'), Rem("on"), 2, [111, 110]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ON._ledon')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('OFF_comm'),
            <function Command.ref.<locals>.relocate at 0x7fd1c1596dd0>,
            [Label('OFF'), Rem("off"), 3, [111, 102, 102]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'OFF._ledoff')],
            ADJW(8),
            JR(R7, 0),
        ],
        Label('last_command'),
    ],
    Label('heap_start_484A'),
    Label('end_of_data'),
]
