[02/01/21 11:12:28] CRITICAL Build Console                        console.py:140
                    CRITICAL build escape string                    action.py:85
                    INFO     Create BonelessSpork                 boneless.py:24
                    INFO     Create Async UART with 16/16 FIFO      serial.py:71
                    INFO     Create Timer Peripheral                 timer.py:47
                    INFO     Create Kermit CRC device           kermit_crc.py:20
                    INFO     Create Warmboot Peripheral           warmboot.py:14
                    CRITICAL BUILD                                 fwtest.py:109
                    INFO     Create Firmware Object               firmware.py:31
                    CRITICAL Build Console                        console.py:140
                    INFO     Working subroutines                     base.py:344
                    INFO               - WriteHex                    base.py:347
                    INFO               - Read                        base.py:347
                    INFO               - Write                       base.py:347
                    INFO               - CR                          base.py:347
                    INFO               - COLON                       base.py:347
                    INFO               - SP                          base.py:347
                    INFO               - WriteString                 base.py:347
                    INFO               - CoreDump                    base.py:347
                    INFO               - WarmBoot                    base.py:347
                    INFO               - MetaCommand.Run             base.py:347
                    INFO               - MetaCommand.Compare         base.py:347
                    INFO               - MetaCommand.Search          base.py:347
                    INFO               - MetaCommand.List            base.py:347
                    INFO               - CharPad.Accept              base.py:347
                    INFO               - Console                     base.py:347
                    INFO               - Term                        base.py:347
                    INFO               - EscCode                     base.py:347
                    INFO               - dumpEsc                     base.py:347
                    INFO               - Escaper                     base.py:347
                    INFO               - Action                      base.py:347
                    INFO               - Dump._dump                  base.py:347
                    INFO               - ClearLine._cl               base.py:347
                    INFO               - ClearScreen._cls            base.py:347
                    INFO               - JumpToBootloader._bl        base.py:347
                    INFO               - Reset._reset                base.py:347
                    INFO               - Demo._demo                  base.py:347
                    INFO               - Out.outtest                 base.py:347
                    INFO               - Warm._warmer                base.py:347
                    INFO               - Prog._prog                  base.py:347
                    INFO               - _helptext                   base.py:347
                    INFO               - show._show                  base.py:347
                    INFO               - ON._ledon                   base.py:347
                    INFO               - OFF._ledoff                 base.py:347
                    INFO     Data Objects                            base.py:162
                    INFO             <spork.lib.console.CharPad      base.py:164
                             object at 0x7f4315d67cd0>                          
                    INFO             <spork.lib.action.EscString     base.py:164
                             object at 0x7f4315d04610>                          
                    INFO             <spork.lib.stringer.Stringer    base.py:164
                             object at 0x7f4315d046d0>                          
                    INFO             <spork.lib.stringer.Stringer    base.py:164
                             object at 0x7f43152f0410>                          
                    INFO             <spork.lib.globals.Globals      base.py:164
                             object at 0x7f43152f0f90>                          
                    INFO             <spork.lib.console.CharPad      base.py:164
                             object at 0x7f43152f4a90>                          
                    INFO     Attach firmware                      boneless.py:54
                    INFO     Firmware is 1184/4096 (28.91% of     boneless.py:64
                             mem) words long                                    
serial.divisor 0
serial.rx.data 1
serial.rx.rdy 2
serial.rx.err 3
serial.tx.data 4
serial.tx.rdy 5
serial.ev.status 8
serial.ev.pending 9
serial.ev.enable 10
timer.reload_0 16
timer.reload_1 17
timer.en 18
timer.ctr_0 19
timer.ctr_1 20
timer.ev.status 24
timer.ev.pending 25
timer.ev.enable 26
statusled.led 32
statusled.en 33
crc.reset 40
crc.byte 41
crc.word 42
crc.crc 43
warm.image 48
warm.en 49
None
[
    Rem("--- Firmware Object ---"),
    Rem("['temp', 'pad_address', 'address', 'checksum', 'incoming_word', 
'status', 'fp', 'ret']"),
    Label('init'),
    MOVI(R6, 4088),
    STW(R6),
    [
        Rem("Set up the devices"),
        Rem("enable the led"),
        MOVI(R0, 1),
        STXA(R0, 33),
        Rem("load the timer"),
        MOVI(R0, 65535),
        STXA(R0, 16),
        MOVI(R0, 255),
        STXA(R0, 17),
        Rem("enable timer and events"),
        MOVI(R0, 1),
        STXA(R0, 18),
        STXA(R0, 26),
        Rem("reset the crc"),
        MOVI(R0, 1),
        STXA(R0, 40),
    ],
    Label('main'),
    [
        Rem("Write the prelude strings"),
        [MOVR(R0, 'date_000C')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [MOVR(R0, 'greetings_000C')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        [JAL(R7, 'CR')],
        Rem("Write the prompt"),
        [MOVR(R0, 'prompt_000C')],
        [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
        Rem("load the pad address into the register"),
        [MOVR(R1, 'CharPad_0010')],
        Label('loop_000F'),
        Rem("get the uart status"),
        [
            JAL(R7, 'Read'),
            Rem("Return value"),
            LD(R4, R6, -8),
            Rem("Return status"),
            LD(R5, R6, -7),
        ],
        Rem("if the status is zero skip"),
        CMPI(R5, 0),
        BZ('skip_000F'),
        Rem("process the keystroke"),
        [
            Rem("Load char"),
            ST(R4, R6, -8),
            Rem("Load pad_address"),
            ST(R1, R6, -7),
            Rem("Load status"),
            ST(R5, R6, -6),
            JAL(R7, 'Console'),
            Rem("Return status"),
            LD(R5, R6, -6),
        ],
        [
            Rem("Load pad_address"),
            ST(R1, R6, -8),
            Rem("Load status"),
            ST(R5, R6, -7),
            JAL(R7, 'Action'),
            Rem("Return status"),
            LD(R5, R6, -7),
        ],
        Label('skip_000F'),
        J('loop_000F'),
    ],
    J('main'),
    Label('library_code_000E'),
    Rem("--- Library Code ---"),
    [
        [
            [
                Label('WriteHex'),
                Rem(" Write a 16 bit reg as hex to the serial port"),
                Rem("['value', 'temp', 'nibble', 'char']"),
                Rem("['repeat', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R4, 4),
                AND(R1, R0, R0),
                Label('again_0039'),
                ROLI(R1, R1, 4),
                AND(R2, R1, R1),
                ANDI(R2, R2, 15),
                AND(R3, R2, R2),
                Rem("convert to char"),
                CMPI(R3, 10),
                BGEU('letter_0039'),
                ADDI(R3, R3, 48),
                J('write_0039'),
                Label('letter_0039'),
                ADDI(R3, R3, 55),
                Label('write_0039'),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'Write')],
                SUBI(R4, R4, 1),
                CMPI(R4, 0),
                BNE('again_0039'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Read'),
                Rem(" Status and Char return "),
                Rem("['value', 'status', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Read a char off the serial port"),
                MOVI(R1, 0),
                LDXA(R1, 2),
                CMPI(R1, 0),
                BEQ('skip_003A'),
                LDXA(R0, 1),
                MOVI(R1, 1),
                Label('skip_003A'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Write'),
                Rem(" Write a char to the uart"),
                Rem("['value', 'status', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Label('again_003B'),
                LDXA(R1, 5),
                CMPI(R1, 1),
                BEQ('cont_003B'),
                J('again_003B'),
                Label('cont_003B'),
                STXA(R0, 4),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CR'),
                Rem("['char', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 13),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                MOVI(R0, 10),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('COLON'),
                Rem("['char', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 58),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('SP'),
                Rem("['char', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 32),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('WriteString'),
                Rem(" Write a string to the uart
                        Strings are pascal style with the length as the first 
word
                    "),
                Rem("['address', 'length', 'counter', 'value']"),
                Rem("['char', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("empty string bail"),
                LD(R1, R0, 0),
                CMPI(R1, 0),
                BEQ('exit_003C'),
                ADDI(R0, R0, 1),
                MOVI(R2, 0),
                Rem("Check if it is a compact string"),
                Rem("sign bit is set?"),
                CMPI(R1, 0),
                BNS('lf_loop_003C'),
                Rem("Set high bit to zero"),
                ANDI(R1, R1, 32767),
                Rem("Compact Strings"),
                Rem("strings are byte encoded"),
                Label('cf_loop_003C'),
                LD(R3, R0, 0),
                Rem("first char"),
                SRLI(R4, R3, 8),
                [Rem("Load value"), ST(R4, R6, -8), JAL(R7, 'Write')],
                ADDI(R2, R2, 1),
                CMP(R1, R2),
                BEQ('exit_003C'),
                Rem("second char"),
                ANDI(R4, R3, 255),
                [Rem("Load value"), ST(R4, R6, -8), JAL(R7, 'Write')],
                ADDI(R2, R2, 1),
                ADDI(R0, R0, 1),
                CMP(R1, R2),
                BEQ('exit_003C'),
                J('cf_loop_003C'),
                Rem("Long form strings"),
                Label('lf_loop_003C'),
                LD(R3, R0, 0),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'Write')],
                ADDI(R0, R0, 1),
                ADDI(R2, R2, 1),
                CMP(R1, R2),
                BEQ('exit_003C'),
                J('lf_loop_003C'),
                Label('exit_003C'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CoreDump'),
                Rem(" just dump the core "),
                Rem("['counter', 'endpoint', 'char', 'value']"),
                Rem("['slice', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("DUMP the entire memory space"),
                MOVI(R0, 0),
                MOVR(R1, 'end_of_data'),
                Label('dumper_003D'),
                Rem("current address"),
                LD(R3, R0, 0),
                ANDI(R4, R0, 31),
                CMPI(R4, 0),
                BNE('cont_003D'),
                [JAL(R7, 'CR')],
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'WriteHex')],
                [JAL(R7, 'SP')],
                [JAL(R7, 'COLON')],
                [JAL(R7, 'SP')],
                Label('cont_003D'),
                [Rem("Load value"), ST(R3, R6, -8), JAL(R7, 'WriteHex')],
                [JAL(R7, 'SP')],
                ADDI(R0, R0, 1),
                CMP(R0, R1),
                BNE('dumper_003D'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('WarmBoot'),
                Rem(" Warmboot the device"),
                Rem("['image', 'temp', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                STXA(R0, 48),
                MOVI(R1, 1),
                STXA(R1, 49),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Run'),
                Rem(" given a pointer run the command"),
                Rem("['command', 'tmp', 'exe', 'status']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Get the execute pointer"),
                LD(R1, R0, 1),
                ADD(R2, R0, R1),
                JRAL(R7, R2),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Compare'),
                Rem("Compare string to command"),
                Rem("['command', 'current', 'com_len', 'temp2']"),
                Rem("['temp', 'status', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("find and run the command"),
                Rem("Current points to the top of the command"),
                Rem("Add 1 for string pointer"),
                ADDI(R1, R1, 1),
                Rem("Get the string lengths"),
                LD(R2, R0, 0),
                LD(R4, R1, 0),
                Rem("compare lengths"),
                CMP(R2, R4),
                BNE('fail_0040'),
                Rem("Lengths Match, search through chars"),
                Rem("reuse status as counter"),
                MOVI(R5, 1),
                Rem("Advance to the first char"),
                ADDI(R0, R0, 1),
                ADDI(R1, R1, 1),
                Label('scan_0040'),
                Rem("load the chars"),
                LD(R4, R0, 0),
                LD(R3, R1, 0),
                Rem("Check the chars"),
                CMP(R4, R3),
                BNE('fail_0040'),
                Rem("Are we at the end?"),
                CMP(R5, R2),
                BEQ('cont_0040'),
                Rem("Advance the counters"),
                ADDI(R0, R0, 1),
                ADDI(R1, R1, 1),
                ADDI(R5, R5, 1),
                Rem("Check next char"),
                J('scan_0040'),
                Label('cont_0040'),
                Rem("got to the end without failing"),
                MOVI(R5, 1),
                J('exit_0040'),
                Label('fail_0040'),
                Rem("No match"),
                MOVI(R5, 0),
                Label('exit_0040'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.Search'),
                Rem("search for a given command and return a pointer"),
                Rem("['command', 'end', 'incr', 'tmp']"),
                Rem("['status', 'current', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("load the pointer of the first command"),
                MOVR(R5, 'first_command'),
                Rem("Load the end of the commands"),
                MOVR(R1, 'last_command'),
                Rem("Load the string of the current command"),
                Label('again_0041'),
                Rem("compare the commands"),
                [
                    Rem("Load command"),
                    ST(R0, R6, -8),
                    Rem("Load current"),
                    ST(R5, R6, -7),
                    JAL(R7, 'MetaCommand.Compare'),
                    Rem("Return status"),
                    LD(R4, R6, -3),
                ],
                CMPI(R4, 1),
                BEQ('found_0041'),
                Rem("contains the length to the next command"),
                LD(R2, R5, 0),
                Rem("Jump to the next command"),
                ADD(R5, R5, R2),
                Rem("Are we at the end"),
                CMP(R5, R1),
                BNE('again_0041'),
                J('fail_0041'),
                Label('found_0041'),
                MOVI(R4, 1),
                J('exit_0041'),
                Label('fail_0041'),
                MOVI(R4, 0),
                Label('exit_0041'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('MetaCommand.List'),
                Rem(" List all the available commands"),
                Rem("['incr', 'start', 'end', 'current']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                Rem("load the pointer of the first command"),
                MOVR(R1, 'first_command'),
                Rem("Load the end of the commands"),
                MOVR(R2, 'last_command'),
                Rem("Load the string of the current command"),
                Label('again_0042'),
                Rem("Move to the start of the string"),
                ADDI(R3, R1, 1),
                Rem("Write the string"),
                [Rem("Load address"), ST(R3, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'SP')],
                Rem("Jump to the next command"),
                LD(R0, R1, 0),
                ADD(R1, R1, R0),
                Rem("Are we at the end"),
                CMP(R1, R2),
                BNE('again_0042'),
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('CharPad.Accept'),
                Rem("['pad_address', 'char', 'length', 'target_address']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Copy the length"),
                LD(R2, R0, 0),
                CMPI(R2, 32),
                BGTU('exit_0043'),
                Rem("Add the length to the address"),
                ADD(R3, R0, R2),
                ADDI(R3, R3, 1),
                ST(R1, R3, 0),
                Rem("Offset to the next char slot"),
                ADDI(R2, R2, 1),
                ST(R2, R0, 0),
                Label('exit_0043'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Console'),
                Rem("['char', 'pad_address', 'status', 'temp']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("printable char"),
                CMPI(R0, 31),
                BLEU('cont_0044'),
                CMPI(R0, 125),
                BGEU('cont_0044'),
                Rem("Within Printable Range, echo char"),
                [Rem("Load value"), ST(R0, R6, -8), JAL(R7, 'Write')],
                [
                    Rem("Load pad_address"),
                    ST(R1, R6, -8),
                    Rem("Load char"),
                    ST(R0, R6, -7),
                    JAL(R7, 'CharPad.Accept'),
                ],
                Label('cont_0044'),
                Rem("Jump table select"),
                [
                    Rem("start of the jump table"),
                    [
                        Rem("start-8"),
                        CMPI(R0, 8),
                        BZ('0000_0001'),
                        Rem("end-8"),
                    ],
                    [
                        Rem("start-9"),
                        CMPI(R0, 9),
                        BZ('0001_0001'),
                        Rem("end-9"),
                    ],
                    [
                        Rem("start-13"),
                        CMPI(R0, 13),
                        BZ('0002_0001'),
                        Rem("end-13"),
                    ],
                    [
                        Rem("start-27"),
                        CMPI(R0, 27),
                        BZ('0003_0001'),
                        Rem("end-27"),
                    ],
                    [
                        Rem("start-4"),
                        CMPI(R0, 4),
                        BZ('0004_0001'),
                        Rem("end-4"),
                    ],
                    [
                        Rem("start-3"),
                        CMPI(R0, 3),
                        BZ('0005_0001'),
                        Rem("end-3"),
                    ],
                    J('table_end_0001'),
                    Rem("end of jump table"),
                    Label('0000_0001'),
                    [MOVI(R2, 5)],
                    J('table_end_0001'),
                    Label('0001_0001'),
                    [MOVI(R2, 4)],
                    J('table_end_0001'),
                    Label('0002_0001'),
                    [MOVI(R2, 2)],
                    J('table_end_0001'),
                    Label('0003_0001'),
                    [MOVI(R2, 3)],
                    J('table_end_0001'),
                    Label('0004_0001'),
                    [
                        Rem("^D reset"),
                        [MOVR(R3, 'warmboot_000C')],
                        [
                            Rem("Load address"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        MOVI(R3, 65535),
                        Label('again_0044'),
                        SUBI(R3, R3, 1),
                        CMPI(R3, 0),
                        BZ('out_0044'),
                        J('again_0044'),
                        Label('out_0044'),
                        MOVI(R3, 1),
                        [
                            Rem("Load image"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WarmBoot'),
                        ],
                    ],
                    J('table_end_0001'),
                    Label('0005_0001'),
                    [
                        Rem("^C Init processor"),
                        [MOVR(R3, 'reset_000C')],
                        [
                            Rem("Load address"),
                            ST(R3, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        J('init'),
                    ],
                    J('table_end_0001'),
                    Label('table_end_0001'),
                ],
                Label('exit_0044'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Term'),
                Rem("['string', 'escape', 'temp', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [MOVR(R2, 'a_esc_000C')],
                [Rem("Load address"), ST(R2, R6, -8), JAL(R7, 'WriteString')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('EscCode'),
                Rem(" Write the escape code string"),
                Rem("['number', 'value', 'address', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                SUBI(R0, R0, 1),
                Rem("Grab the starting address of the table"),
                MOVR(R2, 'EscKeys'),
                Rem("Load the address"),
                ADD(R2, R2, R0),
                Rem("Get the value"),
                LD(R1, R2, 0),
                Rem("offsets are relative, add to offset"),
                ADD(R1, R1, R2),
                [JAL(R7, 'CR')],
                [Rem("Load address"), ST(R1, R6, -8), JAL(R7, 'WriteString')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('dumpEsc'),
                Rem(" Dump the enumerated string list"),
                Rem("['value', 'counter', 'address', 'limit']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R3, 24),
                MOVI(R1, 0),
                Label('again_0046'),
                Rem("Grab the starting address of the table"),
                MOVR(R2, 'EscKeys'),
                ADD(R2, R2, R1),
                LD(R0, R2, 0),
                ADD(R0, R0, R2),
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                ADDI(R1, R1, 1),
                CMP(R1, R3),
                BNE('again_0046'),
                Label('end_0046'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Escaper'),
                Rem(" Process the escape sequence"),
                Rem("['temp', 'command', 'char', 'counter']"),
                Rem("['status', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                Rem("Check if there are any more chars"),
                Rem("have to wait for the next char to arrive"),
                MOVI(R3, 511),
                Label('wait_0047'),
                SUBI(R3, R3, 1),
                CMPI(R3, 0),
                BNE('wait_0047'),
                Rem("Now we can check for the char"),
                [
                    JAL(R7, 'Read'),
                    Rem("Return value"),
                    LD(R2, R6, -8),
                    Rem("Return status"),
                    LD(R4, R6, -7),
                ],
                CMPI(R4, 0),
                BEQ('nomore_0047'),
                Rem("Consumes the ["),
                [
                    JAL(R7, 'Read'),
                    Rem("Return value"),
                    LD(R2, R6, -8),
                    Rem("Return status"),
                    LD(R4, R6, -7),
                ],
                CMPI(R4, 0),
                BEQ('nomore_0047'),
                Rem("directions"),
                Rem("check for double char entries"),
                [CMPI(R2, 49), BEQ('double1_0047')],
                [CMPI(R2, 50), BEQ('double2_0047')],
                Rem("Single char escape code"),
                Rem("select char and map to Enum"),
                [
                    Rem("start of the jump table"),
                    [
                        Rem("start-65"),
                        CMPI(R2, 65),
                        BZ('0000_0005'),
                        Rem("end-65"),
                    ],
                    [
                        Rem("start-66"),
                        CMPI(R2, 66),
                        BZ('0001_0005'),
                        Rem("end-66"),
                    ],
                    [
                        Rem("start-67"),
                        CMPI(R2, 67),
                        BZ('0002_0005'),
                        Rem("end-67"),
                    ],
                    [
                        Rem("start-68"),
                        CMPI(R2, 68),
                        BZ('0003_0005'),
                        Rem("end-68"),
                    ],
                    [
                        Rem("start-51"),
                        CMPI(R2, 51),
                        BZ('0004_0005'),
                        Rem("end-51"),
                    ],
                    [
                        Rem("start-52"),
                        CMPI(R2, 52),
                        BZ('0005_0005'),
                        Rem("end-52"),
                    ],
                    [
                        Rem("start-53"),
                        CMPI(R2, 53),
                        BZ('0006_0005'),
                        Rem("end-53"),
                    ],
                    [
                        Rem("start-54"),
                        CMPI(R2, 54),
                        BZ('0007_0005'),
                        Rem("end-54"),
                    ],
                    J('table_end_0005'),
                    Rem("end of jump table"),
                    Label('0000_0005'),
                    MOVI(R4, 3),
                    J('table_end_0005'),
                    Label('0001_0005'),
                    MOVI(R4, 4),
                    J('table_end_0005'),
                    Label('0002_0005'),
                    MOVI(R4, 6),
                    J('table_end_0005'),
                    Label('0003_0005'),
                    MOVI(R4, 5),
                    J('table_end_0005'),
                    Label('0004_0005'),
                    MOVI(R4, 8),
                    J('table_end_0005'),
                    Label('0005_0005'),
                    MOVI(R4, 10),
                    J('table_end_0005'),
                    Label('0006_0005'),
                    MOVI(R4, 11),
                    J('table_end_0005'),
                    Label('0007_0005'),
                    MOVI(R4, 12),
                    J('table_end_0005'),
                    Label('table_end_0005'),
                ],
                J('cont_0047'),
                Label('double1_0047'),
                Rem("Check for a third char"),
                [
                    JAL(R7, 'Read'),
                    Rem("Return value"),
                    LD(R2, R6, -8),
                    Rem("Return status"),
                    LD(R4, R6, -7),
                ],
                CMPI(R4, 0),
                BEQ('cont_0047'),
                [
                    Rem("start of the jump table"),
                    [
                        Rem("start-126"),
                        CMPI(R2, 126),
                        BZ('0000_0006'),
                        Rem("end-126"),
                    ],
                    [
                        Rem("start-49"),
                        CMPI(R2, 49),
                        BZ('0001_0006'),
                        Rem("end-49"),
                    ],
                    [
                        Rem("start-50"),
                        CMPI(R2, 50),
                        BZ('0002_0006'),
                        Rem("end-50"),
                    ],
                    [
                        Rem("start-51"),
                        CMPI(R2, 51),
                        BZ('0003_0006'),
                        Rem("end-51"),
                    ],
                    [
                        Rem("start-52"),
                        CMPI(R2, 52),
                        BZ('0004_0006'),
                        Rem("end-52"),
                    ],
                    [
                        Rem("start-53"),
                        CMPI(R2, 53),
                        BZ('0005_0006'),
                        Rem("end-53"),
                    ],
                    [
                        Rem("start-55"),
                        CMPI(R2, 55),
                        BZ('0006_0006'),
                        Rem("end-55"),
                    ],
                    [
                        Rem("start-56"),
                        CMPI(R2, 56),
                        BZ('0007_0006'),
                        Rem("end-56"),
                    ],
                    [
                        Rem("start-57"),
                        CMPI(R2, 57),
                        BZ('0008_0006'),
                        Rem("end-57"),
                    ],
                    J('table_end_0006'),
                    Rem("end of jump table"),
                    Label('0000_0006'),
                    MOVI(R4, 9),
                    J('table_end_0006'),
                    Label('0001_0006'),
                    MOVI(R4, 13),
                    J('table_end_0006'),
                    Label('0002_0006'),
                    MOVI(R4, 14),
                    J('table_end_0006'),
                    Label('0003_0006'),
                    MOVI(R4, 15),
                    J('table_end_0006'),
                    Label('0004_0006'),
                    MOVI(R4, 16),
                    J('table_end_0006'),
                    Label('0005_0006'),
                    MOVI(R4, 17),
                    J('table_end_0006'),
                    Label('0006_0006'),
                    MOVI(R4, 18),
                    J('table_end_0006'),
                    Label('0007_0006'),
                    MOVI(R4, 19),
                    J('table_end_0006'),
                    Label('0008_0006'),
                    MOVI(R4, 20),
                    J('table_end_0006'),
                    Label('table_end_0006'),
                ],
                J('cont_0047'),
                Label('double2_0047'),
                [
                    JAL(R7, 'Read'),
                    Rem("Return value"),
                    LD(R2, R6, -8),
                    Rem("Return status"),
                    LD(R4, R6, -7),
                ],
                CMPI(R4, 0),
                BEQ('cont_0047'),
                [
                    Rem("start of the jump table"),
                    [
                        Rem("start-126"),
                        CMPI(R2, 126),
                        BZ('0000_0007'),
                        Rem("end-126"),
                    ],
                    [
                        Rem("start-48"),
                        CMPI(R2, 48),
                        BZ('0001_0007'),
                        Rem("end-48"),
                    ],
                    [
                        Rem("start-49"),
                        CMPI(R2, 49),
                        BZ('0002_0007'),
                        Rem("end-49"),
                    ],
                    [
                        Rem("start-51"),
                        CMPI(R2, 51),
                        BZ('0003_0007'),
                        Rem("end-51"),
                    ],
                    [
                        Rem("start-52"),
                        CMPI(R2, 52),
                        BZ('0004_0007'),
                        Rem("end-52"),
                    ],
                    J('table_end_0007'),
                    Rem("end of jump table"),
                    Label('0000_0007'),
                    MOVI(R4, 2),
                    J('table_end_0007'),
                    Label('0001_0007'),
                    MOVI(R4, 21),
                    J('table_end_0007'),
                    Label('0002_0007'),
                    MOVI(R4, 22),
                    J('table_end_0007'),
                    Label('0003_0007'),
                    MOVI(R4, 23),
                    J('table_end_0007'),
                    Label('0004_0007'),
                    MOVI(R4, 24),
                    J('table_end_0007'),
                    Label('table_end_0007'),
                ],
                J('cont_0047'),
                Label('nomore_0047'),
                MOVI(R4, 1),
                Label('cont_0047'),
                Label('end_0047'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Action'),
                Rem(" Action switch from the console status"),
                Rem("['pad_address', 'status', 'temp', 'command']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [
                    Rem("start of the jump table"),
                    [
                        Rem("start-Actions.RUN"),
                        CMPI(R1, 2),
                        BZ('0000_0008'),
                        Rem("end-Actions.RUN"),
                    ],
                    [
                        Rem("start-Actions.ESCAPE"),
                        CMPI(R1, 3),
                        BZ('0001_0008'),
                        Rem("end-Actions.ESCAPE"),
                    ],
                    [
                        Rem("start-Actions.BACKSPACE"),
                        CMPI(R1, 5),
                        BZ('0002_0008'),
                        Rem("end-Actions.BACKSPACE"),
                    ],
                    [
                        Rem("start-Actions.COMPLETE"),
                        CMPI(R1, 4),
                        BZ('0003_0008'),
                        Rem("end-Actions.COMPLETE"),
                    ],
                    J('table_end_0008'),
                    Rem("end of jump table"),
                    Label('0000_0008'),
                    [
                        Rem("Search for a matching command and run"),
                        Rem("Check for empty command"),
                        LD(R2, R0, 0),
                        CMPI(R2, 0),
                        BZ('cont_0048'),
                        [JAL(R7, 'CR')],
                        [
                            Rem("Load command"),
                            ST(R0, R6, -8),
                            JAL(R7, 'MetaCommand.Search'),
                            Rem("Return status"),
                            LD(R1, R6, -4),
                            Rem("Return current"),
                            LD(R3, R6, -3),
                        ],
                        CMPI(R1, 1),
                        BNE('skip_0048'),
                        Rem("Reset the pad"),
                        MOVI(R1, 0),
                        ST(R1, R0, 0),
                        Rem("Found a command run"),
                        [
                            Rem("Load command"),
                            ST(R3, R6, -8),
                            JAL(R7, 'MetaCommand.Run'),
                        ],
                        J('cont_0048'),
                        Label('skip_0048'),
                        [MOVR(R2, 'notfound_000C')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        Label('cont_0048'),
                        [
                            Rem("Load address"),
                            ST(R0, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        Rem("Reset the pad"),
                        MOVI(R1, 0),
                        ST(R1, R0, 0),
                        [JAL(R7, 'CR')],
                        [MOVR(R2, 'prompt_000C')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_0008'),
                    Label('0001_0008'),
                    [
                        [
                            JAL(R7, 'Escaper'),
                            Rem("Return status"),
                            LD(R1, R6, -4),
                        ],
                        [
                            Rem("Load number"),
                            ST(R1, R6, -8),
                            JAL(R7, 'EscCode'),
                        ],
                    ],
                    J('table_end_0008'),
                    Label('0002_0008'),
                    [
                        [MOVR(R2, 'backspace_000C')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_0008'),
                    Label('0003_0008'),
                    [
                        Rem("list all commands"),
                        [JAL(R7, 'MetaCommand.List')],
                        [MOVR(R2, 'prompt_000C')],
                        [
                            Rem("Load address"),
                            ST(R2, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                        [
                            Rem("Load address"),
                            ST(R0, R6, -8),
                            JAL(R7, 'WriteString'),
                        ],
                    ],
                    J('table_end_0008'),
                    Label('table_end_0008'),
                ],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Dump._dump'),
                Rem("['tmp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [JAL(R7, 'CoreDump')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ClearLine._cl'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [MOVR(R0, 'br_000C')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ClearScreen._cls'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [MOVR(R0, 'clearscreen_000C')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                [MOVR(R0, 'home_000C')],
                [Rem("Load string"), ST(R0, R6, -8), JAL(R7, 'Term')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('JumpToBootloader._bl'),
                Rem("['', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 0),
                JR(R0, 0),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Reset._reset'),
                Rem("['', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                J('init'),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Demo._demo'),
                Rem(" turn this into a fancy demo"),
                Rem("['tmp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'demo_000C')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Out.outtest'),
                Rem("['tmp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'hello_000C')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Warm._warmer'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 1),
                STXA(R0, 48),
                STXA(R0, 49),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('Prog._prog'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 0),
                STXA(R0, 48),
                MOVI(R0, 1),
                STXA(R0, 49),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('_helptext'),
                Rem("['tmp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'CR')],
                [MOVR(R0, 'helper_000C')],
                [Rem("Load address"), ST(R0, R6, -8), JAL(R7, 'WriteString')],
                [JAL(R7, 'CR')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('show._show'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                [JAL(R7, 'dumpEsc')],
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('ON._ledon'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 1),
                STXA(R0, 32),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
        [
            [
                Label('OFF._ledoff'),
                Rem("['temp', '', '', '']"),
                Rem("['', '', 'fp', 'ret']"),
                ADJW(-8),
                LDW(R6, 0),
                Rem("--- ENTER ---"),
                MOVI(R0, 0),
                STXA(R0, 32),
                Rem("--- EXIT  ---"),
                ADJW(8),
                JR(R7, 0),
            ],
        ],
    ],
    Label('data_objects_000E'),
    Rem("--- Data Objects ---"),
    [
        [
            Label('EscKeys'),
            Rem("EscKeys"),
            Rem("_0004"),
            Rem("1_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315360710>,
            Rem("2_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152ee8c0>,
            Rem("3_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eeb90>,
            Rem("4_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eea70>,
            Rem("5_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152ee9e0>,
            Rem("6_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152ee950>,
            Rem("7_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eeb00>,
            Rem("8_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eec20>,
            Rem("9_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eecb0>,
            Rem("10_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eed40>,
            Rem("11_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eedd0>,
            Rem("12_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eee60>,
            Rem("13_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43152eeef0>,
            Rem("14_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43153279e0>,
            Rem("15_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327a70>,
            Rem("16_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327b00>,
            Rem("17_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327b90>,
            Rem("18_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327c20>,
            Rem("19_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327ef0>,
            Rem("20_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327dd0>,
            Rem("21_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327e60>,
            Rem("22_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315327f80>,
            Rem("23_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f4315306050>,
            Rem("24_0004"),
            <function EscString.ref.<locals>.relocate at 0x7f43153060e0>,
        ],
        [
            Rem("String Construct"),
            Label('1_0004'),
            Rem("ESC "),
            32772,
            [17747, 17184],
            Label('2_0004'),
            Rem("INS "),
            32772,
            [18766, 21280],
            Label('3_0004'),
            Rem("UP"),
            32770,
            [21840],
            Label('4_0004'),
            Rem("DOWN"),
            32772,
            [17487, 22350],
            Label('5_0004'),
            Rem("LEFT"),
            32772,
            [19525, 18004],
            Label('6_0004'),
            Rem("RIGHT "),
            32774,
            [21065, 18248, 21536],
            Label('7_0004'),
            Rem("BS"),
            32770,
            [16979],
            Label('8_0004'),
            Rem("DEL "),
            32772,
            [17477, 19488],
            Label('9_0004'),
            Rem("HOME"),
            32772,
            [18511, 19781],
            Label('10_0004'),
            Rem("END "),
            32772,
            [17742, 17440],
            Label('11_0004'),
            Rem("PGUP"),
            32772,
            [20551, 21840],
            Label('12_0004'),
            Rem("PGDOWN"),
            32774,
            [20551, 17487, 22350],
            Label('13_0004'),
            Rem("F1"),
            32770,
            [17969],
            Label('14_0004'),
            Rem("F2"),
            32770,
            [17970],
            Label('15_0004'),
            Rem("F3"),
            32770,
            [17971],
            Label('16_0004'),
            Rem("F4"),
            32770,
            [17972],
            Label('17_0004'),
            Rem("F5"),
            32770,
            [17973],
            Label('18_0004'),
            Rem("F6"),
            32770,
            [17974],
            Label('19_0004'),
            Rem("F7"),
            32770,
            [17975],
            Label('20_0004'),
            Rem("F8"),
            32770,
            [17976],
            Label('21_0004'),
            Rem("F9"),
            32770,
            [17977],
            Label('22_0004'),
            Rem("F10 "),
            32772,
            [17969, 12320],
            Label('23_0004'),
            Rem("F11 "),
            32772,
            [17969, 12576],
            Label('24_0004'),
            Rem("F12 "),
            32772,
            [17969, 12832],
        ],
        [
            Rem("String Construct"),
            Label('greetings_000C'),
            Rem("
            Boneless-CPU-v3
             "),
            32788,
            [
                3338,
                17007,
                28261,
                27749,
                29555,
                11587,
                20565,
                11638,
                13069,
                2592,
            ],
            Label('warmboot_000C'),
            Rem("Warmboot! "),
            32778,
            [22369, 29293, 25199, 28532, 8480],
            Label('reset_000C'),
            Rem("Reset!"),
            32774,
            [21093, 29541, 29729],
            Label('prompt_000C'),
            Rem("ZIG_0>"),
            32774,
            [23113, 18271, 12350],
            Label('date_000C'),
            Rem("2021-02-01 11:12:28."),
            32796,
            [
                12848,
                12849,
                11568,
                12845,
                12337,
                8241,
                12602,
                12594,
                14898,
                14382,
                12597,
                12599,
                13878,
                3338,
            ],
            Label('backspace_000C'),
            Rem("<BS>"),
            32772,
            [15426, 21310],
            Label('a_esc_000C'),
            Rem("["),
            32770,
            [7003],
            Label('clearscreen_000C'),
            Rem("2J"),
            32770,
            [12874],
            Label('home_000C'),
            Rem("H "),
            32770,
            [18464],
            Label('br_000C'),
            Rem("999;999H"),
            32776,
            [14649, 14651, 14649, 14664],
            Label('notfound_000C'),
            Rem("Command not found : "),
            32788,
            [
                17263,
                28013,
                24942,
                25632,
                28271,
                29728,
                26223,
                30062,
                25632,
                14880,
            ],
            Label('demo_000C'),
            Rem("This is actually a r"),
            32824,
            [
                21608,
                26995,
                8297,
                29472,
                24931,
                29813,
                24940,
                27769,
                8289,
                8306,
                25953,
                27756,
                31008,
                26209,
                28259,
                31008,
                16718,
                21321,
                8292,
                25965,
                28460,
                8302,
                28448,
                29285,
                24940,
                27769,
                11822,
                11808,
            ],
            Label('hello_000C'),
            Rem("this is a test"),
            32782,
            [29800, 26995, 8297, 29472, 24864, 29797, 29556],
            Label('helper_000C'),
            Rem("
            <tab> List commands"),
            32896,
            [
                2620,
                29793,
                25150,
                8268,
                26995,
                29728,
                25455,
                28013,
                24942,
                25715,
                2654,
                17184,
                29285,
                29541,
                29706,
                24132,
                8311,
                24946,
                28002,
                28527,
                29728,
                26990,
                29807,
                8308,
                26725,
                8290,
                28527,
                29804,
                28513,
                25701,
                29194,
                24157,
                8293,
                30825,
                29728,
                29544,
                25964,
                27658,
                2674,
                25958,
                25970,
                8308,
                28448,
                26740,
                29808,
                29498,
                12079,
                26473,
                29800,
                30050,
                11875,
                28525,
                12154,
                26983,
                28265,
                26415,
                29552,
                28530,
                27439,
                2592,
                8224,
                8224,
                8224,
                8224,
            ],
        ],
        [
            Rem("Globals"),
            Label('led_000D'),
            Rem("0"),
            0,
            Label('cursor_000D'),
            Rem("0"),
            0,
            Label('heap_000D'),
            Rem("0"),
            0,
        ],
        [
            Rem("Data Pad"),
            Label('CharPad_0010'),
            Rem("length"),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            Rem("total_length"),
            [32],
            Label('cursor_0010'),
            Rem("cursor"),
            [0],
        ],
    ],
    Label('extra_code_000E'),
    Rem("--- Extra Code ---"),
    [
        Label('first_command'),
        [
            Label('Dump_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306320>,
            [Label('Dump'), Rem("dump"), 4, [100, 117, 109, 112]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Dump._dump')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('cl_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306200>,
            [Label('cl'), Rem("cl"), 2, [99, 108]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ClearLine._cl')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('cls_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306290>,
            [Label('cls'), Rem("cls"), 3, [99, 108, 115]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ClearScreen._cls')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('BL_0_comm'),
            <function Command.ref.<locals>.relocate at 0x7f43153063b0>,
            [Label('BL_0'), Rem("bl_0"), 4, [98, 108, 95, 48]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'JumpToBootloader._bl')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Reset_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306560>,
            [Label('Reset'), Rem("reset"), 5, [114, 101, 115, 101, 116]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Reset._reset')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Demo_comm'),
            <function Command.ref.<locals>.relocate at 0x7f43153064d0>,
            [Label('Demo'), Rem("demo"), 4, [100, 101, 109, 111]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Demo._demo')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Out_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306680>,
            [Label('Out'), Rem("out"), 3, [111, 117, 116]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Out.outtest')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Warm_comm'),
            <function Command.ref.<locals>.relocate at 0x7f43153065f0>,
            [Label('Warm'), Rem("warm"), 4, [119, 97, 114, 109]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Warm._warmer')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Prog_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306440>,
            [Label('Prog'), Rem("prog"), 4, [112, 114, 111, 103]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'Prog._prog')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('Help_comm'),
            <function Command.ref.<locals>.relocate at 0x7f43153067a0>,
            [Label('Help'), Rem("help"), 4, [104, 101, 108, 112]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, '_helptext')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('?_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306830>,
            [Label('?'), Rem("?"), 1, [63]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, '_helptext')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('show_comm'),
            <function Command.ref.<locals>.relocate at 0x7f43153068c0>,
            [Label('show'), Rem("show"), 4, [115, 104, 111, 119]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'show._show')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('ON_comm'),
            <function Command.ref.<locals>.relocate at 0x7f4315306950>,
            [Label('ON'), Rem("on"), 2, [111, 110]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'ON._ledon')],
            ADJW(8),
            JR(R7, 0),
        ],
        [
            Label('OFF_comm'),
            <function Command.ref.<locals>.relocate at 0x7f43153069e0>,
            [Label('OFF'), Rem("off"), 3, [111, 102, 102]],
            ADJW(-8),
            LDW(R6, 0),
            [JAL(R7, 'OFF._ledoff')],
            ADJW(8),
            JR(R7, 0),
        ],
        Label('last_command'),
    ],
    Label('heap_start_000E'),
    Label('end_of_data'),
]
04A0C1FF86F8A0068001782180FF7810C01F80FF781180017812781A80017828C067883D50D8AF60
C064882050D8AF5CAF43C066883050D8AF57C07889C1AF2944D845D908B8B80B54D851D955DAC01C
AFE645DA51D855D9C03DAFEF45D9BFEFBFDFA058A66084040100292C0221C0010A470342C001087A
BA03C0061B60BF02C0061B6753D8AF0F1C910898B0EEA048A780A058A660810069020838B8026801
8101A048A780A058A66069050839B801BFFC7804A048A780A058A660800D50D8AFF2800A50D8AFEF
A048A780A058A660803A50D8AFE8A048A780A058A660802050D8AFE1A048A780A058A66041000838
B81C180182000838B110092643002C7054D8AFD11A41003AB8100C6454D8AFCB1A411801003AB809
BFF1430053D8AFC318011A41003AB801BFF8A048A780A058A6608000C08089054300C0030C070898
B006AFBA50D8AF8DAFC8AFC0AFC653D8AF88AFC318010019B0EFA048A780A058A660783081017931
A048A780A058A66041011201A7A2A048A780A058A660192142004420005CB00F8501180119214400
4320009BB00800BAB804180119211DA1BFF68501BF018500A048A780A058A660C0658D28C07889C5
50D855D9AFDE44DD0899B80542A015A200B9B0F6BF028401BF018400A048A780A058A660DFEDAF6C
C0628910C0758AAD1B2153D8DFEFAF7CDFEEAF7340201120003AB0F6DFEBAF5CA048A780A058A660
4200C0040858B40513021B6151601A415200A048A780A058A660C003081FBC09C00F081DBA0650D8
DFE7AF3951D850D9AFE5C0010818B810C0010819B80FC001081DB80EC003081BB80DC000081CB80C
C000081BB818BF1F8205BF1D8204BF1B8202BF198203BF17C0408B0753D8DFE6AF3783FF1B710878
B801BFFC830153D8DFEDAF69BF08C03F8BFE53D8DFE5AF28DFD6BFB3BF00A048A780A058A660C041
8A0C52D8DFE3AF1C50D8DFE3AF19A048A780A058A6601811C02F8A7D124041401122DFDEAFF551D8
DFE1AF0AA048A780A058A66083188100C02D8A6D12414040100250D8DFDFAFFCDFDCAFE21921003B
B0F3A048A780A058A660C03F83FF1B710878B0FDDFD8AFC142D844D90898C011B88DDFD7AFBA42D8
44D90898C010B886C0060859B82DC006085AB85FC0080859B816C008085AB815C008085BB814C008
085CB813C006085BB812C006085CB811C006085DB810C006085EB80FBF108403BF0E8404BF0C8406
BF0A8405BF088408BF06840ABF04840BBF02840CBF00BF57DFD0AF8342D844D90898B851C00F085E
B819C0060859B818C006085AB817C006085BB816C006085CB815C006085DB814C006085FB813C007
0858B812C0070859B811BF128409BF10840DBF0E840EBF0C840FBF0A8410BF088411BF068412BF04
8413BF028414BF00BF22DFC9AF4E42D844D90898B81CC00F085EB80DC0060858B80CC0060859B80B
C006085BB80AC006085CB809BF0A8402BF088415BF068416BF048417BF028418BF00BF018401A048
A780A058A660C000083AB80AC000083BB82BC000083DB82FC000083CB832BF3C42000858B814DFC5
AF2B50D8DFD4AFA241DC43DD0839B0068100510053D8DFCFAF79BF05C0258A2C52D8DFC6AF3150D8
DFC5AF2E81005100DFC2AF12C01F8AFF52D8DFC4AF25BF18DFE5AF2D41DC51D8DFE0AF07BF11C020
8A0552D8DFC3AF18BF0BDFD1AF8DC01D8AEA52D8DFC2AF1050D8DFC1AF0DBF00A048A780A058A660
DFBDAFEEDFC4AF27DFBDAFEAA048A780A058A660C01D88EF50D8DFDAAFD6A048A780A058A660C01C
88E250D8DFD9AFCDC01B88DF50D8DFD9AFC8A048A780A058A6608000A080A048A780A058A660DFAD
BF6CA048A780A058A660DFB8AFC1C01B88DA50D8DFBAAFD4DFB7AFBAA048A780A058A660DFB6AFB4
C01D88EA50D8DFB8AFC7DFB5AFADA048A780A058A660800178307831A048A780A058A66080007830
80017831A048A780A058A660DFB3AF98C01A88D650D8DFB5AFABDFB2AF91A048A780A058A660DFD3
AF9BA048A780A058A66080017820A048A780A058A66080007820A048A7800018001A001C001D001F
00210024002500270029002B002D0030003100320033003400350036003700380039003B003D8004
455343208004494E5320800255508004444F574E80044C4546548006524947485420800242538004
44454C208004484F4D458004454E442080045047555080065047444F574E80024631800246328002
46338002463480024635800246368002463780024638800246398004463130208004463131208004
4631322080140D0A426F6E656C6573732D4350552D76330D0A20800A5761726D626F6F7421208006
52657365742180065A49475F303E801C323032312D30322D30312031313A31323A32382E31353137
36360D0A80043C42533E80021B5B8002324A8002482080083939393B393939488014436F6D6D616E
64206E6F7420666F756E64203A208038546869732069732061637475616C6C792061207265616C6C
792066616E637920414E53492064656D6F2C206E6F207265616C6C792E2E2E20800E746869732069
732061207465737480800A3C7461623E204C69737420636F6D6D616E64730A5E432072657365740A
5E44207761726D626F6F7420696E746F2074686520626F6F746C6F616465720A5E5D206578697420
7368656C6C0A0A726566657220746F2068747470733A2F2F6769746875622E636F6D2F7A69676E69
672F73706F726B2F0A20202020202020202000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000200000000C000400640075006D0070A058A660DFCBAF5EA048A780000A0002
0063006CA058A660DFCBAF5EA048A780000B00030063006C0073A058A660DFCBAF5CA048A780000C
00040062006C005F0030A058A660DFCBAF5EA048A780000D000500720065007300650074A058A660
DFCAAF57A048A780000C000400640065006D006FA058A660DFCAAF51A048A780000B0003006F0075
0074A058A660DFCAAF53A048A780000C0004007700610072006DA058A660DFCAAF54A048A780000C
000400700072006F0067A058A660DFC9AF4FA048A780000C000400680065006C0070A058A660DFC9
AF4BA048A78000090001003FA058A660DFC8AF42A048A780000C000400730068006F0077A058A660
DFC8AF43A048A780000A0002006F006EA058A660DFC7AF3FA048A780000B0003006F00660066A058
A660DFC7AF3AA048A780FFFF
