/* Generated by Yosys 0.9+3683 (git sha1 5b35d953f, clang 6.0.0-1ubuntu2 -fPIC -Os) */

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.phy.rx.U$$0" *)
(* generator = "nMigen" *)
module \U$$0 (clk, rx_pin, rst);
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:98" *)
  output rx_pin;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/cdc.py:90" *)
  reg stage0 = 1'h1;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/cdc.py:90" *)
  wire \stage0$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/cdc.py:90" *)
  reg stage1 = 1'h1;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/cdc.py:90" *)
  wire \stage1$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/build/res.py:143" *)
  wire uart_0__rx__i;
  always @(posedge clk)
    stage1 <= stage0;
  always @(posedge clk)
    stage0 <= 1'h0;
  assign uart_0__rx__i = 1'h0;
  assign rx_pin = stage1;
  assign \stage1$next  = stage0;
  assign \stage0$next  = 1'h0;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.bridge._int_src" *)
(* generator = "nMigen" *)
module _int_src(clk, _rx_rdy_ev_stb, _rx_err_ev_stb, _tx_mty_ev_stb, serial_ev_status__r_data, serial_ev_pending__w_data, serial_ev_pending__w_stb, serial_ev_pending__r_data, serial_ev_enable__w_data, serial_ev_enable__w_stb, serial_ev_enable__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:124" *)
  wire [2:0] \$1 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *)
  wire \$11 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:150" *)
  wire \$13 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:150" *)
  wire [2:0] \$14 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:124" *)
  wire [2:0] \$3 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *)
  wire \$5 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *)
  wire \$7 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *)
  wire \$9 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  input _rx_err_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:134" *)
  reg _rx_err_ev_stb_r = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:134" *)
  reg \_rx_err_ev_stb_r$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:137" *)
  wire _rx_err_ev_trigger;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  input _rx_rdy_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:137" *)
  wire _rx_rdy_ev_trigger;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  input _tx_mty_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:134" *)
  reg _tx_mty_ev_stb_r = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:134" *)
  reg \_tx_mty_ev_stb_r$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:137" *)
  wire _tx_mty_ev_trigger;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  output [2:0] serial_ev_enable__r_data;
  reg [2:0] serial_ev_enable__r_data = 3'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  reg [2:0] \serial_ev_enable__r_data$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  input [2:0] serial_ev_enable__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  input serial_ev_enable__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:117" *)
  wire serial_ev_irq;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  output [2:0] serial_ev_pending__r_data;
  reg [2:0] serial_ev_pending__r_data = 3'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  reg [2:0] \serial_ev_pending__r_data$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  input [2:0] serial_ev_pending__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  input serial_ev_pending__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:113" *)
  output [2:0] serial_ev_status__r_data;
  reg [2:0] serial_ev_status__r_data = 3'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:113" *)
  reg [2:0] \serial_ev_status__r_data$next ;
  assign \$9  = ~ (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *) _tx_mty_ev_stb_r;
  assign \$11  = \$9  & (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *) _tx_mty_ev_stb;
  assign \$14  = serial_ev_pending__r_data & (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:150" *) serial_ev_enable__r_data;
  assign \$13  = | (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:150" *) \$14 ;
  assign \$1  = ~ (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:124" *) serial_ev_pending__w_data;
  assign \$3  = serial_ev_pending__r_data & (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:124" *) \$1 ;
  assign \$5  = ~ (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *) _rx_err_ev_stb_r;
  assign \$7  = \$5  & (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:141" *) _rx_err_ev_stb;
  always @(posedge clk)
    _tx_mty_ev_stb_r <= \_tx_mty_ev_stb_r$next ;
  always @(posedge clk)
    _rx_err_ev_stb_r <= \_rx_err_ev_stb_r$next ;
  always @(posedge clk)
    serial_ev_status__r_data <= \serial_ev_status__r_data$next ;
  always @(posedge clk)
    serial_ev_enable__r_data <= \serial_ev_enable__r_data$next ;
  always @(posedge clk)
    serial_ev_pending__r_data <= \serial_ev_pending__r_data$next ;
  always @* begin
    if (\initial ) begin end
    \serial_ev_pending__r_data$next  = serial_ev_pending__r_data;
    (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:122" *)
    casez (serial_ev_pending__w_stb)
      /* src = "/opt/FPGA/spork/spork/cores/periph/event.py:122" */
      1'h1:
          \serial_ev_pending__r_data$next  = \$3 ;
    endcase
    (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:147" *)
    casez (_rx_rdy_ev_trigger)
      /* src = "/opt/FPGA/spork/spork/cores/periph/event.py:147" */
      1'h1:
          \serial_ev_pending__r_data$next [0] = 1'h1;
    endcase
    (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:147" *)
    casez (_rx_err_ev_trigger)
      /* src = "/opt/FPGA/spork/spork/cores/periph/event.py:147" */
      1'h1:
          \serial_ev_pending__r_data$next [1] = 1'h1;
    endcase
    (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:147" *)
    casez (_tx_mty_ev_trigger)
      /* src = "/opt/FPGA/spork/spork/cores/periph/event.py:147" */
      1'h1:
          \serial_ev_pending__r_data$next [2] = 1'h1;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_pending__r_data$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_enable__r_data$next  = serial_ev_enable__r_data;
    (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:127" *)
    casez (serial_ev_enable__w_stb)
      /* src = "/opt/FPGA/spork/spork/cores/periph/event.py:127" */
      1'h1:
          \serial_ev_enable__r_data$next  = serial_ev_enable__w_data;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_enable__r_data$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_status__r_data$next [0] = _rx_rdy_ev_stb;
    \serial_ev_status__r_data$next [1] = _rx_err_ev_stb;
    \serial_ev_status__r_data$next [2] = _tx_mty_ev_stb;
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_status__r_data$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \_rx_err_ev_stb_r$next  = _rx_err_ev_stb;
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \_rx_err_ev_stb_r$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \_tx_mty_ev_stb_r$next  = _tx_mty_ev_stb;
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \_tx_mty_ev_stb_r$next  = 1'h0;
    endcase
  end
  assign serial_ev_irq = \$13 ;
  assign _tx_mty_ev_trigger = \$11 ;
  assign _rx_err_ev_trigger = \$7 ;
  assign _rx_rdy_ev_trigger = _rx_rdy_ev_stb;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.alsru" *)
(* generator = "nMigen" *)
module alsru(c_dir, i_a, i_b, o_o, i_c, i_h, r_o, o_z, o_s, o_c, o_v, rst, clk, c_op);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:134" *)
  wire [15:0] \$1 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:154" *)
  wire [16:0] \$10 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:154" *)
  wire [17:0] \$12 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:169" *)
  wire \$14 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:136" *)
  wire [15:0] \$3 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:138" *)
  wire [15:0] \$5 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:151" *)
  wire [15:0] \$7 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:154" *)
  wire [17:0] \$9 ;
  (* enum_base_type = "Dir" *)
  (* enum_value_0 = "L" *)
  (* enum_value_1 = "R" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:48" *)
  input c_dir;
  (* enum_base_type = "Op" *)
  (* enum_value_00000 = "A" *)
  (* enum_value_00001 = "AaB" *)
  (* enum_value_00010 = "AoB" *)
  (* enum_value_00011 = "AxB" *)
  (* enum_value_01000 = "ApB" *)
  (* enum_value_01100 = "AmB" *)
  (* enum_value_10100 = "SLR" *)
  (* enum_value_11000 = "B" *)
  (* enum_value_11100 = "nB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:43" *)
  input [4:0] c_op;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* enum_base_type = "OMux" *)
  (* enum_value_0 = "XpY" *)
  (* enum_value_1 = "Y" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:120" *)
  wire dec_op__o;
  (* enum_base_type = "XMux" *)
  (* enum_value_00 = "A" *)
  (* enum_value_01 = "AaB" *)
  (* enum_value_10 = "AoB" *)
  (* enum_value_11 = "AxB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:120" *)
  wire [1:0] dec_op__x;
  (* enum_base_type = "YMux" *)
  (* enum_value_00 = "Z" *)
  (* enum_value_01 = "S" *)
  (* enum_value_10 = "B" *)
  (* enum_value_11 = "nB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:120" *)
  wire [1:0] dec_op__y;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:32" *)
  input [15:0] i_a;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:33" *)
  input [15:0] i_b;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:34" *)
  input i_c;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:45" *)
  input i_h;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:40" *)
  output o_c;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:46" *)
  reg o_h;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:35" *)
  output [15:0] o_o;
  reg [15:0] o_o;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:39" *)
  output o_s;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:41" *)
  output o_v;
  reg o_v;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:38" *)
  output o_z;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:36" *)
  output [15:0] r_o;
  reg [15:0] r_o = 16'h0000;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:36" *)
  reg [15:0] \r_o$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:153" *)
  wire [15:0] s_p;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:122" *)
  reg [15:0] s_s;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:131" *)
  reg [15:0] s_x;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:142" *)
  reg [15:0] s_y;
  assign \$10  = s_x + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:154" *) s_y;
  assign \$12  = \$10  + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:154" *) i_c;
  assign \$14  = o_o == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:169" *) 1'h0;
  assign \$1  = i_a & (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:134" *) i_b;
  assign \$3  = i_a | (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:136" *) i_b;
  assign \$5  = i_a ^ (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:138" *) i_b;
  assign \$7  = ~ (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:151" *) i_b;
  always @(posedge clk)
    r_o <= \r_o$next ;
  always @* begin
    if (\initial ) begin end
    o_v = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:163" *)
    casez ({ o_o[15], s_y[15], s_x[15] })
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:164" */
      3'h4:
          o_v = 1'h1;
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:166" */
      3'h3:
          o_v = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_o$next  = o_o;
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_o$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:123" *)
    casez (c_dir)
      /* \nmigen.decoding  = "L/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:124" */
      1'h0:
          s_s = { r_o[14:0], i_h };
      /* \nmigen.decoding  = "R/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:127" */
      1'h1:
          s_s = { i_h, r_o[15:1] };
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:123" *)
    casez (c_dir)
      /* \nmigen.decoding  = "L/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:124" */
      1'h0:
          o_h = r_o[15];
      /* \nmigen.decoding  = "R/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:127" */
      1'h1:
          o_h = r_o[0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:132" *)
    casez (dec_op__x)
      /* \nmigen.decoding  = "AaB/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:133" */
      2'h1:
          s_x = \$1 ;
      /* \nmigen.decoding  = "AoB/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:135" */
      2'h2:
          s_x = \$3 ;
      /* \nmigen.decoding  = "AxB/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:137" */
      2'h3:
          s_x = \$5 ;
      /* \nmigen.decoding  = "A/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:139" */
      2'h0:
          s_x = i_a;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:143" *)
    casez (dec_op__y)
      /* \nmigen.decoding  = "Z/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:144" */
      2'h0:
          s_y = 16'h0000;
      /* \nmigen.decoding  = "S/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:146" */
      2'h1:
          s_y = s_s;
      /* \nmigen.decoding  = "B/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:148" */
      2'h2:
          s_y = i_b;
      /* \nmigen.decoding  = "nB/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:150" */
      2'h3:
          s_y = \$7 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:156" *)
    casez (dec_op__o)
      /* \nmigen.decoding  = "XpY/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:157" */
      1'h0:
          o_o = s_p;
      /* \nmigen.decoding  = "Y/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:159" */
      1'h1:
          o_o = s_y;
    endcase
  end
  assign \$9  = \$12 ;
  assign o_s = o_o[15];
  assign o_z = \$14 ;
  assign { o_c, s_p } = \$12 [16:0];
  assign { dec_op__o, dec_op__y, dec_op__x } = c_op;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.arb" *)
(* generator = "nMigen" *)
module arb(o_ext_re, o_ext_we, o_ext_data, i_ext_data, i_mem_data, o_mem_re, o_mem_data, o_mem_we, i_pc, i_w, i_ra, i_rb, i_rsd, i_ptr, i_data, o_data, c_pc, c_en, c_addr, c_xbus, c_dir, rst, clk, o_bus_addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:155" *)
  wire [15:0] \$1 ;
  (* enum_base_type = "Addr" *)
  (* enum_value_00 = "IND" *)
  (* enum_value_01 = "RSD" *)
  (* enum_value_10 = "RB" *)
  (* enum_value_11 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:107" *)
  input [1:0] c_addr;
  (* enum_base_type = "Dir" *)
  (* enum_value_0 = "LD" *)
  (* enum_value_1 = "ST" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:106" *)
  input c_dir;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:105" *)
  input c_en;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:108" *)
  input c_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:109" *)
  input c_xbus;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:102" *)
  input [15:0] i_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:118" *)
  input [15:0] i_ext_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:113" *)
  input [15:0] i_mem_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:96" *)
  input [15:0] i_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:101" *)
  input [15:0] i_ptr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:98" *)
  input [2:0] i_ra;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:99" *)
  input [2:0] i_rb;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:100" *)
  input [2:0] i_rsd;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:97" *)
  input [12:0] i_w;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:111" *)
  output [15:0] o_bus_addr;
  reg [15:0] o_bus_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:103" *)
  output [15:0] o_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:120" *)
  output [15:0] o_ext_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:119" *)
  output o_ext_re;
  reg o_ext_re;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:121" *)
  output o_ext_we;
  reg o_ext_we;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:115" *)
  output [15:0] o_mem_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:114" *)
  output o_mem_re;
  reg o_mem_re;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:116" *)
  output o_mem_we;
  reg o_mem_we;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:138" *)
  reg r_xbus = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:138" *)
  reg \r_xbus$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  assign \$1  = r_xbus ? (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:155" *) i_ext_data : i_mem_data;
  always @(posedge clk)
    r_xbus <= \r_xbus$next ;
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:126" *)
    casez (c_addr)
      /* \nmigen.decoding  = "IND/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:127" */
      2'h0:
          o_bus_addr = i_ptr;
      /* \nmigen.decoding  = "RA/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:129" */
      2'h3:
          o_bus_addr = { i_w, i_ra };
      /* \nmigen.decoding  = "RB/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:131" */
      2'h2:
          o_bus_addr = { i_w, i_rb };
      /* \nmigen.decoding  = "RSD/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:133" */
      2'h1:
          o_bus_addr = { i_w, i_rsd };
    endcase
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:135" *)
    casez (c_pc)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:135" */
      1'h1:
          o_bus_addr = i_pc;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_xbus$next  = r_xbus;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:139" *)
    casez (c_dir)
      /* \nmigen.decoding  = "LD/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:140" */
      1'h0:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:141" *)
          casez (c_en)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:141" */
            1'h1:
                \r_xbus$next  = c_xbus;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_xbus$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_ext_re = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:139" *)
    casez (c_dir)
      /* \nmigen.decoding  = "LD/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:140" */
      1'h0:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:143" *)
          casez (c_xbus)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:143" */
            1'h1:
                o_ext_re = c_en;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_mem_re = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:139" *)
    casez (c_dir)
      /* \nmigen.decoding  = "LD/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:140" */
      1'h0:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:143" *)
          casez (c_xbus)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:143" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:145" */
            default:
                o_mem_re = c_en;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_ext_we = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:139" *)
    casez (c_dir)
      /* \nmigen.decoding  = "ST/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:147" */
      1'h1:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:148" *)
          casez (c_xbus)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:148" */
            1'h1:
                o_ext_we = c_en;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_mem_we = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:139" *)
    casez (c_dir)
      /* \nmigen.decoding  = "ST/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:147" */
      1'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:148" *)
          casez (c_xbus)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:148" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:150" */
            default:
                o_mem_we = c_en;
          endcase
    endcase
  end
  assign o_data = \$1 ;
  assign o_ext_data = i_data;
  assign o_mem_data = i_data;
endmodule

(* \nmigen.hierarchy  = "boneless" *)
(* top =  1  *)
(* generator = "nMigen" *)
module boneless(clk, rst, tx_pin);
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  output tx_pin;
  cpu cpu (
    .clk(clk),
    .rst(rst),
    .tx_pin(tx_pin)
  );
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.bridge" *)
(* generator = "nMigen" *)
module bridge(clk, csr__addr, csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, serial_divisor__r_data, serial_divisor__w_stb, serial_divisor__w_data, serial_rx_data__r_data, serial_rx_data__r_stb, serial_rx_rdy__r_data, serial_rx_err__r_data, serial_tx_data__w_stb, serial_tx_data__w_data, serial_tx_rdy__r_data, _rx_rdy_ev_stb, _rx_err_ev_stb, _tx_mty_ev_stb, rst);
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  input _rx_err_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  input _rx_rdy_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  input _tx_mty_ev_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [3:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [2:0] csr_mux_0_csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_0_csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_0_csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [1:0] csr_mux_1_csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_1_csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_1_csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_1_csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_1_csr__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  wire [2:0] csr_mux_1_serial_ev_enable__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  wire [2:0] csr_mux_1_serial_ev_enable__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  wire csr_mux_1_serial_ev_enable__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  wire [2:0] csr_mux_1_serial_ev_pending__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  wire [2:0] csr_mux_1_serial_ev_pending__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  wire csr_mux_1_serial_ev_pending__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:113" *)
  wire [2:0] csr_mux_1_serial_ev_status__r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [7:0] serial_divisor__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [7:0] serial_divisor__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output serial_divisor__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [7:0] serial_rx_data__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output serial_rx_data__r_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [2:0] serial_rx_err__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input serial_rx_rdy__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [7:0] serial_tx_data__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output serial_tx_data__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input serial_tx_rdy__r_data;
  _int_src _int_src (
    ._rx_err_ev_stb(_rx_err_ev_stb),
    ._rx_rdy_ev_stb(_rx_rdy_ev_stb),
    ._tx_mty_ev_stb(_tx_mty_ev_stb),
    .clk(clk),
    .rst(rst),
    .serial_ev_enable__r_data(csr_mux_1_serial_ev_enable__r_data),
    .serial_ev_enable__w_data(csr_mux_1_serial_ev_enable__w_data),
    .serial_ev_enable__w_stb(csr_mux_1_serial_ev_enable__w_stb),
    .serial_ev_pending__r_data(csr_mux_1_serial_ev_pending__r_data),
    .serial_ev_pending__w_data(csr_mux_1_serial_ev_pending__w_data),
    .serial_ev_pending__w_stb(csr_mux_1_serial_ev_pending__w_stb),
    .serial_ev_status__r_data(csr_mux_1_serial_ev_status__r_data)
  );
  csr_mux_0 csr_mux_0 (
    .clk(clk),
    .csr__addr(csr_mux_0_csr__addr),
    .csr__r_data(csr_mux_0_csr__r_data),
    .csr__r_stb(csr_mux_0_csr__r_stb),
    .csr__w_data(csr_mux_0_csr__w_data),
    .csr__w_stb(csr_mux_0_csr__w_stb),
    .rst(rst),
    .serial_divisor__r_data(serial_divisor__r_data),
    .serial_divisor__w_data(serial_divisor__w_data),
    .serial_divisor__w_stb(serial_divisor__w_stb),
    .serial_rx_data__r_data(serial_rx_data__r_data),
    .serial_rx_data__r_stb(serial_rx_data__r_stb),
    .serial_rx_err__r_data(serial_rx_err__r_data),
    .serial_rx_rdy__r_data(serial_rx_rdy__r_data),
    .serial_tx_data__w_data(serial_tx_data__w_data),
    .serial_tx_data__w_stb(serial_tx_data__w_stb),
    .serial_tx_rdy__r_data(serial_tx_rdy__r_data)
  );
  csr_mux_1 csr_mux_1 (
    .clk(clk),
    .csr__addr(csr_mux_1_csr__addr),
    .csr__r_data(csr_mux_1_csr__r_data),
    .csr__r_stb(csr_mux_1_csr__r_stb),
    .csr__w_data(csr_mux_1_csr__w_data),
    .csr__w_stb(csr_mux_1_csr__w_stb),
    .rst(rst),
    .serial_ev_enable__r_data(csr_mux_1_serial_ev_enable__r_data),
    .serial_ev_enable__w_data(csr_mux_1_serial_ev_enable__w_data),
    .serial_ev_enable__w_stb(csr_mux_1_serial_ev_enable__w_stb),
    .serial_ev_pending__r_data(csr_mux_1_serial_ev_pending__r_data),
    .serial_ev_pending__w_data(csr_mux_1_serial_ev_pending__w_data),
    .serial_ev_pending__w_stb(csr_mux_1_serial_ev_pending__w_stb),
    .serial_ev_status__r_data(csr_mux_1_serial_ev_status__r_data)
  );
  decoder decoder (
    .csr__addr(csr__addr),
    .\csr__addr$1 (csr_mux_0_csr__addr),
    .\csr__addr$6 (csr_mux_1_csr__addr),
    .csr__r_data(csr__r_data),
    .\csr__r_data$10 (csr_mux_1_csr__r_data),
    .\csr__r_data$5 (csr_mux_0_csr__r_data),
    .csr__r_stb(csr__r_stb),
    .\csr__r_stb$2 (csr_mux_0_csr__r_stb),
    .\csr__r_stb$7 (csr_mux_1_csr__r_stb),
    .csr__w_data(csr__w_data),
    .\csr__w_data$4 (csr_mux_0_csr__w_data),
    .\csr__w_data$9 (csr_mux_1_csr__w_data),
    .csr__w_stb(csr__w_stb),
    .\csr__w_stb$3 (csr_mux_0_csr__w_stb),
    .\csr__w_stb$8 (csr_mux_1_csr__w_stb)
  );
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.statusled.bridge" *)
(* generator = "nMigen" *)
module \bridge$3 (clk, csr__addr, csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, statusled_en__w_data, statusled_led__w_data, rst);
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_0_csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_0_csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output statusled_en__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [15:0] statusled_led__w_data;
  \csr_mux_0$4  csr_mux_0 (
    .clk(clk),
    .csr__addr(csr_mux_0_csr__addr),
    .csr__r_data(csr_mux_0_csr__r_data),
    .csr__r_stb(csr_mux_0_csr__r_stb),
    .csr__w_data(csr_mux_0_csr__w_data),
    .csr__w_stb(csr_mux_0_csr__w_stb),
    .rst(rst),
    .statusled_en__w_data(statusled_en__w_data),
    .statusled_led__w_data(statusled_led__w_data)
  );
  \decoder$5  decoder (
    .csr__addr(csr__addr),
    .\csr__addr$1 (csr_mux_0_csr__addr),
    .csr__r_data(csr__r_data),
    .\csr__r_data$5 (csr_mux_0_csr__r_data),
    .csr__r_stb(csr__r_stb),
    .\csr__r_stb$2 (csr_mux_0_csr__r_stb),
    .csr__w_data(csr__w_data),
    .\csr__w_data$4 (csr_mux_0_csr__w_data),
    .csr__w_stb(csr__w_stb),
    .\csr__w_stb$3 (csr_mux_0_csr__w_stb)
  );
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.crc.bridge" *)
(* generator = "nMigen" *)
module \bridge$6 (clk, csr__addr, csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, crc_reset__w_stb, crc_byte__w_stb, crc_word__w_stb, crc_byte__w_data, crc_word__w_data, crc_crc__r_data, rst);
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [7:0] crc_byte__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output crc_byte__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [15:0] crc_crc__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output crc_reset__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [15:0] crc_word__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output crc_word__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [1:0] csr_mux_0_csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_0_csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire [15:0] csr_mux_0_csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  wire csr_mux_0_csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  \csr_mux_0$7  csr_mux_0 (
    .clk(clk),
    .crc_byte__w_data(crc_byte__w_data),
    .crc_byte__w_stb(crc_byte__w_stb),
    .crc_crc__r_data(crc_crc__r_data),
    .crc_reset__w_stb(crc_reset__w_stb),
    .crc_word__w_data(crc_word__w_data),
    .crc_word__w_stb(crc_word__w_stb),
    .csr__addr(csr_mux_0_csr__addr),
    .csr__r_data(csr_mux_0_csr__r_data),
    .csr__r_stb(csr_mux_0_csr__r_stb),
    .csr__w_data(csr_mux_0_csr__w_data),
    .csr__w_stb(csr_mux_0_csr__w_stb),
    .rst(rst)
  );
  \decoder$8  decoder (
    .csr__addr(csr__addr),
    .\csr__addr$1 (csr_mux_0_csr__addr),
    .csr__r_data(csr__r_data),
    .\csr__r_data$5 (csr_mux_0_csr__r_data),
    .csr__r_stb(csr__r_stb),
    .\csr__r_stb$4 (csr_mux_0_csr__r_stb),
    .csr__w_data(csr__w_data),
    .\csr__w_data$3 (csr_mux_0_csr__w_data),
    .csr__w_stb(csr__w_stb),
    .\csr__w_stb$2 (csr_mux_0_csr__w_stb)
  );
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.bus" *)
(* generator = "nMigen" *)
module bus(csr__r_stb, csr__w_stb, csr__w_data, csr__r_data, \csr__addr$1 , \csr__w_data$2 , \csr__addr$3 , \csr__w_data$4 , \csr__addr$5 , \csr__w_data$6 , \csr__r_stb$7 , \csr__w_stb$8 , \csr__r_stb$9 , \csr__w_stb$10 , \csr__r_stb$11 , \csr__w_stb$12 , \csr__r_data$13 , \csr__r_data$14 , \csr__r_data$15 , csr__addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$16 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$18 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$20 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [3:0] \csr__addr$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [2:0] \csr__addr$3 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [2:0] \csr__addr$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] \csr__r_data$13 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] \csr__r_data$14 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] \csr__r_data$15 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output \csr__r_stb$11 ;
  reg \csr__r_stb$11 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output \csr__r_stb$7 ;
  reg \csr__r_stb$7 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output \csr__r_stb$9 ;
  reg \csr__r_stb$9 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] \csr__w_data$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] \csr__w_data$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] \csr__w_data$6 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output \csr__w_stb$10 ;
  reg \csr__w_stb$10 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output \csr__w_stb$12 ;
  reg \csr__w_stb$12 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output \csr__w_stb$8 ;
  reg \csr__w_stb$8 ;
  assign \$16  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$13 ;
  assign \$18  = \$16  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$14 ;
  assign \$20  = \$18  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$15 ;
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$11  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'h000?:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'b0000000000010???:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'b0000000000011???:
          \csr__r_stb$11  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$12  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'h000?:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'b0000000000010???:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'b0000000000011???:
          \csr__w_stb$12  = csr__w_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$7  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'h000?:
          \csr__r_stb$7  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$8  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'h000?:
          \csr__w_stb$8  = csr__w_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$9  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'h000?:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'b0000000000010???:
          \csr__r_stb$9  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$10  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'h000?:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      16'b0000000000010???:
          \csr__w_stb$10  = csr__w_stb;
    endcase
  end
  assign csr__r_data = \$20 ;
  assign \csr__w_data$6  = csr__w_data;
  assign \csr__addr$5  = csr__addr[2:0];
  assign \csr__w_data$4  = csr__w_data;
  assign \csr__addr$3  = csr__addr[2:0];
  assign \csr__w_data$2  = csr__w_data;
  assign \csr__addr$1  = csr__addr[3:0];
endmodule

(* \nmigen.hierarchy  = "boneless.cpu" *)
(* generator = "nMigen" *)
module cpu(clk, tx_pin, rst);
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:118" *)
  wire [15:0] cpu_i_ext_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:111" *)
  wire [15:0] cpu_o_bus_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:120" *)
  wire [15:0] cpu_o_ext_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:119" *)
  wire cpu_o_ext_re;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:121" *)
  wire cpu_o_ext_we;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] pc_csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] pc_csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire pc_csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] pc_csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire pc_csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  output tx_pin;
  \cpu$1  cpu (
    .clk(clk),
    .i_ext_data(cpu_i_ext_data),
    .o_bus_addr(cpu_o_bus_addr),
    .o_ext_data(cpu_o_ext_data),
    .o_ext_re(cpu_o_ext_re),
    .o_ext_we(cpu_o_ext_we),
    .rst(rst)
  );
  \pc$2  pc (
    .clk(clk),
    .csr__addr(pc_csr__addr),
    .csr__r_data(pc_csr__r_data),
    .csr__r_stb(pc_csr__r_stb),
    .csr__w_data(pc_csr__w_data),
    .csr__w_stb(pc_csr__w_stb),
    .rst(rst),
    .tx_pin(tx_pin)
  );
  assign cpu_i_ext_data = pc_csr__r_data;
  assign pc_csr__w_data = cpu_o_ext_data;
  assign pc_csr__w_stb = cpu_o_ext_we;
  assign pc_csr__r_stb = cpu_o_ext_re;
  assign pc_csr__addr = cpu_o_bus_addr;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu" *)
(* generator = "nMigen" *)
module \cpu$1 (o_ext_re, o_ext_we, o_ext_data, i_ext_data, rst, clk, o_bus_addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:165" *)
  wire [2:0] \$11 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:346" *)
  wire [15:0] \$13 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:346" *)
  wire [15:0] \$14 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:349" *)
  wire \$16 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:352" *)
  wire \$18 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:235" *)
  wire [16:0] \$2 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:235" *)
  wire [16:0] \$3 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:249" *)
  wire \$5 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:250" *)
  wire [4:0] \$7 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:276" *)
  wire [15:0] \$9 ;
  (* enum_base_type = "Dir" *)
  (* enum_value_0 = "L" *)
  (* enum_value_1 = "R" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:48" *)
  wire alsru_c_dir;
  (* enum_base_type = "Op" *)
  (* enum_value_00000 = "A" *)
  (* enum_value_00001 = "AaB" *)
  (* enum_value_00010 = "AoB" *)
  (* enum_value_00011 = "AxB" *)
  (* enum_value_01000 = "ApB" *)
  (* enum_value_01100 = "AmB" *)
  (* enum_value_10100 = "SLR" *)
  (* enum_value_11000 = "B" *)
  (* enum_value_11100 = "nB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:43" *)
  reg [4:0] alsru_c_op;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:32" *)
  wire [15:0] alsru_i_a;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:33" *)
  wire [15:0] alsru_i_b;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:34" *)
  reg alsru_i_c;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:45" *)
  reg alsru_i_h;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:40" *)
  wire alsru_o_c;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:35" *)
  wire [15:0] alsru_o_o;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:39" *)
  wire alsru_o_s;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:41" *)
  wire alsru_o_v;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:38" *)
  wire alsru_o_z;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/alsru.py:36" *)
  wire [15:0] alsru_r_o;
  (* enum_base_type = "Addr" *)
  (* enum_value_00 = "IND" *)
  (* enum_value_01 = "RSD" *)
  (* enum_value_10 = "RB" *)
  (* enum_value_11 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:107" *)
  reg [1:0] arb_c_addr;
  (* enum_base_type = "Dir" *)
  (* enum_value_0 = "LD" *)
  (* enum_value_1 = "ST" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:106" *)
  reg arb_c_dir;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:105" *)
  reg arb_c_en;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:108" *)
  reg arb_c_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:109" *)
  reg arb_c_xbus;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:102" *)
  wire [15:0] arb_i_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:113" *)
  wire [15:0] arb_i_mem_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:96" *)
  wire [15:0] arb_i_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:101" *)
  wire [15:0] arb_i_ptr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:98" *)
  wire [2:0] arb_i_ra;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:99" *)
  wire [2:0] arb_i_rb;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:100" *)
  wire [2:0] arb_i_rsd;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:97" *)
  wire [12:0] arb_i_w;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:103" *)
  wire [15:0] arb_o_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:115" *)
  wire [15:0] arb_o_mem_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:114" *)
  wire arb_o_mem_re;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:116" *)
  wire arb_o_mem_we;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* enum_base_type = "Cond" *)
  (* enum_value_000 = "Z" *)
  (* enum_value_001 = "S" *)
  (* enum_value_010 = "C" *)
  (* enum_value_011 = "V" *)
  (* enum_value_100 = "nCoZ" *)
  (* enum_value_101 = "SxV" *)
  (* enum_value_110 = "SxVoZ" *)
  (* enum_value_111 = "A" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:35" *)
  wire [2:0] csel_c_cond;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  wire csel_i_f__c;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  wire csel_i_f__s;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  wire csel_i_f__v;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  wire csel_i_f__z;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:36" *)
  wire csel_o_flag;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:148" *)
  wire dec_c_cycle;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:147" *)
  reg dec_c_fetch;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:145" *)
  reg [15:0] dec_i_insn;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:144" *)
  wire [15:0] dec_i_pc;
  (* enum_base_type = "Addr" *)
  (* enum_value_00 = "IND" *)
  (* enum_value_01 = "RSD" *)
  (* enum_value_10 = "RB" *)
  (* enum_value_11 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:269" *)
  wire [1:0] dec_ld_a__addr;
  (* enum_base_type = "OpAMux" *)
  (* enum_value_00 = "ZERO" *)
  (* enum_value_01 = "PCp1" *)
  (* enum_value_10 = "W" *)
  (* enum_value_11 = "PTR" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:269" *)
  wire [1:0] dec_ld_a__mux;
  (* enum_base_type = "Addr" *)
  (* enum_value_00 = "IND" *)
  (* enum_value_01 = "RSD" *)
  (* enum_value_10 = "RB" *)
  (* enum_value_11 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:281" *)
  wire [1:0] dec_ld_b__addr;
  (* enum_base_type = "OpBMux" *)
  (* enum_value_0 = "IMM" *)
  (* enum_value_1 = "PTR" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:281" *)
  wire dec_ld_b__mux;
  (* enum_base_type = "CI" *)
  (* enum_value_00 = "ZERO" *)
  (* enum_value_01 = "ONE" *)
  (* enum_value_10 = "FLAG" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:172" *)
  wire [1:0] dec_o_ci;
  (* enum_base_type = "Cond" *)
  (* enum_value_000 = "Z" *)
  (* enum_value_001 = "S" *)
  (* enum_value_010 = "C" *)
  (* enum_value_011 = "V" *)
  (* enum_value_100 = "nCoZ" *)
  (* enum_value_101 = "SxV" *)
  (* enum_value_110 = "SxVoZ" *)
  (* enum_value_111 = "A" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:154" *)
  wire [2:0] dec_o_cond;
  (* enum_base_type = "Dir" *)
  (* enum_value_0 = "L" *)
  (* enum_value_1 = "R" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:171" *)
  wire dec_o_dir;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:155" *)
  wire dec_o_flag;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:150" *)
  wire [15:0] dec_o_imm16;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:160" *)
  wire dec_o_jcc;
  (* enum_base_type = "LdA" *)
  (* enum_value_0000 = "ZERO" *)
  (* enum_value_0001 = "PCp1" *)
  (* enum_value_0010 = "W" *)
  (* enum_value_0111 = "RSD" *)
  (* enum_value_1111 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:163" *)
  wire [3:0] dec_o_ld_a;
  (* enum_base_type = "LdB" *)
  (* enum_value_000 = "IMM" *)
  (* enum_value_001 = "IND" *)
  (* enum_value_011 = "RSD" *)
  (* enum_value_101 = "RB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:164" *)
  wire [2:0] dec_o_ld_b;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:158" *)
  wire dec_o_multi;
  (* enum_base_type = "Op" *)
  (* enum_value_00000 = "A" *)
  (* enum_value_00001 = "AaB" *)
  (* enum_value_00010 = "AoB" *)
  (* enum_value_00011 = "AxB" *)
  (* enum_value_01000 = "ApB" *)
  (* enum_value_01100 = "AmB" *)
  (* enum_value_10100 = "SLR" *)
  (* enum_value_11000 = "B" *)
  (* enum_value_11100 = "nB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:170" *)
  wire [4:0] dec_o_op;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:152" *)
  wire [2:0] dec_o_ra;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:153" *)
  wire [2:0] dec_o_rb;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:151" *)
  wire [2:0] dec_o_rsd;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:157" *)
  wire dec_o_shift;
  (* enum_base_type = "SI" *)
  (* enum_value_0 = "ZERO" *)
  (* enum_value_1 = "MSB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:173" *)
  wire dec_o_si;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:161" *)
  wire dec_o_skip;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:166" *)
  wire dec_o_st_f__cv;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:166" *)
  wire dec_o_st_f__zs;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:168" *)
  wire dec_o_st_pc;
  (* enum_base_type = "StR" *)
  (* enum_value_00 = "x" *)
  (* enum_value_01 = "IND" *)
  (* enum_value_11 = "RSD" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:165" *)
  wire [1:0] dec_o_st_r;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:167" *)
  wire dec_o_st_w;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:159" *)
  wire dec_o_xbus;
  (* enum_base_type = "Addr" *)
  (* enum_value_00 = "IND" *)
  (* enum_value_01 = "RSD" *)
  (* enum_value_10 = "RB" *)
  (* enum_value_11 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:288" *)
  wire [1:0] dec_st_r__addr;
  (* enum_base_type = "OpRMux" *)
  (* enum_value_0 = "ZERO" *)
  (* enum_value_1 = "PTR" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:288" *)
  wire dec_st_r__mux;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
  reg [1:0] \fsm_state$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:118" *)
  input [15:0] i_ext_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:200" *)
  wire [8:0] memory_r_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:200" *)
  wire [15:0] memory_r_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:200" *)
  wire memory_r_en;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:201" *)
  wire [8:0] memory_w_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:201" *)
  wire [15:0] memory_w_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:201" *)
  wire memory_w_en;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:111" *)
  output [15:0] o_bus_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:180" *)
  reg o_done;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:120" *)
  output [15:0] o_ext_data;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:119" *)
  output o_ext_re;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:121" *)
  output o_ext_we;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:169" *)
  wire [15:0] o_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:17" *)
  reg pc_c_inc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:16" *)
  reg pc_c_set;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:13" *)
  wire [15:0] pc_i_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:14" *)
  wire [15:0] pc_r_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:176" *)
  reg [15:0] r_a = 16'h0000;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:176" *)
  reg [15:0] \r_a$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:179" *)
  reg r_cycle = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:179" *)
  reg \r_cycle$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg r_f__c = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg \r_f__c$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg r_f__s = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg \r_f__s$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg r_f__v = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg \r_f__v$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg r_f__z = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:171" *)
  reg \r_f__z$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:173" *)
  reg [15:0] r_insn = 16'h0000;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:173" *)
  reg [15:0] \r_insn$next ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:170" *)
  reg [12:0] r_w = 13'h003f;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:170" *)
  reg [12:0] \r_w$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:175" *)
  reg [15:0] s_a;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:177" *)
  reg [15:0] s_b;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:174" *)
  reg [15:0] s_base;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:67" *)
  reg shift_c_en;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:68" *)
  reg shift_c_load;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:64" *)
  wire [3:0] shift_i_shamt;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:65" *)
  wire shift_o_done;
  reg [15:0] memory [511:0];
  initial begin
    memory[0] = 16'h0000;
    memory[1] = 16'h0000;
    memory[2] = 16'h0000;
    memory[3] = 16'h0000;
    memory[4] = 16'h0000;
    memory[5] = 16'h0000;
    memory[6] = 16'h0000;
    memory[7] = 16'h0000;
    memory[8] = 16'h0000;
    memory[9] = 16'h0000;
    memory[10] = 16'h0000;
    memory[11] = 16'h0000;
    memory[12] = 16'h0000;
    memory[13] = 16'h0000;
    memory[14] = 16'h0000;
    memory[15] = 16'h0000;
    memory[16] = 16'h0000;
    memory[17] = 16'h0000;
    memory[18] = 16'h0000;
    memory[19] = 16'h0000;
    memory[20] = 16'h0000;
    memory[21] = 16'h0000;
    memory[22] = 16'h0000;
    memory[23] = 16'h0000;
    memory[24] = 16'h0000;
    memory[25] = 16'h0000;
    memory[26] = 16'h0000;
    memory[27] = 16'h0000;
    memory[28] = 16'h0000;
    memory[29] = 16'h0000;
    memory[30] = 16'h0000;
    memory[31] = 16'h0000;
    memory[32] = 16'h0000;
    memory[33] = 16'h0000;
    memory[34] = 16'h0000;
    memory[35] = 16'h0000;
    memory[36] = 16'h0000;
    memory[37] = 16'h0000;
    memory[38] = 16'h0000;
    memory[39] = 16'h0000;
    memory[40] = 16'h0000;
    memory[41] = 16'h0000;
    memory[42] = 16'h0000;
    memory[43] = 16'h0000;
    memory[44] = 16'h0000;
    memory[45] = 16'h0000;
    memory[46] = 16'h0000;
    memory[47] = 16'h0000;
    memory[48] = 16'h0000;
    memory[49] = 16'h0000;
    memory[50] = 16'h0000;
    memory[51] = 16'h0000;
    memory[52] = 16'h0000;
    memory[53] = 16'h0000;
    memory[54] = 16'h0000;
    memory[55] = 16'h0000;
    memory[56] = 16'h0000;
    memory[57] = 16'h0000;
    memory[58] = 16'h0000;
    memory[59] = 16'h0000;
    memory[60] = 16'h0000;
    memory[61] = 16'h0000;
    memory[62] = 16'h0000;
    memory[63] = 16'h0000;
    memory[64] = 16'h0000;
    memory[65] = 16'h0000;
    memory[66] = 16'h0000;
    memory[67] = 16'h0000;
    memory[68] = 16'h0000;
    memory[69] = 16'h0000;
    memory[70] = 16'h0000;
    memory[71] = 16'h0000;
    memory[72] = 16'h0000;
    memory[73] = 16'h0000;
    memory[74] = 16'h0000;
    memory[75] = 16'h0000;
    memory[76] = 16'h0000;
    memory[77] = 16'h0000;
    memory[78] = 16'h0000;
    memory[79] = 16'h0000;
    memory[80] = 16'h0000;
    memory[81] = 16'h0000;
    memory[82] = 16'h0000;
    memory[83] = 16'h0000;
    memory[84] = 16'h0000;
    memory[85] = 16'h0000;
    memory[86] = 16'h0000;
    memory[87] = 16'h0000;
    memory[88] = 16'h0000;
    memory[89] = 16'h0000;
    memory[90] = 16'h0000;
    memory[91] = 16'h0000;
    memory[92] = 16'h0000;
    memory[93] = 16'h0000;
    memory[94] = 16'h0000;
    memory[95] = 16'h0000;
    memory[96] = 16'h0000;
    memory[97] = 16'h0000;
    memory[98] = 16'h0000;
    memory[99] = 16'h0000;
    memory[100] = 16'h0000;
    memory[101] = 16'h0000;
    memory[102] = 16'h0000;
    memory[103] = 16'h0000;
    memory[104] = 16'h0000;
    memory[105] = 16'h0000;
    memory[106] = 16'h0000;
    memory[107] = 16'h0000;
    memory[108] = 16'h0000;
    memory[109] = 16'h0000;
    memory[110] = 16'h0000;
    memory[111] = 16'h0000;
    memory[112] = 16'h0000;
    memory[113] = 16'h0000;
    memory[114] = 16'h0000;
    memory[115] = 16'h0000;
    memory[116] = 16'h0000;
    memory[117] = 16'h0000;
    memory[118] = 16'h0000;
    memory[119] = 16'h0000;
    memory[120] = 16'h0000;
    memory[121] = 16'h0000;
    memory[122] = 16'h0000;
    memory[123] = 16'h0000;
    memory[124] = 16'h0000;
    memory[125] = 16'h0000;
    memory[126] = 16'h0000;
    memory[127] = 16'h0000;
    memory[128] = 16'h0000;
    memory[129] = 16'h0000;
    memory[130] = 16'h0000;
    memory[131] = 16'h0000;
    memory[132] = 16'h0000;
    memory[133] = 16'h0000;
    memory[134] = 16'h0000;
    memory[135] = 16'h0000;
    memory[136] = 16'h0000;
    memory[137] = 16'h0000;
    memory[138] = 16'h0000;
    memory[139] = 16'h0000;
    memory[140] = 16'h0000;
    memory[141] = 16'h0000;
    memory[142] = 16'h0000;
    memory[143] = 16'h0000;
    memory[144] = 16'h0000;
    memory[145] = 16'h0000;
    memory[146] = 16'h0000;
    memory[147] = 16'h0000;
    memory[148] = 16'h0000;
    memory[149] = 16'h0000;
    memory[150] = 16'h0000;
    memory[151] = 16'h0000;
    memory[152] = 16'h0000;
    memory[153] = 16'h0000;
    memory[154] = 16'h0000;
    memory[155] = 16'h0000;
    memory[156] = 16'h0000;
    memory[157] = 16'h0000;
    memory[158] = 16'h0000;
    memory[159] = 16'h0000;
    memory[160] = 16'h0000;
    memory[161] = 16'h0000;
    memory[162] = 16'h0000;
    memory[163] = 16'h0000;
    memory[164] = 16'h0000;
    memory[165] = 16'h0000;
    memory[166] = 16'h0000;
    memory[167] = 16'h0000;
    memory[168] = 16'h0000;
    memory[169] = 16'h0000;
    memory[170] = 16'h0000;
    memory[171] = 16'h0000;
    memory[172] = 16'h0000;
    memory[173] = 16'h0000;
    memory[174] = 16'h0000;
    memory[175] = 16'h0000;
    memory[176] = 16'h0000;
    memory[177] = 16'h0000;
    memory[178] = 16'h0000;
    memory[179] = 16'h0000;
    memory[180] = 16'h0000;
    memory[181] = 16'h0000;
    memory[182] = 16'h0000;
    memory[183] = 16'h0000;
    memory[184] = 16'h0000;
    memory[185] = 16'h0000;
    memory[186] = 16'h0000;
    memory[187] = 16'h0000;
    memory[188] = 16'h0000;
    memory[189] = 16'h0000;
    memory[190] = 16'h0000;
    memory[191] = 16'h0000;
    memory[192] = 16'h0000;
    memory[193] = 16'h0000;
    memory[194] = 16'h0000;
    memory[195] = 16'h0000;
    memory[196] = 16'h0000;
    memory[197] = 16'h0000;
    memory[198] = 16'h0000;
    memory[199] = 16'h0000;
    memory[200] = 16'h0000;
    memory[201] = 16'h0000;
    memory[202] = 16'h0000;
    memory[203] = 16'h0000;
    memory[204] = 16'h0000;
    memory[205] = 16'h0000;
    memory[206] = 16'h0000;
    memory[207] = 16'h0000;
    memory[208] = 16'h0000;
    memory[209] = 16'h0000;
    memory[210] = 16'h0000;
    memory[211] = 16'h0000;
    memory[212] = 16'h0000;
    memory[213] = 16'h0000;
    memory[214] = 16'h0000;
    memory[215] = 16'h0000;
    memory[216] = 16'h0000;
    memory[217] = 16'h0000;
    memory[218] = 16'h0000;
    memory[219] = 16'h0000;
    memory[220] = 16'h0000;
    memory[221] = 16'h0000;
    memory[222] = 16'h0000;
    memory[223] = 16'h0000;
    memory[224] = 16'h0000;
    memory[225] = 16'h0000;
    memory[226] = 16'h0000;
    memory[227] = 16'h0000;
    memory[228] = 16'h0000;
    memory[229] = 16'h0000;
    memory[230] = 16'h0000;
    memory[231] = 16'h0000;
    memory[232] = 16'h0000;
    memory[233] = 16'h0000;
    memory[234] = 16'h0000;
    memory[235] = 16'h0000;
    memory[236] = 16'h0000;
    memory[237] = 16'h0000;
    memory[238] = 16'h0000;
    memory[239] = 16'h0000;
    memory[240] = 16'h0000;
    memory[241] = 16'h0000;
    memory[242] = 16'h0000;
    memory[243] = 16'h0000;
    memory[244] = 16'h0000;
    memory[245] = 16'h0000;
    memory[246] = 16'h0000;
    memory[247] = 16'h0000;
    memory[248] = 16'h0000;
    memory[249] = 16'h0000;
    memory[250] = 16'h0000;
    memory[251] = 16'h0000;
    memory[252] = 16'h0000;
    memory[253] = 16'h0000;
    memory[254] = 16'h0000;
    memory[255] = 16'h0000;
    memory[256] = 16'h0000;
    memory[257] = 16'h0000;
    memory[258] = 16'h0000;
    memory[259] = 16'h0000;
    memory[260] = 16'h0000;
    memory[261] = 16'h0000;
    memory[262] = 16'h0000;
    memory[263] = 16'h0000;
    memory[264] = 16'h0000;
    memory[265] = 16'h0000;
    memory[266] = 16'h0000;
    memory[267] = 16'h0000;
    memory[268] = 16'h0000;
    memory[269] = 16'h0000;
    memory[270] = 16'h0000;
    memory[271] = 16'h0000;
    memory[272] = 16'h0000;
    memory[273] = 16'h0000;
    memory[274] = 16'h0000;
    memory[275] = 16'h0000;
    memory[276] = 16'h0000;
    memory[277] = 16'h0000;
    memory[278] = 16'h0000;
    memory[279] = 16'h0000;
    memory[280] = 16'h0000;
    memory[281] = 16'h0000;
    memory[282] = 16'h0000;
    memory[283] = 16'h0000;
    memory[284] = 16'h0000;
    memory[285] = 16'h0000;
    memory[286] = 16'h0000;
    memory[287] = 16'h0000;
    memory[288] = 16'h0000;
    memory[289] = 16'h0000;
    memory[290] = 16'h0000;
    memory[291] = 16'h0000;
    memory[292] = 16'h0000;
    memory[293] = 16'h0000;
    memory[294] = 16'h0000;
    memory[295] = 16'h0000;
    memory[296] = 16'h0000;
    memory[297] = 16'h0000;
    memory[298] = 16'h0000;
    memory[299] = 16'h0000;
    memory[300] = 16'h0000;
    memory[301] = 16'h0000;
    memory[302] = 16'h0000;
    memory[303] = 16'h0000;
    memory[304] = 16'h0000;
    memory[305] = 16'h0000;
    memory[306] = 16'h0000;
    memory[307] = 16'h0000;
    memory[308] = 16'h0000;
    memory[309] = 16'h0000;
    memory[310] = 16'h0000;
    memory[311] = 16'h0000;
    memory[312] = 16'h0000;
    memory[313] = 16'h0000;
    memory[314] = 16'h0000;
    memory[315] = 16'h0000;
    memory[316] = 16'h0000;
    memory[317] = 16'h0000;
    memory[318] = 16'h0000;
    memory[319] = 16'h0000;
    memory[320] = 16'h0000;
    memory[321] = 16'h0000;
    memory[322] = 16'h0000;
    memory[323] = 16'h0000;
    memory[324] = 16'h0000;
    memory[325] = 16'h0000;
    memory[326] = 16'h0000;
    memory[327] = 16'h0000;
    memory[328] = 16'h0000;
    memory[329] = 16'h0000;
    memory[330] = 16'h0000;
    memory[331] = 16'h0000;
    memory[332] = 16'h0000;
    memory[333] = 16'h0000;
    memory[334] = 16'h0000;
    memory[335] = 16'h0000;
    memory[336] = 16'h0000;
    memory[337] = 16'h0000;
    memory[338] = 16'h0000;
    memory[339] = 16'h0000;
    memory[340] = 16'h0000;
    memory[341] = 16'h0000;
    memory[342] = 16'h0000;
    memory[343] = 16'h0000;
    memory[344] = 16'h0000;
    memory[345] = 16'h0000;
    memory[346] = 16'h0000;
    memory[347] = 16'h0000;
    memory[348] = 16'h0000;
    memory[349] = 16'h0000;
    memory[350] = 16'h0000;
    memory[351] = 16'h0000;
    memory[352] = 16'h0000;
    memory[353] = 16'h0000;
    memory[354] = 16'h0000;
    memory[355] = 16'h0000;
    memory[356] = 16'h0000;
    memory[357] = 16'h0000;
    memory[358] = 16'h0000;
    memory[359] = 16'h0000;
    memory[360] = 16'h0000;
    memory[361] = 16'h0000;
    memory[362] = 16'h0000;
    memory[363] = 16'h0000;
    memory[364] = 16'h0000;
    memory[365] = 16'h0000;
    memory[366] = 16'h0000;
    memory[367] = 16'h0000;
    memory[368] = 16'h0000;
    memory[369] = 16'h0000;
    memory[370] = 16'h0000;
    memory[371] = 16'h0000;
    memory[372] = 16'h0000;
    memory[373] = 16'h0000;
    memory[374] = 16'h0000;
    memory[375] = 16'h0000;
    memory[376] = 16'h0000;
    memory[377] = 16'h0000;
    memory[378] = 16'h0000;
    memory[379] = 16'h0000;
    memory[380] = 16'h0000;
    memory[381] = 16'h0000;
    memory[382] = 16'h0000;
    memory[383] = 16'h0000;
    memory[384] = 16'h0000;
    memory[385] = 16'h0000;
    memory[386] = 16'h0000;
    memory[387] = 16'h0000;
    memory[388] = 16'h0000;
    memory[389] = 16'h0000;
    memory[390] = 16'h0000;
    memory[391] = 16'h0000;
    memory[392] = 16'h0000;
    memory[393] = 16'h0000;
    memory[394] = 16'h0000;
    memory[395] = 16'h0000;
    memory[396] = 16'h0000;
    memory[397] = 16'h0000;
    memory[398] = 16'h0000;
    memory[399] = 16'h0000;
    memory[400] = 16'h0000;
    memory[401] = 16'h0000;
    memory[402] = 16'h0000;
    memory[403] = 16'h0000;
    memory[404] = 16'h0000;
    memory[405] = 16'h0000;
    memory[406] = 16'h0000;
    memory[407] = 16'h0000;
    memory[408] = 16'h0000;
    memory[409] = 16'h0000;
    memory[410] = 16'h0000;
    memory[411] = 16'h0000;
    memory[412] = 16'h0000;
    memory[413] = 16'h0000;
    memory[414] = 16'h0000;
    memory[415] = 16'h0000;
    memory[416] = 16'h0000;
    memory[417] = 16'h0000;
    memory[418] = 16'h0000;
    memory[419] = 16'h0000;
    memory[420] = 16'h0000;
    memory[421] = 16'h0000;
    memory[422] = 16'h0000;
    memory[423] = 16'h0000;
    memory[424] = 16'h0000;
    memory[425] = 16'h0000;
    memory[426] = 16'h0000;
    memory[427] = 16'h0000;
    memory[428] = 16'h0000;
    memory[429] = 16'h0000;
    memory[430] = 16'h0000;
    memory[431] = 16'h0000;
    memory[432] = 16'h0000;
    memory[433] = 16'h0000;
    memory[434] = 16'h0000;
    memory[435] = 16'h0000;
    memory[436] = 16'h0000;
    memory[437] = 16'h0000;
    memory[438] = 16'h0000;
    memory[439] = 16'h0000;
    memory[440] = 16'h0000;
    memory[441] = 16'h0000;
    memory[442] = 16'h0000;
    memory[443] = 16'h0000;
    memory[444] = 16'h0000;
    memory[445] = 16'h0000;
    memory[446] = 16'h0000;
    memory[447] = 16'h0000;
    memory[448] = 16'h0000;
    memory[449] = 16'h0000;
    memory[450] = 16'h0000;
    memory[451] = 16'h0000;
    memory[452] = 16'h0000;
    memory[453] = 16'h0000;
    memory[454] = 16'h0000;
    memory[455] = 16'h0000;
    memory[456] = 16'h0000;
    memory[457] = 16'h0000;
    memory[458] = 16'h0000;
    memory[459] = 16'h0000;
    memory[460] = 16'h0000;
    memory[461] = 16'h0000;
    memory[462] = 16'h0000;
    memory[463] = 16'h0000;
    memory[464] = 16'h0000;
    memory[465] = 16'h0000;
    memory[466] = 16'h0000;
    memory[467] = 16'h0000;
    memory[468] = 16'h0000;
    memory[469] = 16'h0000;
    memory[470] = 16'h0000;
    memory[471] = 16'h0000;
    memory[472] = 16'h0000;
    memory[473] = 16'h0000;
    memory[474] = 16'h0000;
    memory[475] = 16'h0000;
    memory[476] = 16'h0000;
    memory[477] = 16'h0000;
    memory[478] = 16'h0000;
    memory[479] = 16'h0000;
    memory[480] = 16'h0000;
    memory[481] = 16'h0000;
    memory[482] = 16'h0000;
    memory[483] = 16'h0000;
    memory[484] = 16'h0000;
    memory[485] = 16'h0000;
    memory[486] = 16'h0000;
    memory[487] = 16'h0000;
    memory[488] = 16'h0000;
    memory[489] = 16'h0000;
    memory[490] = 16'h0000;
    memory[491] = 16'h0000;
    memory[492] = 16'h0000;
    memory[493] = 16'h0000;
    memory[494] = 16'h0000;
    memory[495] = 16'h0000;
    memory[496] = 16'h0000;
    memory[497] = 16'h0000;
    memory[498] = 16'h0000;
    memory[499] = 16'h0000;
    memory[500] = 16'h0000;
    memory[501] = 16'h0000;
    memory[502] = 16'h0000;
    memory[503] = 16'h0000;
    memory[504] = 16'h0000;
    memory[505] = 16'h0000;
    memory[506] = 16'h0000;
    memory[507] = 16'h0000;
    memory[508] = 16'h0000;
    memory[509] = 16'h0000;
    memory[510] = 16'h0000;
    memory[511] = 16'h0000;
  end
  reg [15:0] _0_;
  always @(posedge clk) begin
    if (memory_r_en) _0_ <= memory[memory_r_addr];
    if (memory_w_en) memory[memory_w_addr] <= memory_w_data;
  end
  assign memory_r_data = _0_;
  assign \$9  = r_w <<< (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:276" *) 2'h3;
  assign \$11  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:165" *) dec_o_st_r;
  assign \$14  = alsru_o_o >>> (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:346" *) 2'h3;
  assign \$16  = r_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:349" *) 1'h0;
  assign \$18  = r_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:352" *) 1'h1;
  assign \$3  = s_base + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:235" *) dec_o_imm16;
  assign \$5  = dec_o_flag == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:249" *) csel_o_flag;
  assign \$7  = dec_o_op | (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:250" *) 5'h08;
  always @(posedge clk)
    r_cycle <= \r_cycle$next ;
  always @(posedge clk)
    r_w <= \r_w$next ;
  always @(posedge clk)
    r_f__v <= \r_f__v$next ;
  always @(posedge clk)
    r_f__c <= \r_f__c$next ;
  always @(posedge clk)
    r_f__s <= \r_f__s$next ;
  always @(posedge clk)
    r_f__z <= \r_f__z$next ;
  always @(posedge clk)
    r_insn <= \r_insn$next ;
  always @(posedge clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge clk)
    r_a <= \r_a$next ;
  alsru alsru (
    .c_dir(alsru_c_dir),
    .c_op(alsru_c_op),
    .clk(clk),
    .i_a(alsru_i_a),
    .i_b(alsru_i_b),
    .i_c(alsru_i_c),
    .i_h(alsru_i_h),
    .o_c(alsru_o_c),
    .o_o(alsru_o_o),
    .o_s(alsru_o_s),
    .o_v(alsru_o_v),
    .o_z(alsru_o_z),
    .r_o(alsru_r_o),
    .rst(rst)
  );
  arb arb (
    .c_addr(arb_c_addr),
    .c_dir(arb_c_dir),
    .c_en(arb_c_en),
    .c_pc(arb_c_pc),
    .c_xbus(arb_c_xbus),
    .clk(clk),
    .i_data(arb_i_data),
    .i_ext_data(i_ext_data),
    .i_mem_data(arb_i_mem_data),
    .i_pc(arb_i_pc),
    .i_ptr(arb_i_ptr),
    .i_ra(arb_i_ra),
    .i_rb(arb_i_rb),
    .i_rsd(arb_i_rsd),
    .i_w(arb_i_w),
    .o_bus_addr(o_bus_addr),
    .o_data(arb_o_data),
    .o_ext_data(o_ext_data),
    .o_ext_re(o_ext_re),
    .o_ext_we(o_ext_we),
    .o_mem_data(arb_o_mem_data),
    .o_mem_re(arb_o_mem_re),
    .o_mem_we(arb_o_mem_we),
    .rst(rst)
  );
  csel csel (
    .c_cond(csel_c_cond),
    .i_f__c(csel_i_f__c),
    .i_f__s(csel_i_f__s),
    .i_f__v(csel_i_f__v),
    .i_f__z(csel_i_f__z),
    .o_flag(csel_o_flag)
  );
  dec dec (
    .c_cycle(dec_c_cycle),
    .c_fetch(dec_c_fetch),
    .clk(clk),
    .i_insn(dec_i_insn),
    .i_pc(dec_i_pc),
    .o_ci(dec_o_ci),
    .o_cond(dec_o_cond),
    .o_dir(dec_o_dir),
    .o_flag(dec_o_flag),
    .o_imm16(dec_o_imm16),
    .o_jcc(dec_o_jcc),
    .o_ld_a(dec_o_ld_a),
    .o_ld_b(dec_o_ld_b),
    .o_multi(dec_o_multi),
    .o_op(dec_o_op),
    .o_ra(dec_o_ra),
    .o_rb(dec_o_rb),
    .o_rsd(dec_o_rsd),
    .o_shift(dec_o_shift),
    .o_si(dec_o_si),
    .o_skip(dec_o_skip),
    .o_st_f__cv(dec_o_st_f__cv),
    .o_st_f__zs(dec_o_st_f__zs),
    .o_st_pc(dec_o_st_pc),
    .o_st_r(dec_o_st_r),
    .o_st_w(dec_o_st_w),
    .o_xbus(dec_o_xbus),
    .rst(rst)
  );
  pc pc (
    .c_inc(pc_c_inc),
    .c_set(pc_c_set),
    .clk(clk),
    .i_addr(pc_i_addr),
    .r_addr(pc_r_addr),
    .rst(rst)
  );
  shift shift (
    .c_en(shift_c_en),
    .c_load(shift_c_load),
    .clk(clk),
    .i_shamt(shift_i_shamt),
    .o_done(shift_o_done),
    .rst(rst)
  );
  always @* begin
    if (\initial ) begin end
    alsru_c_op = dec_o_op;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:247" *)
    casez (dec_o_jcc)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:247" */
      1'h1:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:249" *)
          casez (\$5 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:249" */
            1'h1:
                alsru_c_op = \$7 ;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    alsru_i_c = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:251" *)
    casez (dec_o_ci)
      /* \nmigen.decoding  = "ZERO/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:252" */
      2'h0:
          alsru_i_c = 1'h0;
      /* \nmigen.decoding  = "ONE/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:254" */
      2'h1:
          alsru_i_c = 1'h1;
      /* \nmigen.decoding  = "FLAG/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:256" */
      2'h2:
          alsru_i_c = r_f__c;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:258" *)
    casez (dec_o_si)
      /* \nmigen.decoding  = "ZERO/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:259" */
      1'h0:
          alsru_i_h = 1'h0;
      /* \nmigen.decoding  = "MSB/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:261" */
      1'h1:
          alsru_i_h = alsru_r_o[15];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:270" *)
    casez (dec_ld_a__mux)
      /* \nmigen.decoding  = "ZERO/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:271" */
      2'h0:
          s_a = 16'h0000;
      /* \nmigen.decoding  = "PCp1/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:273" */
      2'h1:
          s_a = pc_r_addr;
      /* \nmigen.decoding  = "W/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:275" */
      2'h2:
          s_a = \$9 ;
      /* \nmigen.decoding  = "PTR/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:277" */
      2'h3:
          s_a = arb_o_data;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_a$next  = s_a;
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_a$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:282" *)
    casez (dec_ld_b__mux)
      /* \nmigen.decoding  = "IMM/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:283" */
      1'h0:
          s_b = dec_o_imm16;
      /* \nmigen.decoding  = "PTR/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:285" */
      1'h1:
          s_b = arb_o_data;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    dec_i_insn = r_insn;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          dec_i_insn = arb_o_data;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    s_base = r_a;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "LOAD-B/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:319" */
      2'h2:
          s_base = s_a;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    pc_c_inc = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "FETCH/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:294" */
      2'h0:
          pc_c_inc = 1'h1;
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" *)
          casez (dec_o_skip)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" */
            1'h1:
                pc_c_inc = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    dec_c_fetch = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "FETCH/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:294" */
      2'h0:
          dec_c_fetch = 1'h1;
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" *)
          casez (dec_o_skip)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" */
            1'h1:
                dec_c_fetch = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    arb_c_pc = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "FETCH/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:294" */
      2'h0:
          arb_c_pc = 1'h1;
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" *)
          casez (dec_o_skip)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" */
            1'h1:
                arb_c_pc = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    arb_c_en = 1'h0;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "FETCH/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:294" */
      2'h0:
          arb_c_en = 1'h1;
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
        begin
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:305" *)
          casez (dec_ld_a__mux)
            /* \nmigen.decoding  = "PTR/3" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:306" */
            2'h3:
                arb_c_en = 1'h1;
          endcase
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" *)
          casez (dec_o_skip)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" */
            1'h1:
                arb_c_en = 1'h1;
          endcase
        end
      /* \nmigen.decoding  = "LOAD-B/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:319" */
      2'h2:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:325" *)
          casez (dec_ld_b__mux)
            /* \nmigen.decoding  = "PTR/1" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:326" */
            1'h1:
                arb_c_en = 1'h1;
          endcase
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:336" *)
          casez (dec_st_r__mux)
            /* \nmigen.decoding  = "PTR/1" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:337" */
            1'h1:
                arb_c_en = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "FETCH/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:294" */
      2'h0:
          \fsm_state$next  = 2'h1;
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" *)
          casez (dec_o_skip)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:308" */
            1'h1:
                \fsm_state$next  = 2'h1;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:316" */
            default:
                \fsm_state$next  = 2'h2;
          endcase
      /* \nmigen.decoding  = "LOAD-B/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:319" */
      2'h2:
          \fsm_state$next  = 2'h3;
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:355" *)
          casez (o_done)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:355" */
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_insn$next  = r_insn;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          \r_insn$next  = arb_o_data;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_insn$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    arb_c_addr = 2'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "LOAD-A/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:301" */
      2'h1:
          arb_c_addr = dec_ld_a__addr;
      /* \nmigen.decoding  = "LOAD-B/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:319" */
      2'h2:
          arb_c_addr = dec_ld_b__addr;
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          arb_c_addr = dec_st_r__addr;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    arb_c_xbus = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "LOAD-B/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:319" */
      2'h2:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:322" *)
          casez (dec_ld_b__addr)
            /* \nmigen.decoding  = "IND/0" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:323" */
            2'h0:
                arb_c_xbus = dec_o_xbus;
          endcase
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:333" *)
          casez (dec_st_r__addr)
            /* \nmigen.decoding  = "IND/0" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:334" */
            2'h0:
                arb_c_xbus = dec_o_xbus;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    arb_c_dir = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          arb_c_dir = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_f__z$next  = r_f__z;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:339" *)
          casez (dec_o_st_f__zs)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:339" */
            1'h1:
                \r_f__z$next  = alsru_o_z;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_f__z$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_f__s$next  = r_f__s;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:339" *)
          casez (dec_o_st_f__zs)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:339" */
            1'h1:
                \r_f__s$next  = alsru_o_s;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_f__s$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_f__c$next  = r_f__c;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:342" *)
          casez (dec_o_st_f__cv)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:342" */
            1'h1:
                \r_f__c$next  = alsru_o_c;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_f__c$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_f__v$next  = r_f__v;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:342" *)
          casez (dec_o_st_f__cv)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:342" */
            1'h1:
                \r_f__v$next  = alsru_o_v;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_f__v$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_w$next  = r_w;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:345" *)
          casez (dec_o_st_w)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:345" */
            1'h1:
                \r_w$next  = \$13 [12:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_w$next  = 13'h003f;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    shift_c_en = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:347" *)
          casez ({ dec_o_multi, dec_o_shift })
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:347" */
            2'b?1:
                shift_c_en = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    shift_c_load = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:347" *)
          casez ({ dec_o_multi, dec_o_shift })
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:347" */
            2'b?1:
                shift_c_load = \$16 ;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_done = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:347" *)
          casez ({ dec_o_multi, dec_o_shift })
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:347" */
            2'b?1:
                o_done = shift_o_done;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:351" */
            2'b1?:
                o_done = \$18 ;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:353" */
            default:
                o_done = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    pc_c_set = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:355" *)
          casez (o_done)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:355" */
            1'h1:
                pc_c_set = dec_o_st_pc;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_cycle$next  = r_cycle;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:290" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "EXECUTE/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:330" */
      2'h3:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:355" *)
          casez (o_done)
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:355" */
            1'h1:
                \r_cycle$next  = 1'h0;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:359" */
            default:
                \r_cycle$next  = 1'h1;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_cycle$next  = 1'h0;
    endcase
  end
  assign \$2  = \$3 ;
  assign \$13  = \$14 ;
  assign { dec_st_r__addr, dec_st_r__mux } = \$11 ;
  assign { dec_ld_b__addr, dec_ld_b__mux } = dec_o_ld_b;
  assign { dec_ld_a__addr, dec_ld_a__mux } = dec_o_ld_a;
  assign shift_i_shamt = s_b[3:0];
  assign arb_i_data = alsru_o_o;
  assign pc_i_addr = alsru_o_o;
  assign alsru_i_b = s_b;
  assign alsru_i_a = r_a;
  assign alsru_c_dir = dec_o_dir;
  assign arb_i_ptr = \$3 [15:0];
  assign arb_i_rsd = dec_o_rsd;
  assign arb_i_rb = dec_o_rb;
  assign arb_i_ra = dec_o_ra;
  assign arb_i_w = r_w;
  assign arb_i_pc = pc_r_addr;
  assign csel_c_cond = dec_o_cond;
  assign { csel_i_f__v, csel_i_f__c, csel_i_f__s, csel_i_f__z } = { r_f__v, r_f__c, r_f__s, r_f__z };
  assign dec_c_cycle = r_cycle;
  assign dec_i_pc = pc_r_addr;
  assign o_pc = pc_r_addr;
  assign memory_w_en = arb_o_mem_we;
  assign memory_w_data = arb_o_mem_data;
  assign memory_w_addr = o_bus_addr[8:0];
  assign memory_r_en = arb_o_mem_re;
  assign arb_i_mem_data = memory_r_data;
  assign memory_r_addr = o_bus_addr[8:0];
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.crc" *)
(* generator = "nMigen" *)
module crc(clk, csr__addr, csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *)
  wire \$1 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:56" *)
  wire [15:0] \$10 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *)
  wire \$12 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" *)
  wire \$14 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:62" *)
  wire [15:0] \$16 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:62" *)
  wire [15:0] \$18 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:62" *)
  wire [15:0] \$20 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *)
  wire \$22 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" *)
  wire \$24 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" *)
  wire \$3 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:61" *)
  wire [5:0] \$5 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:61" *)
  wire [5:0] \$6 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:50" *)
  wire [15:0] \$8 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:42" *)
  reg [4:0] bit_counter = 5'h00;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:42" *)
  reg [4:0] \bit_counter$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [7:0] bridge_crc_byte__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_crc_byte__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg [15:0] bridge_crc_crc__r_data = 16'h0000;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg [15:0] \bridge_crc_crc__r_data$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_crc_reset__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [15:0] bridge_crc_word__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_crc_word__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:43" *)
  reg [15:0] crc = 16'h0000;
  (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:43" *)
  reg [15:0] \crc$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  assign \$10  = crc ^ (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:56" *) bridge_crc_word__w_data;
  assign \$12  = bit_counter > (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *) 1'h0;
  assign \$14  = bit_counter == (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" *) 1'h0;
  assign \$16  = crc >>> (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:62" *) 1'h1;
  assign \$18  = crc[0] ? (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:62" *) 16'h8408 : 16'h0000;
  assign \$1  = bit_counter > (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *) 1'h0;
  assign \$20  = \$16  ^ (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:62" *) \$18 ;
  assign \$22  = bit_counter > (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *) 1'h0;
  assign \$24  = bit_counter == (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" *) 1'h0;
  assign \$3  = bit_counter == (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" *) 1'h0;
  assign \$6  = bit_counter - (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:61" *) 1'h1;
  assign \$8  = crc ^ (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:50" *) bridge_crc_byte__w_data;
  always @(posedge clk)
    bridge_crc_crc__r_data <= \bridge_crc_crc__r_data$next ;
  always @(posedge clk)
    crc <= \crc$next ;
  always @(posedge clk)
    bit_counter <= \bit_counter$next ;
  \bridge$6  bridge (
    .clk(clk),
    .crc_byte__w_data(bridge_crc_byte__w_data),
    .crc_byte__w_stb(bridge_crc_byte__w_stb),
    .crc_crc__r_data(bridge_crc_crc__r_data),
    .crc_reset__w_stb(bridge_crc_reset__w_stb),
    .crc_word__w_data(bridge_crc_word__w_data),
    .crc_word__w_stb(bridge_crc_word__w_stb),
    .csr__addr(csr__addr),
    .csr__r_data(csr__r_data),
    .csr__r_stb(csr__r_stb),
    .csr__w_data(csr__w_data),
    .csr__w_stb(csr__w_stb),
    .rst(rst)
  );
  always @* begin
    if (\initial ) begin end
    \bit_counter$next  = bit_counter;
    (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:45" *)
    casez ({ bridge_crc_word__w_stb, bridge_crc_byte__w_stb, bridge_crc_reset__w_stb })
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:45" */
      3'b??1:
          \bit_counter$next  = 5'h00;
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:47" */
      3'b?1?:
          \bit_counter$next  = 5'h08;
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:53" */
      3'b1??:
          \bit_counter$next  = 5'h10;
    endcase
    (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *)
    casez ({ \$3 , \$1  })
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" */
      2'b?1:
          \bit_counter$next  = \$5 [4:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \bit_counter$next  = 5'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc$next  = crc;
    (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:45" *)
    casez ({ bridge_crc_word__w_stb, bridge_crc_byte__w_stb, bridge_crc_reset__w_stb })
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:45" */
      3'b??1:
          \crc$next  = 16'h0000;
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:47" */
      3'b?1?:
          \crc$next  = \$8 ;
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:53" */
      3'b1??:
          \crc$next  = \$10 ;
    endcase
    (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *)
    casez ({ \$14 , \$12  })
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" */
      2'b?1:
          \crc$next  = \$20 ;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \bridge_crc_crc__r_data$next  = bridge_crc_crc__r_data;
    (* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" *)
    casez ({ \$24 , \$22  })
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:59" */
      2'b?1:
          /* empty */;
      /* src = "/opt/FPGA/spork/spork/peripheral/kermit_crc.py:64" */
      2'b1?:
          \bridge_crc_crc__r_data$next  = crc;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \bridge_crc_crc__r_data$next  = 16'h0000;
    endcase
  end
  assign \$5  = \$6 ;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.csel" *)
(* generator = "nMigen" *)
module csel(i_f__s, i_f__c, i_f__v, c_cond, o_flag, i_f__z);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:51" *)
  wire \$1 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:51" *)
  wire \$3 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:53" *)
  wire \$5 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:55" *)
  wire \$7 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:55" *)
  wire \$9 ;
  (* enum_base_type = "Cond" *)
  (* enum_value_000 = "Z" *)
  (* enum_value_001 = "S" *)
  (* enum_value_010 = "C" *)
  (* enum_value_011 = "V" *)
  (* enum_value_100 = "nCoZ" *)
  (* enum_value_101 = "SxV" *)
  (* enum_value_110 = "SxVoZ" *)
  (* enum_value_111 = "A" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:35" *)
  input [2:0] c_cond;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  input i_f__c;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  input i_f__s;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  input i_f__v;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:34" *)
  input i_f__z;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:36" *)
  output o_flag;
  reg o_flag;
  assign \$9  = \$7  | (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:55" *) i_f__z;
  assign \$1  = ~ (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:51" *) i_f__c;
  assign \$3  = \$1  | (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:51" *) i_f__z;
  assign \$5  = i_f__s ^ (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:53" *) i_f__v;
  assign \$7  = i_f__s ^ (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:55" *) i_f__v;
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:41" *)
    casez (c_cond)
      /* \nmigen.decoding  = "Z/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:42" */
      3'h0:
          o_flag = i_f__z;
      /* \nmigen.decoding  = "S/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:44" */
      3'h1:
          o_flag = i_f__s;
      /* \nmigen.decoding  = "C/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:46" */
      3'h2:
          o_flag = i_f__c;
      /* \nmigen.decoding  = "V/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:48" */
      3'h3:
          o_flag = i_f__v;
      /* \nmigen.decoding  = "nCoZ/4" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:50" */
      3'h4:
          o_flag = \$3 ;
      /* \nmigen.decoding  = "SxV/5" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:52" */
      3'h5:
          o_flag = \$5 ;
      /* \nmigen.decoding  = "SxVoZ/6" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:54" */
      3'h6:
          o_flag = \$9 ;
      /* \nmigen.decoding  = "A/7" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:56" */
      3'h7:
          o_flag = 1'h1;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.bridge.csr_mux_0" *)
(* generator = "nMigen" *)
module csr_mux_0(clk, serial_divisor__r_data, serial_divisor__w_stb, serial_divisor__w_data, serial_rx_data__r_data, serial_rx_data__r_stb, serial_rx_rdy__r_data, serial_rx_err__r_data, serial_tx_data__w_stb, serial_tx_data__w_data, serial_tx_rdy__r_data, csr__addr, csr__r_stb, csr__w_stb, csr__w_data, csr__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$10 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$11 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$13 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$14 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$16 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$17 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$19 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$21 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$23 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire \$25 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$27 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$29 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$31 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire \$33 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [7:0] \$35 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$7 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$8 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [7:0] serial_divisor__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg serial_divisor__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] serial_divisor__shadow = 8'h00;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] \serial_divisor__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_divisor__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_divisor__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [7:0] serial_divisor__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output serial_divisor__w_stb;
  reg serial_divisor__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \serial_divisor__w_stb$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [7:0] serial_rx_data__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output serial_rx_data__r_stb;
  reg serial_rx_data__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] serial_rx_data__shadow = 8'h00;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] \serial_rx_data__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_rx_data__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_rx_data__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [2:0] serial_rx_err__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg serial_rx_err__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] serial_rx_err__shadow = 3'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] \serial_rx_err__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_rx_err__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_rx_err__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input serial_rx_rdy__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg serial_rx_rdy__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg serial_rx_rdy__shadow = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg \serial_rx_rdy__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_rx_rdy__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_rx_rdy__shadow_en$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] serial_tx_data__shadow = 8'h00;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] \serial_tx_data__shadow$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [7:0] serial_tx_data__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output serial_tx_data__w_stb;
  reg serial_tx_data__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \serial_tx_data__w_stb$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input serial_tx_rdy__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg serial_tx_rdy__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg serial_tx_rdy__shadow = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg \serial_tx_rdy__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_tx_rdy__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_tx_rdy__shadow_en$next ;
  assign \$11  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$14  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$17  = serial_divisor__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_divisor__shadow : 8'h00;
  assign \$19  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$17 ;
  assign \$21  = serial_rx_data__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_rx_data__shadow : 8'h00;
  assign \$23  = \$19  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$21 ;
  assign \$25  = serial_rx_rdy__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_rx_rdy__shadow : 1'h0;
  assign \$27  = \$23  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$25 ;
  assign \$2  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$29  = serial_rx_err__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_rx_err__shadow : 3'h0;
  assign \$31  = \$27  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$29 ;
  assign \$33  = serial_tx_rdy__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_tx_rdy__shadow : 1'h0;
  assign \$35  = \$31  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$33 ;
  assign \$16  = + (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$35 ;
  assign \$5  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$8  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  always @(posedge clk)
    serial_tx_rdy__shadow <= \serial_tx_rdy__shadow$next ;
  always @(posedge clk)
    serial_tx_rdy__shadow_en <= \serial_tx_rdy__shadow_en$next ;
  always @(posedge clk)
    serial_tx_data__shadow <= \serial_tx_data__shadow$next ;
  always @(posedge clk)
    serial_tx_data__w_stb <= \serial_tx_data__w_stb$next ;
  always @(posedge clk)
    serial_rx_err__shadow <= \serial_rx_err__shadow$next ;
  always @(posedge clk)
    serial_rx_err__shadow_en <= \serial_rx_err__shadow_en$next ;
  always @(posedge clk)
    serial_rx_rdy__shadow <= \serial_rx_rdy__shadow$next ;
  always @(posedge clk)
    serial_rx_rdy__shadow_en <= \serial_rx_rdy__shadow_en$next ;
  always @(posedge clk)
    serial_rx_data__shadow <= \serial_rx_data__shadow$next ;
  always @(posedge clk)
    serial_rx_data__shadow_en <= \serial_rx_data__shadow_en$next ;
  always @(posedge clk)
    serial_divisor__shadow <= \serial_divisor__shadow$next ;
  always @(posedge clk)
    serial_divisor__w_stb <= \serial_divisor__w_stb$next ;
  always @(posedge clk)
    serial_divisor__shadow_en <= \serial_divisor__shadow_en$next ;
  always @* begin
    if (\initial ) begin end
    \serial_divisor__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h0:
          \serial_divisor__shadow_en$next  = \$1 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_divisor__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_rx_rdy__shadow$next  = serial_rx_rdy__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h2:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_rx_rdy__shadow$next  = serial_rx_rdy__r_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_rx_rdy__shadow$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_rx_err__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h3:
          \serial_rx_err__shadow_en$next  = \$10 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_rx_err__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_rx_err__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h3:
          serial_rx_err__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_rx_err__shadow$next  = serial_rx_err__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h3:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_rx_err__shadow$next  = serial_rx_err__r_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_rx_err__shadow$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_tx_data__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h4:
          \serial_tx_data__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_tx_data__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_tx_data__shadow$next  = serial_tx_data__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h4:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \serial_tx_data__shadow$next  = csr__w_data[7:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_tx_data__shadow$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_tx_rdy__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h5:
          \serial_tx_rdy__shadow_en$next  = \$13 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_tx_rdy__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_tx_rdy__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h5:
          serial_tx_rdy__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_tx_rdy__shadow$next  = serial_tx_rdy__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h5:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_tx_rdy__shadow$next  = serial_tx_rdy__r_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_tx_rdy__shadow$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_divisor__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h0:
          \serial_divisor__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_divisor__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_divisor__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h0:
          serial_divisor__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_divisor__shadow$next  = serial_divisor__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h0:
        begin
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_divisor__shadow$next  = serial_divisor__r_data;
          endcase
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \serial_divisor__shadow$next  = csr__w_data[7:0];
          endcase
        end
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_divisor__shadow$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_rx_data__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h1:
          \serial_rx_data__shadow_en$next  = \$4 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_rx_data__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_rx_data__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h1:
          serial_rx_data__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_rx_data__shadow$next  = serial_rx_data__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h1:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_rx_data__shadow$next  = serial_rx_data__r_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_rx_data__shadow$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_rx_rdy__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h2:
          \serial_rx_rdy__shadow_en$next  = \$7 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_rx_rdy__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_rx_rdy__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      3'h2:
          serial_rx_rdy__r_stb = csr__r_stb;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign \$7  = \$8 ;
  assign \$10  = \$11 ;
  assign \$13  = \$14 ;
  assign csr__r_data = \$16 ;
  assign serial_tx_data__w_data = serial_tx_data__shadow;
  assign serial_divisor__w_data = serial_divisor__shadow;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.statusled.bridge.csr_mux_0" *)
(* generator = "nMigen" *)
module \csr_mux_0$4 (clk, statusled_en__w_data, statusled_led__w_data, csr__addr, csr__r_stb, csr__w_stb, csr__w_data, csr__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire \$11 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$13 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$7 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$9 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire statusled_en__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg statusled_en__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg statusled_en__shadow = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg \statusled_en__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg statusled_en__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \statusled_en__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output statusled_en__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg statusled_en__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \statusled_en__w_stb$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [15:0] statusled_led__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg statusled_led__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [15:0] statusled_led__shadow = 16'h0000;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [15:0] \statusled_led__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg statusled_led__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \statusled_led__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [15:0] statusled_led__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg statusled_led__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \statusled_led__w_stb$next ;
  assign \$9  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$7 ;
  assign \$11  = statusled_en__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) statusled_en__shadow : 1'h0;
  assign \$13  = \$9  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$11 ;
  assign \$2  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$5  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$7  = statusled_led__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) statusled_led__shadow : 16'h0000;
  always @(posedge clk)
    statusled_en__shadow <= \statusled_en__shadow$next ;
  always @(posedge clk)
    statusled_en__w_stb <= \statusled_en__w_stb$next ;
  always @(posedge clk)
    statusled_en__shadow_en <= \statusled_en__shadow_en$next ;
  always @(posedge clk)
    statusled_led__shadow <= \statusled_led__shadow$next ;
  always @(posedge clk)
    statusled_led__w_stb <= \statusled_led__w_stb$next ;
  always @(posedge clk)
    statusled_led__shadow_en <= \statusled_led__shadow_en$next ;
  always @* begin
    if (\initial ) begin end
    \statusled_led__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h0:
          \statusled_led__shadow_en$next  = \$1 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \statusled_led__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \statusled_led__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h0:
          \statusled_led__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \statusled_led__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    statusled_led__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h0:
          statusled_led__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \statusled_led__shadow$next  = statusled_led__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h0:
        begin
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \statusled_led__shadow$next  = statusled_led__r_data;
          endcase
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \statusled_led__shadow$next  = csr__w_data;
          endcase
        end
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \statusled_led__shadow$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \statusled_en__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h1:
          \statusled_en__shadow_en$next  = \$4 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \statusled_en__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \statusled_en__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h1:
          \statusled_en__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \statusled_en__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    statusled_en__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h1:
          statusled_en__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \statusled_en__shadow$next  = statusled_en__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      1'h1:
        begin
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \statusled_en__shadow$next  = statusled_en__r_data;
          endcase
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \statusled_en__shadow$next  = csr__w_data[0];
          endcase
        end
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \statusled_en__shadow$next  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign statusled_led__r_data = 16'h0000;
  assign statusled_en__r_data = 1'h0;
  assign csr__r_data = \$13 ;
  assign statusled_en__w_data = statusled_en__shadow;
  assign statusled_led__w_data = statusled_led__shadow;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.crc.bridge.csr_mux_0" *)
(* generator = "nMigen" *)
module \csr_mux_0$7 (clk, crc_reset__w_stb, crc_byte__w_stb, crc_word__w_stb, crc_byte__w_data, crc_word__w_data, crc_crc__r_data, csr__addr, csr__w_stb, csr__w_data, csr__r_stb, csr__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$6 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] crc_byte__shadow = 8'h00;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [7:0] \crc_byte__shadow$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [7:0] crc_byte__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output crc_byte__w_stb;
  reg crc_byte__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \crc_byte__w_stb$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  input [15:0] crc_crc__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg crc_crc__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [15:0] crc_crc__shadow = 16'h0000;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [15:0] \crc_crc__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg crc_crc__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \crc_crc__shadow_en$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg crc_reset__shadow = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg \crc_reset__shadow$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire crc_reset__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output crc_reset__w_stb;
  reg crc_reset__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \crc_reset__w_stb$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [15:0] crc_word__shadow = 16'h0000;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [15:0] \crc_word__shadow$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output [15:0] crc_word__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  output crc_word__w_stb;
  reg crc_word__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  reg \crc_word__w_stb$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [1:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  assign \$2  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$4  = crc_crc__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) crc_crc__shadow : 16'h0000;
  assign \$6  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$4 ;
  always @(posedge clk)
    crc_reset__shadow <= \crc_reset__shadow$next ;
  always @(posedge clk)
    crc_reset__w_stb <= \crc_reset__w_stb$next ;
  always @(posedge clk)
    crc_crc__shadow <= \crc_crc__shadow$next ;
  always @(posedge clk)
    crc_crc__shadow_en <= \crc_crc__shadow_en$next ;
  always @(posedge clk)
    crc_word__shadow <= \crc_word__shadow$next ;
  always @(posedge clk)
    crc_word__w_stb <= \crc_word__w_stb$next ;
  always @(posedge clk)
    crc_byte__shadow <= \crc_byte__shadow$next ;
  always @(posedge clk)
    crc_byte__w_stb <= \crc_byte__w_stb$next ;
  always @* begin
    if (\initial ) begin end
    \crc_reset__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h0:
          \crc_reset__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_reset__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    crc_crc__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h3:
          crc_crc__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_crc__shadow$next  = crc_crc__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h3:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \crc_crc__shadow$next  = crc_crc__r_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_crc__shadow$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_reset__shadow$next  = crc_reset__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h0:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \crc_reset__shadow$next  = csr__w_data[0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_reset__shadow$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_byte__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h1:
          \crc_byte__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_byte__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_byte__shadow$next  = crc_byte__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h1:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \crc_byte__shadow$next  = csr__w_data[7:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_byte__shadow$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_word__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h2:
          \crc_word__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_word__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_word__shadow$next  = crc_word__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h2:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \crc_word__shadow$next  = csr__w_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_word__shadow$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_crc__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h3:
          \crc_crc__shadow_en$next  = \$1 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \crc_crc__shadow_en$next  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign csr__r_data = \$6 ;
  assign crc_word__w_data = crc_word__shadow;
  assign crc_byte__w_data = crc_byte__shadow;
  assign crc_reset__w_data = crc_reset__shadow;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.bridge.csr_mux_1" *)
(* generator = "nMigen" *)
module csr_mux_1(clk, csr__addr, csr__r_stb, serial_ev_status__r_data, serial_ev_pending__w_data, serial_ev_pending__w_stb, serial_ev_pending__r_data, csr__w_stb, csr__w_data, serial_ev_enable__w_data, serial_ev_enable__w_stb, serial_ev_enable__r_data, csr__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [15:0] \$10 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$11 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$13 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$15 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$17 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$19 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *)
  wire [2:0] \$21 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$7 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *)
  wire [1:0] \$8 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [1:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  input [2:0] serial_ev_enable__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  reg serial_ev_enable__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] serial_ev_enable__shadow = 3'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] \serial_ev_enable__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_ev_enable__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_ev_enable__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  output [2:0] serial_ev_enable__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  output serial_ev_enable__w_stb;
  reg serial_ev_enable__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:115" *)
  reg \serial_ev_enable__w_stb$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  input [2:0] serial_ev_pending__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  reg serial_ev_pending__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] serial_ev_pending__shadow = 3'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] \serial_ev_pending__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_ev_pending__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_ev_pending__shadow_en$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  output [2:0] serial_ev_pending__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  output serial_ev_pending__w_stb;
  reg serial_ev_pending__w_stb = 1'h0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:114" *)
  reg \serial_ev_pending__w_stb$next ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:113" *)
  input [2:0] serial_ev_status__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:113" *)
  reg serial_ev_status__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] serial_ev_status__shadow = 3'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:269" *)
  reg [2:0] \serial_ev_status__shadow$next ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg serial_ev_status__shadow_en = 1'h0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:271" *)
  reg \serial_ev_status__shadow_en$next ;
  assign \$11  = serial_ev_status__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_ev_status__shadow : 3'h0;
  assign \$13  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$11 ;
  assign \$15  = serial_ev_pending__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_ev_pending__shadow : 3'h0;
  assign \$17  = \$13  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$15 ;
  assign \$19  = serial_ev_enable__shadow_en ? (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) serial_ev_enable__shadow : 3'h0;
  assign \$21  = \$17  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$19 ;
  assign \$10  = + (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:287" *) \$21 ;
  assign \$2  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$5  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  assign \$8  = csr__r_stb <<< (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:293" *) 1'h0;
  always @(posedge clk)
    serial_ev_enable__shadow <= \serial_ev_enable__shadow$next ;
  always @(posedge clk)
    serial_ev_enable__w_stb <= \serial_ev_enable__w_stb$next ;
  always @(posedge clk)
    serial_ev_enable__shadow_en <= \serial_ev_enable__shadow_en$next ;
  always @(posedge clk)
    serial_ev_pending__shadow <= \serial_ev_pending__shadow$next ;
  always @(posedge clk)
    serial_ev_pending__w_stb <= \serial_ev_pending__w_stb$next ;
  always @(posedge clk)
    serial_ev_pending__shadow_en <= \serial_ev_pending__shadow_en$next ;
  always @(posedge clk)
    serial_ev_status__shadow <= \serial_ev_status__shadow$next ;
  always @(posedge clk)
    serial_ev_status__shadow_en <= \serial_ev_status__shadow_en$next ;
  always @* begin
    if (\initial ) begin end
    \serial_ev_status__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h0:
          \serial_ev_status__shadow_en$next  = \$1 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_status__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_ev_status__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h0:
          serial_ev_status__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_enable__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h2:
          \serial_ev_enable__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_enable__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_ev_enable__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h2:
          serial_ev_enable__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_enable__shadow$next  = serial_ev_enable__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h2:
        begin
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_ev_enable__shadow$next  = serial_ev_enable__r_data;
          endcase
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \serial_ev_enable__shadow$next  = csr__w_data[2:0];
          endcase
        end
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_enable__shadow$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_status__shadow$next  = serial_ev_status__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h0:
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_ev_status__shadow$next  = serial_ev_status__r_data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_status__shadow$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_pending__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h1:
          \serial_ev_pending__shadow_en$next  = \$4 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_pending__shadow_en$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_pending__w_stb$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h1:
          \serial_ev_pending__w_stb$next  = csr__w_stb;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_pending__w_stb$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    serial_ev_pending__r_stb = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h1:
          serial_ev_pending__r_stb = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_pending__shadow$next  = serial_ev_pending__shadow;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h1:
        begin
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" *)
          casez (csr__r_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:290" */
            1'h1:
                \serial_ev_pending__shadow$next  = serial_ev_pending__r_data;
          endcase
          (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" *)
          casez (csr__w_stb)
            /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:300" */
            1'h1:
                \serial_ev_pending__shadow$next  = csr__w_data[2:0];
          endcase
        end
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_pending__shadow$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \serial_ev_enable__shadow_en$next  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:281" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:285" */
      2'h2:
          \serial_ev_enable__shadow_en$next  = \$7 [0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \serial_ev_enable__shadow_en$next  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign \$7  = \$8 ;
  assign csr__r_data = \$10 ;
  assign serial_ev_enable__w_data = serial_ev_enable__shadow;
  assign serial_ev_pending__w_data = serial_ev_pending__shadow;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.dec" *)
(* generator = "nMigen" *)
module dec(c_cycle, o_cond, o_ra, o_rb, o_rsd, o_imm16, o_op, o_dir, o_jcc, o_flag, o_ci, o_si, o_ld_a, o_ld_b, o_st_r, i_insn, c_fetch, o_skip, o_xbus, o_st_f__zs, o_st_f__cv, o_st_w, o_shift, o_multi, o_st_pc, rst, clk, i_pc);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" *)
  wire \$1 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:319" *)
  wire \$11 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:422" *)
  wire \$13 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" *)
  wire \$15 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:445" *)
  wire \$17 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" *)
  wire \$19 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:482" *)
  wire \$21 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" *)
  wire \$23 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" *)
  wire \$3 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" *)
  wire \$5 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:466" *)
  wire \$7 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:468" *)
  wire \$9 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:148" *)
  input c_cycle;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:147" *)
  input c_fetch;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:145" *)
  input [15:0] i_insn;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:144" *)
  input [15:0] i_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:30" *)
  reg imm_c_exti;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:33" *)
  reg imm_c_pcrel;
  (* enum_base_type = "Table" *)
  (* enum_value_0 = "SR" *)
  (* enum_value_1 = "AL" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:31" *)
  reg imm_c_table;
  (* enum_base_type = "Width" *)
  (* enum_value_00 = "IMM3" *)
  (* enum_value_01 = "IMM5" *)
  (* enum_value_10 = "IMM8" *)
  (* enum_value_11 = "IMM16" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:32" *)
  reg [1:0] imm_c_width;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:27" *)
  wire [15:0] imm_i_insn;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:26" *)
  wire [15:0] imm_i_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:28" *)
  wire [15:0] imm_o_imm16;
  (* enum_base_type = "CI" *)
  (* enum_value_00 = "ZERO" *)
  (* enum_value_01 = "ONE" *)
  (* enum_value_10 = "FLAG" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:172" *)
  output [1:0] o_ci;
  reg [1:0] o_ci;
  (* enum_base_type = "Cond" *)
  (* enum_value_000 = "Z" *)
  (* enum_value_001 = "S" *)
  (* enum_value_010 = "C" *)
  (* enum_value_011 = "V" *)
  (* enum_value_100 = "nCoZ" *)
  (* enum_value_101 = "SxV" *)
  (* enum_value_110 = "SxVoZ" *)
  (* enum_value_111 = "A" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:154" *)
  output [2:0] o_cond;
  reg [2:0] o_cond;
  (* enum_base_type = "Dir" *)
  (* enum_value_0 = "L" *)
  (* enum_value_1 = "R" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:171" *)
  output o_dir;
  reg o_dir;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:155" *)
  output o_flag;
  reg o_flag;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:150" *)
  output [15:0] o_imm16;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:160" *)
  output o_jcc;
  reg o_jcc;
  (* enum_base_type = "LdA" *)
  (* enum_value_0000 = "ZERO" *)
  (* enum_value_0001 = "PCp1" *)
  (* enum_value_0010 = "W" *)
  (* enum_value_0111 = "RSD" *)
  (* enum_value_1111 = "RA" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:163" *)
  output [3:0] o_ld_a;
  reg [3:0] o_ld_a;
  (* enum_base_type = "LdB" *)
  (* enum_value_000 = "IMM" *)
  (* enum_value_001 = "IND" *)
  (* enum_value_011 = "RSD" *)
  (* enum_value_101 = "RB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:164" *)
  output [2:0] o_ld_b;
  reg [2:0] o_ld_b;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:158" *)
  output o_multi;
  reg o_multi;
  (* enum_base_type = "Op" *)
  (* enum_value_00000 = "A" *)
  (* enum_value_00001 = "AaB" *)
  (* enum_value_00010 = "AoB" *)
  (* enum_value_00011 = "AxB" *)
  (* enum_value_01000 = "ApB" *)
  (* enum_value_01100 = "AmB" *)
  (* enum_value_10100 = "SLR" *)
  (* enum_value_11000 = "B" *)
  (* enum_value_11100 = "nB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:170" *)
  output [4:0] o_op;
  reg [4:0] o_op;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:152" *)
  output [2:0] o_ra;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:153" *)
  output [2:0] o_rb;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:151" *)
  output [2:0] o_rsd;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:157" *)
  output o_shift;
  reg o_shift;
  (* enum_base_type = "SI" *)
  (* enum_value_0 = "ZERO" *)
  (* enum_value_1 = "MSB" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:173" *)
  output o_si;
  reg o_si;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:161" *)
  output o_skip;
  reg o_skip;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:166" *)
  output o_st_f__cv;
  reg o_st_f__cv;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:166" *)
  output o_st_f__zs;
  reg o_st_f__zs;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:168" *)
  output o_st_pc;
  reg o_st_pc;
  (* enum_base_type = "StR" *)
  (* enum_value_00 = "x" *)
  (* enum_value_01 = "IND" *)
  (* enum_value_11 = "RSD" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:165" *)
  output [1:0] o_st_r;
  reg [1:0] o_st_r;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:167" *)
  output o_st_w;
  reg o_st_w;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:159" *)
  output o_xbus;
  reg o_xbus;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:175" *)
  reg r_exti = 1'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:175" *)
  reg \r_exti$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  assign \$9  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:468" *) 1'h1;
  assign \$11  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:319" *) 1'h0;
  assign \$13  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:422" *) 1'h1;
  assign \$15  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" *) 1'h0;
  assign \$17  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:445" *) 1'h1;
  assign \$1  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" *) 1'h0;
  assign \$19  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" *) 1'h0;
  assign \$21  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:482" *) 1'h1;
  assign \$23  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" *) 1'h0;
  assign \$3  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" *) 1'h0;
  assign \$5  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" *) 1'h0;
  assign \$7  = c_cycle == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:466" *) 1'h0;
  always @(posedge clk)
    r_exti <= \r_exti$next ;
  imm imm (
    .c_exti(imm_c_exti),
    .c_pcrel(imm_c_pcrel),
    .c_table(imm_c_table),
    .c_width(imm_c_width),
    .clk(clk),
    .i_insn(imm_i_insn),
    .i_pc(imm_i_pc),
    .o_imm16(imm_o_imm16),
    .rst(rst)
  );
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:231" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:232" */
      16'b????????????0???:
          o_si = 1'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:234" */
      16'b????????????1???:
          o_si = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    imm_c_width = 2'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          imm_c_width = 2'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          imm_c_width = 2'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          imm_c_width = 2'h0;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          imm_c_width = 2'h1;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:352" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:353" */
            16'b????0???????????:
                imm_c_width = 2'h1;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:358" */
            16'b????1???????????:
                imm_c_width = 2'h2;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          imm_c_width = 2'h2;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          imm_c_width = 2'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          imm_c_width = 2'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          imm_c_width = 2'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          imm_c_width = 2'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          imm_c_width = 2'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          imm_c_width = 2'h2;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          imm_c_width = 2'h2;
    endcase
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:509" *)
    casez (r_exti)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:509" */
      1'h1:
          imm_c_width = 2'h3;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_ld_a = 4'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          o_ld_a = 4'hf;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          o_ld_a = 4'hf;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          o_ld_a = 4'hf;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          o_ld_a = 4'hf;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:352" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:353" */
            16'b????0???????????:
                o_ld_a = 4'hf;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:358" */
            16'b????1???????????:
                o_ld_a = 4'h0;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          o_ld_a = 4'h0;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          o_ld_a = 4'h2;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          o_ld_a = 4'h7;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          o_ld_a = 4'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          o_ld_a = 4'h7;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          o_ld_a = 4'h7;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          o_ld_a = 4'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          o_ld_a = 4'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_st_r = 2'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
        begin
          o_st_r = 2'h3;
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:250" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:251" */
            16'b???????????00???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:255" */
            16'b???????????01???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:259" */
            16'b???????????10???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:263" */
            16'b???????????11???:
                o_st_r = 2'h0;
          endcase
        end
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          o_st_r = 2'h3;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          o_st_r = 2'h3;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:335" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:336" */
            16'h4???:
                o_st_r = 2'h3;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:341" */
            16'h5???:
                o_st_r = 2'h1;
          endcase
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:363" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:364" */
            16'h6???:
                o_st_r = 2'h3;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:369" */
            16'h7???:
                o_st_r = 2'h1;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          o_st_r = 2'h3;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
        begin
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:396" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:397" */
            16'b10100???000?????:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:402" */
            16'b10100???001?????:
                o_st_r = 2'h3;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:408" */
            16'b10100???010?????:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:413" */
            16'b10100???011?????:
                o_st_r = 2'h3;
          endcase
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" *)
          casez (\$1 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" */
            1'h1:
                o_st_r = 2'h0;
          endcase
        end
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" *)
          casez (\$3 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" */
            1'h1:
                o_st_r = 2'h3;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" *)
          casez (\$5 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" */
            1'h1:
                o_st_r = 2'h3;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_st_f__zs = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          o_st_f__zs = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          o_st_f__zs = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          o_st_f__zs = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_ld_b = 3'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:245" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:246" */
            16'b????0???????????:
                o_ld_b = 3'h5;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:248" */
            16'b????1???????????:
                o_ld_b = 3'h0;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:279" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:280" */
            16'b????0???????????:
                o_ld_b = 3'h5;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:282" */
            16'b????1???????????:
                o_ld_b = 3'h0;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:314" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:315" */
            16'b????0???????????:
                o_ld_b = 3'h5;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:317" */
            16'b????1???????????:
                o_ld_b = 3'h0;
          endcase
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:335" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:336" */
            16'h4???:
                o_ld_b = 3'h1;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:341" */
            16'h5???:
                o_ld_b = 3'h3;
          endcase
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:363" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:364" */
            16'h6???:
                o_ld_b = 3'h1;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:369" */
            16'h7???:
                o_ld_b = 3'h3;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          o_ld_b = 3'h0;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:396" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:397" */
            16'b10100???000?????:
                o_ld_b = 3'h5;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:402" */
            16'b10100???001?????:
                o_ld_b = 3'h5;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:408" */
            16'b10100???010?????:
                o_ld_b = 3'h0;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:413" */
            16'b10100???011?????:
                o_ld_b = 3'h0;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          o_ld_b = 3'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          o_ld_b = 3'h5;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          o_ld_b = 3'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
        begin
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:466" *)
          casez (\$7 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:466" */
            1'h1:
                o_ld_b = 3'h1;
          endcase
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:468" *)
          casez (\$9 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:468" */
            1'h1:
                o_ld_b = 3'h0;
          endcase
        end
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          o_ld_b = 3'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          o_ld_b = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_op = 5'h00;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:250" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:251" */
            16'b???????????00???:
                o_op = 5'h01;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:255" */
            16'b???????????01???:
                o_op = 5'h02;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:259" */
            16'b???????????10???:
                o_op = 5'h03;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:263" */
            16'b???????????11???:
                o_op = 5'h0c;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:284" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:285" */
            16'b???????????00???:
                o_op = 5'h08;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:290" */
            16'b???????????01???:
                o_op = 5'h08;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:295" */
            16'b???????????10???:
                o_op = 5'h0c;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:300" */
            16'b???????????11???:
                o_op = 5'h0c;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:319" *)
          casez (\$11 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:319" */
            1'h1:
                o_op = 5'h00;
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:321" */
            default:
                o_op = 5'h14;
          endcase
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          o_op = 5'h18;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          o_op = 5'h18;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          o_op = 5'h18;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
        begin
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:396" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:397" */
            16'b10100???000?????:
                o_op = 5'h18;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:402" */
            16'b10100???001?????:
                o_op = 5'h18;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:408" */
            16'b10100???010?????:
                o_op = 5'h08;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:413" */
            16'b10100???011?????:
                o_op = 5'h08;
          endcase
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:422" *)
          casez (\$13 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:422" */
            1'h1:
                o_op = 5'h00;
          endcase
        end
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          o_op = 5'h08;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
        begin
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" *)
          casez (\$15 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:442" */
            1'h1:
                o_op = 5'h00;
          endcase
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:445" *)
          casez (\$17 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:445" */
            1'h1:
                o_op = 5'h18;
          endcase
        end
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          o_op = 5'h08;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          o_op = 5'h08;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
        begin
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" *)
          casez (\$19 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:479" */
            1'h1:
                o_op = 5'h00;
          endcase
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:482" *)
          casez (\$21 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:482" */
            1'h1:
                o_op = 5'h08;
          endcase
        end
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          o_op = 5'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_ci = 2'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:250" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:251" */
            16'b???????????00???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:255" */
            16'b???????????01???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:259" */
            16'b???????????10???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:263" */
            16'b???????????11???:
                o_ci = 2'h1;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:284" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:285" */
            16'b???????????00???:
                o_ci = 2'h0;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:290" */
            16'b???????????01???:
                o_ci = 2'h2;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:295" */
            16'b???????????10???:
                o_ci = 2'h1;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:300" */
            16'b???????????11???:
                o_ci = 2'h2;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_st_f__cv = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:250" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:251" */
            16'b???????????00???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:255" */
            16'b???????????01???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:259" */
            16'b???????????10???:
                /* empty */;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:263" */
            16'b???????????11???:
                o_st_f__cv = 1'h1;
          endcase
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          o_st_f__cv = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_shift = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          o_shift = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    imm_c_pcrel = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:330" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:331" */
            16'b????0???????????:
                imm_c_pcrel = 1'h0;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:333" */
            16'b????1???????????:
                imm_c_pcrel = 1'h1;
          endcase
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:376" *)
          casez (i_insn)
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:377" */
            16'b????0???????????:
                imm_c_pcrel = 1'h0;
            /* \nmigen.decoding  = "<multiple>" */
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:379" */
            16'b????1???????????:
                imm_c_pcrel = 1'h1;
          endcase
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          imm_c_pcrel = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_xbus = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          o_xbus = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_multi = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          o_multi = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          o_multi = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          o_multi = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          o_multi = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_st_w = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" *)
          casez (\$23 )
            /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:419" */
            1'h1:
                o_st_w = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_st_pc = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          o_st_pc = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          o_st_pc = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          o_st_pc = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          o_st_pc = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          o_st_pc = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          o_st_pc = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_jcc = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          o_jcc = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    imm_c_exti = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:495" */
      16'b110?????????????:
          imm_c_exti = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_skip = 1'h0;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:237" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:238" */
      16'h0???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:271" */
      16'h1???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:306" */
      16'h2???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:324" */
      16'h4???, 16'h5???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:347" */
      16'h6???, 16'h7???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:375" */
      16'h8???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>|<multiple>|<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:390" */
      16'b10100???000?????, 16'b10100???001?????, 16'b10100???010?????, 16'b10100???011?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:425" */
      16'b10100???100?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:434" */
      16'b10100???101?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:448" */
      16'b10100???110?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:457" */
      16'b10100???111?????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:471" */
      16'b10101???????????:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:485" */
      16'hb???:
          /* empty */;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:495" */
      16'b110?????????????:
          o_skip = 1'h1;
      /* \nmigen.decoding  = {0{1'b0}} */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:501" */
      default:
          o_skip = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_exti$next  = r_exti;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:506" *)
    casez (c_fetch)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:506" */
      1'h1:
          \r_exti$next  = imm_c_exti;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_exti$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:197" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:198" */
      16'b????0???????????:
          o_flag = 1'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:200" */
      16'b????1???????????:
          o_flag = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:202" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:203" */
      16'b?????000????????:
          o_cond = 3'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:205" */
      16'b?????001????????:
          o_cond = 3'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:207" */
      16'b?????010????????:
          o_cond = 3'h2;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:209" */
      16'b?????011????????:
          o_cond = 3'h3;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:211" */
      16'b?????100????????:
          o_cond = 3'h4;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:213" */
      16'b?????101????????:
          o_cond = 3'h5;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:215" */
      16'b?????110????????:
          o_cond = 3'h6;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:217" */
      16'b?????111????????:
          o_cond = 3'h7;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    imm_c_table = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:220" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>|<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:221" */
      16'h0???, 16'h1???:
          imm_c_table = 1'h1;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:223" */
      16'h2???:
          imm_c_table = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:226" *)
    casez (i_insn)
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:227" */
      16'b???????????0????:
          o_dir = 1'h0;
      /* \nmigen.decoding  = "<multiple>" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:229" */
      16'b???????????1????:
          o_dir = 1'h1;
    endcase
  end
  assign o_rb = i_insn[2:0];
  assign o_ra = i_insn[7:5];
  assign o_rsd = i_insn[10:8];
  assign o_imm16 = imm_o_imm16;
  assign imm_i_insn = i_insn;
  assign imm_i_pc = i_pc;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.bridge.decoder" *)
(* generator = "nMigen" *)
module decoder(csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, \csr__addr$1 , \csr__r_stb$2 , \csr__w_stb$3 , \csr__w_data$4 , \csr__r_data$5 , \csr__addr$6 , \csr__r_stb$7 , \csr__w_stb$8 , \csr__w_data$9 , \csr__r_data$10 , csr__addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$11 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$13 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [3:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [2:0] \csr__addr$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [1:0] \csr__addr$6 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] \csr__r_data$10 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] \csr__r_data$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__r_stb$2 ;
  reg \csr__r_stb$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__r_stb$7 ;
  reg \csr__r_stb$7 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] \csr__w_data$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] \csr__w_data$9 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__w_stb$3 ;
  reg \csr__w_stb$3 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__w_stb$8 ;
  reg \csr__w_stb$8 ;
  assign \$11  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$5 ;
  assign \$13  = \$11  | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$10 ;
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$2  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      4'b0???:
          \csr__r_stb$2  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$3  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      4'b0???:
          \csr__w_stb$3  = csr__w_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$7  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      4'b0???:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      4'b10??:
          \csr__r_stb$7  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$8  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      4'b0???:
          /* empty */;
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      4'b10??:
          \csr__w_stb$8  = csr__w_stb;
    endcase
  end
  assign csr__r_data = \$13 ;
  assign \csr__w_data$9  = csr__w_data;
  assign \csr__addr$6  = csr__addr[1:0];
  assign \csr__w_data$4  = csr__w_data;
  assign \csr__addr$1  = csr__addr[2:0];
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.statusled.bridge.decoder" *)
(* generator = "nMigen" *)
module \decoder$5 (csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, \csr__addr$1 , \csr__r_stb$2 , \csr__w_stb$3 , \csr__w_data$4 , \csr__r_data$5 , csr__addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$6 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__addr$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] \csr__r_data$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__r_stb$2 ;
  reg \csr__r_stb$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] \csr__w_data$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__w_stb$3 ;
  reg \csr__w_stb$3 ;
  assign \$6  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$5 ;
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$2  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      3'b00?:
          \csr__r_stb$2  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$3  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      3'b00?:
          \csr__w_stb$3  = csr__w_stb;
    endcase
  end
  assign csr__r_data = \$6 ;
  assign \csr__w_data$4  = csr__w_data;
  assign \csr__addr$1  = csr__addr[0];
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.crc.bridge.decoder" *)
(* generator = "nMigen" *)
module \decoder$8 (csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, \csr__addr$1 , \csr__w_stb$2 , \csr__w_data$3 , \csr__r_stb$4 , \csr__r_data$5 , csr__addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *)
  wire [15:0] \$6 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [1:0] \csr__addr$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  input [15:0] \csr__r_data$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__r_stb$4 ;
  reg \csr__r_stb$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output [15:0] \csr__w_data$3 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:234" *)
  output \csr__w_stb$2 ;
  reg \csr__w_stb$2 ;
  assign \$6  = 1'h0 | (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:391" *) \csr__r_data$5 ;
  always @* begin
    if (\initial ) begin end
    \csr__r_stb$4  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      3'b0??:
          \csr__r_stb$4  = csr__r_stb;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \csr__w_stb$2  = 1'h0;
    (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:382" *)
    casez (csr__addr)
      /* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:394" */
      3'b0??:
          \csr__w_stb$2  = csr__w_stb;
    endcase
  end
  assign csr__r_data = \$6 ;
  assign \csr__w_data$3  = csr__w_data;
  assign \csr__addr$1  = csr__addr[1:0];
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.dec.imm" *)
(* generator = "nMigen" *)
module imm(clk, i_pc, i_insn, o_imm16, c_table, c_width, c_pcrel, c_exti, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$1 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$10 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$12 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$14 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$16 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:67" *)
  wire [16:0] \$18 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:67" *)
  wire [16:0] \$19 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$2 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$4 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$6 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
  wire [15:0] \$8 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:30" *)
  input c_exti;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:33" *)
  input c_pcrel;
  (* enum_base_type = "Table" *)
  (* enum_value_0 = "SR" *)
  (* enum_value_1 = "AL" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:31" *)
  input c_table;
  (* enum_base_type = "Width" *)
  (* enum_value_00 = "IMM3" *)
  (* enum_value_01 = "IMM5" *)
  (* enum_value_10 = "IMM8" *)
  (* enum_value_11 = "IMM16" *)
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:32" *)
  input [1:0] c_width;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:27" *)
  input [15:0] i_insn;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:26" *)
  input [15:0] i_pc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:28" *)
  output [15:0] o_imm16;
  reg [15:0] o_imm16;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:35" *)
  reg [12:0] r_ext13 = 13'h0000;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:35" *)
  reg [12:0] \r_ext13$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:55" *)
  reg [15:0] s_imm16;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:48" *)
  reg [15:0] s_table;
  assign \$10  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h4;
  assign \$12  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h5;
  assign \$14  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h6;
  assign \$16  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h7;
  assign \$19  = s_imm16 + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:67" *) i_pc;
  assign \$2  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h8;
  assign \$4  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h1;
  assign \$6  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h2;
  assign \$8  = + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *) 4'h3;
  always @(posedge clk)
    r_ext13 <= \r_ext13$next ;
  always @* begin
    if (\initial ) begin end
    \r_ext13$next  = r_ext13;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:45" *)
    casez (c_exti)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:45" */
      1'h1:
          \r_ext13$next  = i_insn[12:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_ext13$next  = 13'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:49" *)
    casez (c_table)
      /* \nmigen.decoding  = "AL/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:50" */
      1'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:51" *)
          casez (i_insn[2:0])
            3'h0:
                s_table = 16'h0000;
            3'h1:
                s_table = 16'h0001;
            3'h2:
                s_table = 16'h8000;
            3'h3:
                s_table = 16'h1234;
            3'h4:
                s_table = 16'h00ff;
            3'h5:
                s_table = 16'hff00;
            3'h6:
                s_table = 16'h7fff;
            3'h?:
                s_table = 16'hffff;
          endcase
      /* \nmigen.decoding  = "SR/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:52" */
      1'h0:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:53" *)
          casez (i_insn[2:0])
            3'h0:
                s_table = \$2 ;
            3'h1:
                s_table = \$4 ;
            3'h2:
                s_table = \$6 ;
            3'h3:
                s_table = \$8 ;
            3'h4:
                s_table = \$10 ;
            3'h5:
                s_table = \$12 ;
            3'h6:
                s_table = \$14 ;
            3'h?:
                s_table = \$16 ;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:56" *)
    casez (c_width)
      /* \nmigen.decoding  = "IMM3/0" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:57" */
      2'h0:
          s_imm16 = s_table;
      /* \nmigen.decoding  = "IMM5/1" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:59" */
      2'h1:
          s_imm16 = { i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4], i_insn[4:0] };
      /* \nmigen.decoding  = "IMM8/2" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:61" */
      2'h2:
          s_imm16 = { i_insn[7], i_insn[7], i_insn[7], i_insn[7], i_insn[7], i_insn[7], i_insn[7], i_insn[7], i_insn[7:0] };
      /* \nmigen.decoding  = "IMM16/3" */
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:63" */
      2'h3:
          s_imm16 = { r_ext13, i_insn[2:0] };
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:66" *)
    casez (c_pcrel)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:66" */
      1'h1:
          o_imm16 = \$18 [15:0];
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/decoder.py:68" */
      default:
          o_imm16 = s_imm16;
    endcase
  end
  assign \$18  = \$19 ;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.pc" *)
(* generator = "nMigen" *)
module pc(i_addr, c_inc, c_set, rst, clk, r_addr);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:25" *)
  wire [16:0] \$1 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:25" *)
  wire [16:0] \$2 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:17" *)
  input c_inc;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:16" *)
  input c_set;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:13" *)
  input [15:0] i_addr;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:14" *)
  output [15:0] r_addr;
  reg [15:0] r_addr = 16'h0000;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:14" *)
  reg [15:0] \r_addr$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  assign \$2  = r_addr + (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:25" *) 1'h1;
  always @(posedge clk)
    r_addr <= \r_addr$next ;
  always @* begin
    if (\initial ) begin end
    \r_addr$next  = r_addr;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:22" *)
    casez ({ c_inc, c_set })
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:22" */
      2'b?1:
          \r_addr$next  = i_addr;
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:24" */
      2'b1?:
          \r_addr$next  = \$1 [15:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_addr$next  = 16'h0000;
    endcase
  end
  assign \$1  = \$2 ;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc" *)
(* generator = "nMigen" *)
module \pc$2 (csr__r_stb, csr__w_stb, csr__w_data, csr__r_data, rst, clk, tx_pin, csr__addr);
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [3:0] bus_csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [2:0] \bus_csr__addr$1 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [2:0] \bus_csr__addr$3 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] bus_csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] \bus_csr__r_data$10 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] \bus_csr__r_data$9 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire bus_csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire \bus_csr__r_stb$5 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire \bus_csr__r_stb$7 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] bus_csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] \bus_csr__w_data$2 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire [15:0] \bus_csr__w_data$4 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire bus_csr__w_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire \bus_csr__w_stb$6 ;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  wire \bus_csr__w_stb$8 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  output tx_pin;
  bus bus (
    .csr__addr(csr__addr),
    .\csr__addr$1 (bus_csr__addr),
    .\csr__addr$3 (\bus_csr__addr$1 ),
    .\csr__addr$5 (\bus_csr__addr$3 ),
    .csr__r_data(csr__r_data),
    .\csr__r_data$13 (bus_csr__r_data),
    .\csr__r_data$14 (\bus_csr__r_data$9 ),
    .\csr__r_data$15 (\bus_csr__r_data$10 ),
    .csr__r_stb(csr__r_stb),
    .\csr__r_stb$11 (\bus_csr__r_stb$7 ),
    .\csr__r_stb$7 (bus_csr__r_stb),
    .\csr__r_stb$9 (\bus_csr__r_stb$5 ),
    .csr__w_data(csr__w_data),
    .\csr__w_data$2 (bus_csr__w_data),
    .\csr__w_data$4 (\bus_csr__w_data$2 ),
    .\csr__w_data$6 (\bus_csr__w_data$4 ),
    .csr__w_stb(csr__w_stb),
    .\csr__w_stb$10 (\bus_csr__w_stb$6 ),
    .\csr__w_stb$12 (\bus_csr__w_stb$8 ),
    .\csr__w_stb$8 (bus_csr__w_stb)
  );
  crc crc (
    .clk(clk),
    .csr__addr(\bus_csr__addr$3 ),
    .csr__r_data(\bus_csr__r_data$10 ),
    .csr__r_stb(\bus_csr__r_stb$7 ),
    .csr__w_data(\bus_csr__w_data$4 ),
    .csr__w_stb(\bus_csr__w_stb$8 ),
    .rst(rst)
  );
  serial serial (
    .clk(clk),
    .csr__addr(bus_csr__addr),
    .csr__r_data(bus_csr__r_data),
    .csr__r_stb(bus_csr__r_stb),
    .csr__w_data(bus_csr__w_data),
    .csr__w_stb(bus_csr__w_stb),
    .rst(rst),
    .tx_pin(tx_pin)
  );
  statusled statusled (
    .clk(clk),
    .csr__addr(\bus_csr__addr$1 ),
    .csr__r_data(\bus_csr__r_data$9 ),
    .csr__r_stb(\bus_csr__r_stb$5 ),
    .csr__w_data(\bus_csr__w_data$2 ),
    .csr__w_stb(\bus_csr__w_stb$6 ),
    .rst(rst)
  );
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.phy" *)
(* generator = "nMigen" *)
module phy(clk, divisor, data, rdy, ack, err__overflow, err__frame, err__parity, \data$1 , \ack$2 , \rdy$3 , tx_pin, rst);
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:96" *)
  input ack;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:188" *)
  input \ack$2 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:89" *)
  output [7:0] data;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:186" *)
  input [7:0] \data$1 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:259" *)
  input [7:0] divisor;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  output err__frame;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  output err__overflow;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  output err__parity;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:95" *)
  output rdy;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:187" *)
  output \rdy$3 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:87" *)
  wire [7:0] rx_divisor;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:184" *)
  wire [7:0] tx_divisor;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  output tx_pin;
  rx rx (
    .ack(ack),
    .clk(clk),
    .data(data),
    .divisor(rx_divisor),
    .err__frame(err__frame),
    .err__overflow(err__overflow),
    .err__parity(err__parity),
    .rdy(rdy),
    .rst(rst)
  );
  tx tx (
    .ack(\ack$2 ),
    .clk(clk),
    .data(\data$1 ),
    .divisor(tx_divisor),
    .rdy(\rdy$3 ),
    .rst(rst),
    .tx_pin(tx_pin)
  );
  assign tx_divisor = divisor;
  assign rx_divisor = divisor;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.phy.rx" *)
(* generator = "nMigen" *)
module rx(clk, data, rdy, ack, err__overflow, err__frame, err__parity, divisor, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *)
  wire \$1 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:117" *)
  wire [7:0] \$10 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
  wire \$12 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:123" *)
  wire [8:0] \$14 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:123" *)
  wire [8:0] \$15 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:128" *)
  wire [8:0] \$17 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:128" *)
  wire [8:0] \$18 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *)
  wire \$20 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
  wire \$22 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:130" *)
  wire \$24 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
  wire \$26 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *)
  wire \$28 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *)
  wire \$29 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
  wire \$3 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *)
  wire \$31 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *)
  wire \$33 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:139" *)
  wire \$36 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:139" *)
  wire \$37 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:141" *)
  wire \$40 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:145" *)
  wire \$42 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:127" *)
  wire [4:0] \$5 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:127" *)
  wire [4:0] \$6 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *)
  wire \$8 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:98" *)
  wire \U$$0_rx_pin ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:96" *)
  input ack;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:107" *)
  reg [3:0] bitno = 4'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:107" *)
  reg [3:0] \bitno$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:89" *)
  output [7:0] data;
  reg [7:0] data = 8'h00;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:89" *)
  reg [7:0] \data$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:87" *)
  input [7:0] divisor;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  output err__frame;
  reg err__frame = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  reg \err__frame$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  output err__overflow;
  reg err__overflow = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  reg \err__overflow$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  output err__parity;
  reg err__parity = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  reg \err__parity$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
  reg [1:0] \fsm_state$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:95" *)
  output rdy;
  reg rdy = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:95" *)
  reg \rdy$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:106" *)
  reg [7:0] shreg__data = 8'h00;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:106" *)
  reg [7:0] \shreg__data$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:106" *)
  reg shreg__start = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:106" *)
  reg \shreg__start$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:106" *)
  reg shreg__stop = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:106" *)
  reg \shreg__stop$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:105" *)
  reg [7:0] timer = 8'h8a;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:105" *)
  reg [7:0] \timer$next ;
  assign \$10  = divisor >>> (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:117" *) 1'h1;
  assign \$12  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *) 1'h0;
  assign \$15  = timer - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:123" *) 1'h1;
  assign \$18  = divisor - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:128" *) 1'h1;
  assign \$1  = ~ (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *) \U$$0_rx_pin ;
  assign \$20  = ~ (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *) \U$$0_rx_pin ;
  assign \$22  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *) 1'h0;
  assign \$24  = bitno == (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:130" *) 1'h0;
  assign \$26  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *) 1'h0;
  assign \$29  = shreg__start == (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *) 1'h0;
  assign \$31  = shreg__stop == (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *) 1'h1;
  assign \$33  = \$29  & (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *) \$31 ;
  assign \$28  = ~ (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:137" *) \$33 ;
  assign \$37  = "" == (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:139" *) "";
  assign \$36  = ~ (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:139" *) \$37 ;
  assign \$3  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *) 1'h0;
  assign \$40  = ~ (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:141" *) ack;
  assign \$42  = fsm_state == (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:145" *) 2'h2;
  assign \$6  = bitno - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:127" *) 1'h1;
  assign \$8  = ~ (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *) \U$$0_rx_pin ;
  always @(posedge clk)
    rdy <= \rdy$next ;
  always @(posedge clk)
    err__overflow <= \err__overflow$next ;
  always @(posedge clk)
    err__parity <= \err__parity$next ;
  always @(posedge clk)
    err__frame <= \err__frame$next ;
  always @(posedge clk)
    data <= \data$next ;
  always @(posedge clk)
    shreg__start <= \shreg__start$next ;
  always @(posedge clk)
    shreg__data <= \shreg__data$next ;
  always @(posedge clk)
    shreg__stop <= \shreg__stop$next ;
  always @(posedge clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge clk)
    timer <= \timer$next ;
  always @(posedge clk)
    bitno <= \bitno$next ;
  \U$$0  \U$$0  (
    .clk(clk),
    .rst(rst),
    .rx_pin(\U$$0_rx_pin )
  );
  always @* begin
    if (\initial ) begin end
    \bitno$next  = bitno;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:113" */
      2'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *)
          casez (\$1 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" */
            1'h1:
                \bitno$next  = 4'h9;
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:121" */
      2'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
          casez (\$3 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:124" */
            default:
                \bitno$next  = \$5 [3:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \bitno$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \timer$next  = timer;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:113" */
      2'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *)
          casez (\$8 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" */
            1'h1:
                \timer$next  = \$10 ;
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:121" */
      2'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
          casez (\$12 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" */
            1'h1:
                \timer$next  = \$14 [7:0];
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:124" */
            default:
                \timer$next  = \$17 [7:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \timer$next  = 8'h8a;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \err__overflow$next  = err__overflow;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "DONE/2" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:133" */
      2'h2:
          \err__overflow$next  = \$40 ;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \err__overflow$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \rdy$next  = rdy;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:144" *)
    casez (ack)
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:144" */
      1'h1:
          \rdy$next  = \$42 ;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \rdy$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:113" */
      2'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" *)
          casez (\$20 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:114" */
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:121" */
      2'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
          casez (\$22 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:124" */
            default:
                (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:130" *)
                casez (\$24 )
                  /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:130" */
                  1'h1:
                      \fsm_state$next  = 2'h2;
                endcase
          endcase
      /* \nmigen.decoding  = "DONE/2" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:133" */
      2'h2:
          \fsm_state$next  = 2'h0;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \shreg__start$next  = shreg__start;
    \shreg__data$next  = shreg__data;
    \shreg__stop$next  = shreg__stop;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:121" */
      2'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" *)
          casez (\$26 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:122" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:124" */
            default:
                { \shreg__stop$next , \shreg__data$next , \shreg__start$next  } = { \U$$0_rx_pin , shreg__stop, shreg__data };
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
        begin
          \shreg__start$next  = 1'h0;
          \shreg__data$next  = 8'h00;
          \shreg__stop$next  = 1'h0;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \data$next  = data;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "DONE/2" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:133" */
      2'h2:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:134" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:134" */
            1'h1:
                \data$next  = shreg__data;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \data$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \err__frame$next  = err__frame;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "DONE/2" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:133" */
      2'h2:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:134" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:134" */
            1'h1:
                \err__frame$next  = \$28 ;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \err__frame$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \err__parity$next  = err__parity;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:112" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "DONE/2" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:133" */
      2'h2:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:134" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:134" */
            1'h1:
                \err__parity$next  = \$36 ;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \err__parity$next  = 1'h0;
    endcase
  end
  assign \$5  = \$6 ;
  assign \$14  = \$15 ;
  assign \$17  = \$18 ;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.rx_fifo" *)
(* generator = "nMigen" *)
module rx_fifo(clk, r_data, r_en, r_rdy, w_data, w_en, w_rdy, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$10 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$11 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *)
  wire \$13 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$15 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$16 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *)
  wire \$18 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:133" *)
  wire \$2 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *)
  wire \$20 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *)
  wire \$21 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *)
  wire \$24 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:167" *)
  wire [5:0] \$26 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:167" *)
  wire [5:0] \$27 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *)
  wire \$29 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *)
  wire \$31 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *)
  wire \$32 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *)
  wire \$35 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:169" *)
  wire [5:0] \$37 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:169" *)
  wire [5:0] \$38 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:134" *)
  wire \$4 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:152" *)
  wire \$6 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *)
  wire \$8 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:147" *)
  reg [3:0] consume = 4'h0;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:147" *)
  reg [3:0] \consume$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:121" *)
  reg [4:0] level = 5'h00;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:121" *)
  reg [4:0] \level$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:146" *)
  reg [3:0] produce = 4'h0;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:146" *)
  reg [3:0] \produce$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:83" *)
  output [7:0] r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:85" *)
  input r_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:86" *)
  wire [4:0] r_level;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:84" *)
  output r_rdy;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:145" *)
  wire [3:0] storage_r_addr;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:145" *)
  wire [7:0] storage_r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:143" *)
  wire [3:0] storage_w_addr;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:143" *)
  wire [7:0] storage_w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:143" *)
  wire storage_w_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:78" *)
  input [7:0] w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:80" *)
  input w_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:81" *)
  wire [4:0] w_level;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:79" *)
  output w_rdy;
  reg [7:0] storage [15:0];
  initial begin
    storage[0] = 8'h00;
    storage[1] = 8'h00;
    storage[2] = 8'h00;
    storage[3] = 8'h00;
    storage[4] = 8'h00;
    storage[5] = 8'h00;
    storage[6] = 8'h00;
    storage[7] = 8'h00;
    storage[8] = 8'h00;
    storage[9] = 8'h00;
    storage[10] = 8'h00;
    storage[11] = 8'h00;
    storage[12] = 8'h00;
    storage[13] = 8'h00;
    storage[14] = 8'h00;
    storage[15] = 8'h00;
  end
  always @(posedge clk) begin
    if (storage_w_en) storage[storage_w_addr] <= storage_w_data;
  end
  assign storage_r_data = storage[storage_r_addr];
  assign \$11  = produce + (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *) 1'h1;
  assign \$13  = r_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *) r_en;
  assign \$16  = consume + (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *) 1'h1;
  assign \$18  = w_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *) w_en;
  assign \$21  = r_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *) r_en;
  assign \$20  = ~ (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *) \$21 ;
  assign \$24  = \$18  & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *) \$20 ;
  assign \$27  = level + (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:167" *) 1'h1;
  assign \$2  = level != (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:133" *) 5'h10;
  assign \$29  = r_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *) r_en;
  assign \$32  = w_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *) w_en;
  assign \$31  = ~ (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *) \$32 ;
  assign \$35  = \$29  & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *) \$31 ;
  assign \$38  = level - (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:169" *) 1'h1;
  assign \$4  = level != (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:134" *) 1'h0;
  assign \$6  = w_en & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:152" *) w_rdy;
  assign \$8  = w_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *) w_en;
  always @(posedge clk)
    level <= \level$next ;
  always @(posedge clk)
    consume <= \consume$next ;
  always @(posedge clk)
    produce <= \produce$next ;
  always @* begin
    if (\initial ) begin end
    \consume$next  = consume;
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:163" *)
    casez (\$13 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:163" */
      1'h1:
          \consume$next  = \$15 [3:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \consume$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \level$next  = level;
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *)
    casez (\$24 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" */
      1'h1:
          \level$next  = \$26 [4:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *)
    casez (\$35 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" */
      1'h1:
          \level$next  = \$37 [4:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \level$next  = 5'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \produce$next  = produce;
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:154" *)
    casez (\$8 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:154" */
      1'h1:
          \produce$next  = \$10 [3:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \produce$next  = 4'h0;
    endcase
  end
  assign \$10  = \$11 ;
  assign \$15  = \$16 ;
  assign \$26  = \$27 ;
  assign \$37  = \$38 ;
  assign r_data = storage_r_data;
  assign storage_r_addr = consume;
  assign storage_w_en = \$6 ;
  assign storage_w_data = w_data;
  assign storage_w_addr = produce;
  assign r_level = level;
  assign w_level = level;
  assign r_rdy = \$4 ;
  assign w_rdy = \$2 ;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial" *)
(* generator = "nMigen" *)
module serial(clk, csr__addr, csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, tx_pin, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/rec.py:258" *)
  wire \$4 ;
  (* src = "/opt/FPGA/spork/spork/peripheral/serial.py:118" *)
  wire \$6 ;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  wire bridge__rx_err_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  wire bridge__rx_rdy_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/event.py:51" *)
  wire bridge__tx_mty_ev_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [7:0] bridge_serial_divisor__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [7:0] bridge_serial_divisor__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_serial_divisor__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [7:0] bridge_serial_rx_data__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_serial_rx_data__r_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [2:0] bridge_serial_rx_err__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_serial_rx_rdy__r_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [7:0] bridge_serial_tx_data__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_serial_tx_data__w_stb;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_serial_tx_rdy__r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [3:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:96" *)
  wire phy_ack;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:188" *)
  wire \phy_ack$2 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:89" *)
  wire [7:0] phy_data;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:186" *)
  wire [7:0] \phy_data$1 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:259" *)
  reg [7:0] phy_divisor = 8'h8a;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:259" *)
  reg [7:0] \phy_divisor$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  wire phy_err__frame;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  wire phy_err__overflow;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:93" *)
  wire phy_err__parity;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:95" *)
  wire phy_rdy;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:187" *)
  wire \phy_rdy$3 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:83" *)
  wire [7:0] rx_fifo_r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:85" *)
  wire rx_fifo_r_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:84" *)
  wire rx_fifo_r_rdy;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:78" *)
  wire [7:0] rx_fifo_w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:80" *)
  wire rx_fifo_w_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:79" *)
  wire rx_fifo_w_rdy;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:83" *)
  wire [7:0] tx_fifo_r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:85" *)
  wire tx_fifo_r_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:84" *)
  wire tx_fifo_r_rdy;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:78" *)
  wire [7:0] tx_fifo_w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:80" *)
  wire tx_fifo_w_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:79" *)
  wire tx_fifo_w_rdy;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  output tx_pin;
  assign \$4  = | (* src = "/opt/FPGA/nmigen/nmigen/hdl/rec.py:258" *) { phy_err__parity, phy_err__frame, phy_err__overflow };
  assign \$6  = ~ (* src = "/opt/FPGA/spork/spork/peripheral/serial.py:118" *) tx_fifo_r_rdy;
  always @(posedge clk)
    phy_divisor <= \phy_divisor$next ;
  bridge bridge (
    ._rx_err_ev_stb(bridge__rx_err_ev_stb),
    ._rx_rdy_ev_stb(bridge__rx_rdy_ev_stb),
    ._tx_mty_ev_stb(bridge__tx_mty_ev_stb),
    .clk(clk),
    .csr__addr(csr__addr),
    .csr__r_data(csr__r_data),
    .csr__r_stb(csr__r_stb),
    .csr__w_data(csr__w_data),
    .csr__w_stb(csr__w_stb),
    .rst(rst),
    .serial_divisor__r_data(bridge_serial_divisor__r_data),
    .serial_divisor__w_data(bridge_serial_divisor__w_data),
    .serial_divisor__w_stb(bridge_serial_divisor__w_stb),
    .serial_rx_data__r_data(bridge_serial_rx_data__r_data),
    .serial_rx_data__r_stb(bridge_serial_rx_data__r_stb),
    .serial_rx_err__r_data(bridge_serial_rx_err__r_data),
    .serial_rx_rdy__r_data(bridge_serial_rx_rdy__r_data),
    .serial_tx_data__w_data(bridge_serial_tx_data__w_data),
    .serial_tx_data__w_stb(bridge_serial_tx_data__w_stb),
    .serial_tx_rdy__r_data(bridge_serial_tx_rdy__r_data)
  );
  phy phy (
    .ack(phy_ack),
    .\ack$2 (\phy_ack$2 ),
    .clk(clk),
    .data(phy_data),
    .\data$1 (\phy_data$1 ),
    .divisor(phy_divisor),
    .err__frame(phy_err__frame),
    .err__overflow(phy_err__overflow),
    .err__parity(phy_err__parity),
    .rdy(phy_rdy),
    .\rdy$3 (\phy_rdy$3 ),
    .rst(rst),
    .tx_pin(tx_pin)
  );
  rx_fifo rx_fifo (
    .clk(clk),
    .r_data(rx_fifo_r_data),
    .r_en(rx_fifo_r_en),
    .r_rdy(rx_fifo_r_rdy),
    .rst(rst),
    .w_data(rx_fifo_w_data),
    .w_en(rx_fifo_w_en),
    .w_rdy(rx_fifo_w_rdy)
  );
  tx_fifo tx_fifo (
    .clk(clk),
    .r_data(tx_fifo_r_data),
    .r_en(tx_fifo_r_en),
    .r_rdy(tx_fifo_r_rdy),
    .rst(rst),
    .w_data(tx_fifo_w_data),
    .w_en(tx_fifo_w_en),
    .w_rdy(tx_fifo_w_rdy)
  );
  always @* begin
    if (\initial ) begin end
    \phy_divisor$next  = phy_divisor;
    (* src = "/opt/FPGA/spork/spork/peripheral/serial.py:99" *)
    casez (bridge_serial_divisor__w_stb)
      /* src = "/opt/FPGA/spork/spork/peripheral/serial.py:99" */
      1'h1:
          \phy_divisor$next  = bridge_serial_divisor__w_data;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \phy_divisor$next  = 8'h8a;
    endcase
  end
  assign bridge__tx_mty_ev_stb = \$6 ;
  assign bridge__rx_err_ev_stb = \$4 ;
  assign bridge__rx_rdy_ev_stb = rx_fifo_r_rdy;
  assign tx_fifo_r_en = \phy_rdy$3 ;
  assign \phy_ack$2  = tx_fifo_r_rdy;
  assign \phy_data$1  = tx_fifo_r_data;
  assign bridge_serial_tx_rdy__r_data = tx_fifo_w_rdy;
  assign tx_fifo_w_data = bridge_serial_tx_data__w_data;
  assign tx_fifo_w_en = bridge_serial_tx_data__w_stb;
  assign bridge_serial_rx_err__r_data = { phy_err__parity, phy_err__frame, phy_err__overflow };
  assign phy_ack = rx_fifo_w_rdy;
  assign rx_fifo_w_en = phy_rdy;
  assign rx_fifo_w_data = phy_data;
  assign bridge_serial_rx_rdy__r_data = rx_fifo_r_rdy;
  assign rx_fifo_r_en = bridge_serial_rx_data__r_stb;
  assign bridge_serial_rx_data__r_data = rx_fifo_r_data;
  assign bridge_serial_divisor__r_data = phy_divisor;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.cpu.shift" *)
(* generator = "nMigen" *)
module shift(c_en, c_load, o_done, rst, clk, i_shamt);
  reg \initial  = 0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:79" *)
  wire [4:0] \$1 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:79" *)
  wire [4:0] \$2 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:82" *)
  wire \$4 ;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:67" *)
  input c_en;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:68" *)
  input c_load;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:64" *)
  input [3:0] i_shamt;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:65" *)
  output o_done;
  reg o_done;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:70" *)
  reg [3:0] r_shamt = 4'h0;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:70" *)
  reg [3:0] \r_shamt$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:75" *)
  reg [3:0] s_next;
  assign \$2  = r_shamt - (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:79" *) 1'h1;
  assign \$4  = s_next == (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:82" *) 1'h0;
  always @(posedge clk)
    r_shamt <= \r_shamt$next ;
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:76" *)
    casez (c_load)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:76" */
      1'h1:
          s_next = i_shamt;
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:78" */
      default:
          s_next = \$1 [3:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    o_done = 1'h0;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:81" *)
    casez (c_en)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:81" */
      1'h1:
          o_done = \$4 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \r_shamt$next  = r_shamt;
    (* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:81" *)
    casez (c_en)
      /* src = "/opt/FPGA/Boneless-CPU/boneless/gateware/core.py:81" */
      1'h1:
          \r_shamt$next  = s_next;
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \r_shamt$next  = 4'h0;
    endcase
  end
  assign \$1  = \$2 ;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.statusled" *)
(* generator = "nMigen" *)
module statusled(clk, csr__addr, csr__w_data, csr__r_stb, csr__w_stb, csr__r_data, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire bridge_statusled_en__w_data;
  (* src = "/opt/FPGA/spork/spork/cores/periph/base.py:291" *)
  wire [15:0] bridge_statusled_led__w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [2:0] csr__addr;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  output [15:0] csr__r_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__r_stb;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input [15:0] csr__w_data;
  (* src = "/opt/FPGA/nmigen-soc/nmigen_soc/csr/bus.py:350" *)
  input csr__w_stb;
  (* src = "/opt/FPGA/nmigen/nmigen/build/res.py:143" *)
  reg led_0__o;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  \bridge$3  bridge (
    .clk(clk),
    .csr__addr(csr__addr),
    .csr__r_data(csr__r_data),
    .csr__r_stb(csr__r_stb),
    .csr__w_data(csr__w_data),
    .csr__w_stb(csr__w_stb),
    .rst(rst),
    .statusled_en__w_data(bridge_statusled_en__w_data),
    .statusled_led__w_data(bridge_statusled_led__w_data)
  );
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/spork/spork/peripheral/leds.py:34" *)
    casez (bridge_statusled_en__w_data)
      /* src = "/opt/FPGA/spork/spork/peripheral/leds.py:34" */
      1'h1:
          led_0__o = bridge_statusled_led__w_data[0];
      /* src = "/opt/FPGA/spork/spork/peripheral/leds.py:36" */
      default:
          led_0__o = 1'h0;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.phy.tx" *)
(* generator = "nMigen" *)
module tx(clk, data, ack, rdy, divisor, tx_pin, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
  wire \$1 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:214" *)
  wire [8:0] \$10 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:214" *)
  wire [8:0] \$11 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
  wire \$13 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:220" *)
  wire [8:0] \$15 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:220" *)
  wire [8:0] \$16 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:225" *)
  wire [8:0] \$18 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:225" *)
  wire [8:0] \$19 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
  wire \$21 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:227" *)
  wire \$23 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/rec.py:178" *)
  wire [10:0] \$3 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
  wire \$5 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:224" *)
  wire [4:0] \$7 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:224" *)
  wire [4:0] \$8 ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:188" *)
  input ack;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:199" *)
  reg [3:0] bitno = 4'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:199" *)
  reg [3:0] \bitno$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:186" *)
  input [7:0] data;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:184" *)
  input [7:0] divisor;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
  reg fsm_state = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
  reg \fsm_state$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:187" *)
  output rdy;
  reg rdy;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:198" *)
  reg [7:0] shreg__data = 8'h00;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:198" *)
  reg [7:0] \shreg__data$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:198" *)
  reg shreg__start = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:198" *)
  reg \shreg__start$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:198" *)
  reg shreg__stop = 1'h0;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:198" *)
  reg \shreg__stop$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:197" *)
  reg [7:0] timer = 8'h8a;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:197" *)
  reg [7:0] \timer$next ;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  output tx_pin;
  reg tx_pin = 1'h1;
  (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:190" *)
  reg \tx_pin$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/build/res.py:143" *)
  wire uart_0__tx__o;
  assign \$11  = divisor - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:214" *) 1'h1;
  assign \$13  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *) 1'h0;
  assign \$16  = timer - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:220" *) 1'h1;
  assign \$1  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *) 1'h0;
  assign \$19  = divisor - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:225" *) 1'h1;
  assign \$21  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *) 1'h0;
  assign \$23  = bitno == (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:227" *) 1'h0;
  assign \$3  = + (* src = "/opt/FPGA/nmigen/nmigen/hdl/rec.py:178" *) { shreg__stop, shreg__data, shreg__start };
  assign \$5  = timer != (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *) 1'h0;
  assign \$8  = bitno - (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:224" *) 1'h1;
  always @(posedge clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge clk)
    timer <= \timer$next ;
  always @(posedge clk)
    bitno <= \bitno$next ;
  always @(posedge clk)
    shreg__start <= \shreg__start$next ;
  always @(posedge clk)
    shreg__data <= \shreg__data$next ;
  always @(posedge clk)
    shreg__stop <= \shreg__stop$next ;
  always @(posedge clk)
    tx_pin <= \tx_pin$next ;
  always @* begin
    if (\initial ) begin end
    rdy = 1'h0;
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:205" */
      1'h0:
          rdy = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \bitno$next  = bitno;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:205" */
      1'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" */
            1'h1:
                \bitno$next  = 4'h9;
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:218" */
      1'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
          casez (\$5 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:221" */
            default:
                \bitno$next  = \$7 [3:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \bitno$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \timer$next  = timer;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:205" */
      1'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" */
            1'h1:
                \timer$next  = \$10 [7:0];
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:218" */
      1'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
          casez (\$13 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" */
            1'h1:
                \timer$next  = \$15 [7:0];
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:221" */
            default:
                \timer$next  = \$18 [7:0];
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \timer$next  = 8'h8a;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:205" */
      1'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" */
            1'h1:
                \fsm_state$next  = 1'h1;
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:218" */
      1'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
          casez (\$21 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:221" */
            default:
                (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:227" *)
                casez (\$23 )
                  /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:227" */
                  1'h1:
                      \fsm_state$next  = 1'h0;
                endcase
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \fsm_state$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \shreg__start$next  = shreg__start;
    \shreg__data$next  = shreg__data;
    \shreg__stop$next  = shreg__stop;
    \tx_pin$next  = tx_pin;
    (* full_case = 32'd1 *)
    (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:204" *)
    casez (fsm_state)
      /* \nmigen.decoding  = "IDLE/0" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:205" */
      1'h0:
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" *)
          casez (ack)
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:207" */
            1'h1:
              begin
                \shreg__start$next  = 1'h0;
                \shreg__data$next  = data;
                \shreg__stop$next  = 1'h1;
              end
          endcase
      /* \nmigen.decoding  = "BUSY/1" */
      /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:218" */
      1'h1:
          (* full_case = 32'd1 *)
          (* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" *)
          casez (\$1 )
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:219" */
            1'h1:
                /* empty */;
            /* src = "/opt/FPGA/nmigen-stdio/nmigen_stdio/serial.py:221" */
            default:
                { \shreg__stop$next , \shreg__data$next , \shreg__start$next , \tx_pin$next  } = \$3 ;
          endcase
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
        begin
          \shreg__start$next  = 1'h0;
          \shreg__data$next  = 8'h00;
          \shreg__stop$next  = 1'h0;
          \tx_pin$next  = 1'h1;
        end
    endcase
  end
  assign \$7  = \$8 ;
  assign \$10  = \$11 ;
  assign \$15  = \$16 ;
  assign \$18  = \$19 ;
  assign uart_0__tx__o = tx_pin;
endmodule

(* \nmigen.hierarchy  = "boneless.cpu.pc.serial.tx_fifo" *)
(* generator = "nMigen" *)
module tx_fifo(clk, w_en, w_data, w_rdy, r_data, r_rdy, r_en, rst);
  reg \initial  = 0;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$10 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$11 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *)
  wire \$13 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$15 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *)
  wire [4:0] \$16 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *)
  wire \$18 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:133" *)
  wire \$2 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *)
  wire \$20 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *)
  wire \$21 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *)
  wire \$24 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:167" *)
  wire [5:0] \$26 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:167" *)
  wire [5:0] \$27 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *)
  wire \$29 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *)
  wire \$31 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *)
  wire \$32 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *)
  wire \$35 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:169" *)
  wire [5:0] \$37 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:169" *)
  wire [5:0] \$38 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:134" *)
  wire \$4 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:152" *)
  wire \$6 ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *)
  wire \$8 ;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input clk;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:147" *)
  reg [3:0] consume = 4'h0;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:147" *)
  reg [3:0] \consume$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:121" *)
  reg [4:0] level = 5'h00;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:121" *)
  reg [4:0] \level$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:146" *)
  reg [3:0] produce = 4'h0;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:146" *)
  reg [3:0] \produce$next ;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:83" *)
  output [7:0] r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:85" *)
  input r_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:86" *)
  wire [4:0] r_level;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:84" *)
  output r_rdy;
  (* src = "/opt/FPGA/nmigen/nmigen/hdl/ir.py:524" *)
  input rst;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:145" *)
  wire [3:0] storage_r_addr;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:145" *)
  wire [7:0] storage_r_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:143" *)
  wire [3:0] storage_w_addr;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:143" *)
  wire [7:0] storage_w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:143" *)
  wire storage_w_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:78" *)
  input [7:0] w_data;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:80" *)
  input w_en;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:81" *)
  wire [4:0] w_level;
  (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:79" *)
  output w_rdy;
  reg [7:0] storage [15:0];
  initial begin
    storage[0] = 8'h00;
    storage[1] = 8'h00;
    storage[2] = 8'h00;
    storage[3] = 8'h00;
    storage[4] = 8'h00;
    storage[5] = 8'h00;
    storage[6] = 8'h00;
    storage[7] = 8'h00;
    storage[8] = 8'h00;
    storage[9] = 8'h00;
    storage[10] = 8'h00;
    storage[11] = 8'h00;
    storage[12] = 8'h00;
    storage[13] = 8'h00;
    storage[14] = 8'h00;
    storage[15] = 8'h00;
  end
  always @(posedge clk) begin
    if (storage_w_en) storage[storage_w_addr] <= storage_w_data;
  end
  assign storage_r_data = storage[storage_r_addr];
  assign \$11  = produce + (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *) 1'h1;
  assign \$13  = r_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *) r_en;
  assign \$16  = consume + (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:91" *) 1'h1;
  assign \$18  = w_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *) w_en;
  assign \$21  = r_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *) r_en;
  assign \$20  = ~ (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *) \$21 ;
  assign \$24  = \$18  & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *) \$20 ;
  assign \$27  = level + (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:167" *) 1'h1;
  assign \$2  = level != (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:133" *) 5'h10;
  assign \$29  = r_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:139" *) r_en;
  assign \$32  = w_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *) w_en;
  assign \$31  = ~ (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *) \$32 ;
  assign \$35  = \$29  & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *) \$31 ;
  assign \$38  = level - (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:169" *) 1'h1;
  assign \$4  = level != (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:134" *) 1'h0;
  assign \$6  = w_en & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:152" *) w_rdy;
  assign \$8  = w_rdy & (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:140" *) w_en;
  always @(posedge clk)
    level <= \level$next ;
  always @(posedge clk)
    consume <= \consume$next ;
  always @(posedge clk)
    produce <= \produce$next ;
  always @* begin
    if (\initial ) begin end
    \consume$next  = consume;
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:163" *)
    casez (\$13 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:163" */
      1'h1:
          \consume$next  = \$15 [3:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \consume$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \level$next  = level;
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" *)
    casez (\$24 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:166" */
      1'h1:
          \level$next  = \$26 [4:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" *)
    casez (\$35 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:168" */
      1'h1:
          \level$next  = \$37 [4:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \level$next  = 5'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \produce$next  = produce;
    (* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:154" *)
    casez (\$8 )
      /* src = "/opt/FPGA/nmigen/nmigen/lib/fifo.py:154" */
      1'h1:
          \produce$next  = \$10 [3:0];
    endcase
    (* src = "/opt/FPGA/nmigen/nmigen/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \produce$next  = 4'h0;
    endcase
  end
  assign \$10  = \$11 ;
  assign \$15  = \$16 ;
  assign \$26  = \$27 ;
  assign \$37  = \$38 ;
  assign r_data = storage_r_data;
  assign storage_r_addr = consume;
  assign storage_w_en = \$6 ;
  assign storage_w_data = w_data;
  assign storage_w_addr = produce;
  assign r_level = level;
  assign w_level = level;
  assign r_rdy = \$4 ;
  assign w_rdy = \$2 ;
endmodule
